"use client";
import {
  isEthereumWallet
} from "./chunk-JDA52GEL.js";
import "./chunk-YX6F2Z6X.js";
import {
  ErrorBoundaryExclude,
  ErrorBoundaryInclude,
  useDynamicContext,
  useWalletConnectorEvent
} from "./chunk-HLOWGLKG.js";
import "./chunk-HYGZHLC7.js";
import "./chunk-3U5WQK3X.js";
import {
  createConnector,
  useConfig,
  useConnect,
  useDisconnect
} from "./chunk-GBBAEZJY.js";
import "./chunk-LPGURRXS.js";
import {
  createWalletClient,
  custom
} from "./chunk-EDLG2KN2.js";
import "./chunk-TJ7AQGWU.js";
import "./chunk-34M53ZAL.js";
import {
  getAddress
} from "./chunk-CP5V34DB.js";
import "./chunk-QBLAU726.js";
import {
  require_jsx_runtime
} from "./chunk-7LIHU253.js";
import "./chunk-HVT2ELN7.js";
import "./chunk-6K54Z4X6.js";
import "./chunk-LVMHB5EJ.js";
import "./chunk-7GOJWEZH.js";
import "./chunk-4IDULAJH.js";
import "./chunk-OK6ZKALG.js";
import "./chunk-ZTXWSXNR.js";
import "./chunk-LR3WEES7.js";
import "./chunk-CLTFP3BU.js";
import "./chunk-YWDJ7V5D.js";
import "./chunk-R5R4E5YD.js";
import "./chunk-D6PPKFIJ.js";
import {
  Logger,
  assertPackageVersion,
  logger
} from "./chunk-3OCKXW2Z.js";
import "./chunk-7KMCIXGS.js";
import {
  require_react
} from "./chunk-ASWLBWKD.js";
import {
  __toESM
} from "./chunk-MMN2DTB3.js";

// node_modules/@dynamic-labs/wagmi-connector/package.js
var version = "4.26.0";

// node_modules/@dynamic-labs/wagmi-connector/src/lib/DynamicWagmiConnector.js
var import_jsx_runtime2 = __toESM(require_jsx_runtime(), 1);
var import_react4 = __toESM(require_react(), 1);

// node_modules/@dynamic-labs/wagmi-connector/_virtual/_tslib.js
function __awaiter(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
}

// node_modules/@dynamic-labs/wagmi-connector/src/lib/Connector.js
var getCreateConnectorFn = ({ connectorId, wallet }) => createConnector((config) => ({
  connect() {
    return __awaiter(this, void 0, void 0, function* () {
      if (!wallet.connector) {
        throw new Error("WalletConnector is not defined");
      }
      wallet.connector.on("accountChange", this.handleAccountsChange.bind(this));
      wallet.connector.on("chainChange", this.handleChainChange.bind(this));
      wallet.connector.on("disconnect", this.onDisconnect.bind(this));
      const accounts = yield this.getAccounts();
      return {
        accounts,
        chainId: yield this.getChainId()
      };
    });
  },
  disconnect() {
    return __awaiter(this, void 0, void 0, function* () {
      wallet.connector.off("accountChange", this.handleAccountsChange.bind(this));
      wallet.connector.off("chainChange", this.handleChainChange.bind(this));
      wallet.connector.off("disconnect", this.onDisconnect.bind(this));
    });
  },
  getAccounts() {
    return __awaiter(this, void 0, void 0, function* () {
      return [getAddress(wallet.address)];
    });
  },
  getChainId() {
    return __awaiter(this, void 0, void 0, function* () {
      const network = yield wallet.connector.getNetwork();
      if (!network) {
        throw new Error("Network is not defined");
      }
      return Number(network);
    });
  },
  getClient(args) {
    return __awaiter(this, void 0, void 0, function* () {
      var _a, _b;
      const walletClient = yield wallet.getWalletClient();
      const transportConfig = wallet.getTransportConfig();
      const client = createWalletClient({
        account: walletClient.account || ((_a = yield this.getAccounts()) === null || _a === void 0 ? void 0 : _a[0]),
        chain: (_b = walletClient.chain || config.chains.find((chain) => chain.id === (args === null || args === void 0 ? void 0 : args.chainId))) !== null && _b !== void 0 ? _b : config.chains[0],
        transport: custom(walletClient, transportConfig)
      });
      return client;
    });
  },
  getProvider() {
    return __awaiter(this, void 0, void 0, function* () {
      return wallet.getWalletClient();
    });
  },
  handleAccountsChange({ accounts }) {
    this.onAccountsChanged(accounts);
  },
  handleChainChange({ chain }) {
    this.onChainChanged(chain);
  },
  id: connectorId,
  isAuthorized() {
    return __awaiter(this, void 0, void 0, function* () {
      var _a, _b;
      const accounts = (_b = yield (_a = wallet.connector) === null || _a === void 0 ? void 0 : _a.getConnectedAccounts()) !== null && _b !== void 0 ? _b : [];
      return accounts.includes(wallet.address);
    });
  },
  name: "Dynamic",
  onAccountsChanged(_) {
  },
  onChainChanged(chainId) {
    config.emitter.emit("change", {
      chainId: Number(chainId)
    });
  },
  onDisconnect() {
  },
  switchChain(_a) {
    return __awaiter(this, arguments, void 0, function* ({ chainId }) {
      const chain = config.chains.find((x) => x.id === chainId);
      if (!chain) {
        throw new Error(`Chain ${chainId} is not supported`);
      }
      yield wallet.switchNetwork(chainId);
      return chain;
    });
  },
  type: "dynamic"
}));

// node_modules/@dynamic-labs/wagmi-connector/src/lib/SyncDynamicWagmi.js
var import_jsx_runtime = __toESM(require_jsx_runtime(), 1);
var import_react = __toESM(require_react(), 1);
var SyncDynamicWagmi = ({ children, connector, wallet }) => {
  const { state: { status: clientStatus } } = useConfig();
  const { connect } = useConnect();
  const { disconnect } = useDisconnect();
  const lastConnectedWalletId = (0, import_react.useRef)(void 0);
  const hasPreviousConnection = Boolean(lastConnectedWalletId.current);
  const disconnectWagmi = (0, import_react.useCallback)(() => {
    logger.logVerboseTroubleshootingMessage("[SyncDynamicWagmi] disconnecting wagmi - previous status: ", {
      clientStatus,
      lastConnectedWalletId: lastConnectedWalletId.current
    });
    if (clientStatus === "disconnected") {
      return;
    }
    disconnect();
    lastConnectedWalletId.current = void 0;
  }, [disconnect, clientStatus]);
  const connectWagmi = (0, import_react.useCallback)((connector2, newId, forceConnect) => {
    logger.logVerboseTroubleshootingMessage("[SyncDynamicWagmi] connecting wagmi - previous status: ", {
      clientStatus,
      connectorKey: connector2.key,
      forceConnect,
      lastConnectedWalletId: lastConnectedWalletId.current,
      newId
    });
    if (clientStatus !== "disconnected" && !forceConnect) {
      return;
    }
    lastConnectedWalletId.current = newId;
    connect({ connector: connector2 });
  }, [connect, clientStatus]);
  const sync = (0, import_react.useCallback)(() => __awaiter(void 0, void 0, void 0, function* () {
    logger.logVerboseTroubleshootingMessage("[SyncDynamicWagmi] sync", {
      connectorKey: connector === null || connector === void 0 ? void 0 : connector.key,
      hasPreviousConnection,
      lastConnectedWalletId: lastConnectedWalletId.current,
      wallet: wallet === null || wallet === void 0 ? void 0 : wallet.address
    });
    if (!connector || !(wallet === null || wallet === void 0 ? void 0 : wallet.address)) {
      disconnectWagmi();
      return;
    }
    const newId = `${connector.id}-${wallet.address}`;
    if (newId === lastConnectedWalletId.current) {
      return;
    }
    if (hasPreviousConnection) {
      disconnectWagmi();
    }
    connectWagmi(connector, newId, hasPreviousConnection);
  }), [
    connectWagmi,
    connector,
    disconnectWagmi,
    hasPreviousConnection,
    wallet === null || wallet === void 0 ? void 0 : wallet.address
  ]);
  useWalletConnectorEvent(wallet === null || wallet === void 0 ? void 0 : wallet.connector, "accountChange", () => {
    var _a;
    logger.logVerboseTroubleshootingMessage("[SyncDynamicWagmi] accountChange", {
      clientStatus,
      connectorKey: (_a = wallet === null || wallet === void 0 ? void 0 : wallet.connector) === null || _a === void 0 ? void 0 : _a.key,
      lastConnectedWalletId: lastConnectedWalletId.current
    });
    sync();
  });
  (0, import_react.useEffect)(() => {
    logger.logVerboseTroubleshootingMessage("[SyncDynamicWagmi] useEffect", {
      clientStatus
    });
    sync();
  }, [sync, clientStatus]);
  return (0, import_jsx_runtime.jsx)(import_jsx_runtime.Fragment, { children });
};

// node_modules/@dynamic-labs/wagmi-connector/src/lib/useChainMismatchLogger.js
var import_react2 = __toESM(require_react(), 1);
var logger2 = new Logger("DynamicWagmiConnector");
var useChainMismatchLogger = ({ suppress } = { suppress: false }) => {
  const config = useConfig();
  const { networkConfigurations } = useDynamicContext();
  (0, import_react2.useEffect)(() => {
    if (!(networkConfigurations === null || networkConfigurations === void 0 ? void 0 : networkConfigurations.evm) || suppress)
      return;
    const wagmiChains = config.chains;
    const wagmiChainIds = wagmiChains.map((chain) => chain.id);
    const dynamicChains = networkConfigurations.evm;
    const dynamicChainIds = dynamicChains.map((chain) => chain.chainId);
    wagmiChains.forEach((chain) => {
      if (!dynamicChainIds.includes(chain.id)) {
        const message = `Chain (id: ${chain.id} name: ${chain.name}) is present in the Wagmi config, but is not present in the Dynamic configuration. Please make sure to enable the chain in your Dynamic Dashboard, or add it to the evmNetworks prop on DynamicContextProvider. For more information, see: https://docs.dynamic.xyz/guides/frameworks/wagmi-v2#chain-configuration`;
        logger2.warn(message);
      }
    });
    dynamicChains.forEach((chain) => {
      if (!wagmiChainIds.includes(Number(chain.chainId))) {
        const message = `Chain (id: ${chain.chainId} name: ${chain.name}) is present in the Dynamic config, but is not present in the Wagmi configuration. Please make sure to add the chain to the chains prop on the Wagmi createConfig function. For more information, see: https://docs.dynamic.xyz/guides/frameworks/wagmi-v2#chain-configuration`;
        logger2.warn(message);
      }
    });
  }, [config.chains, networkConfigurations, suppress]);
};

// node_modules/@dynamic-labs/wagmi-connector/src/lib/hooks/useConnectorId/useConnectorId.js
var import_react3 = __toESM(require_react(), 1);
var useConnectorId = () => {
  const lastSeenWalletConnector = (0, import_react3.useRef)(void 0);
  const lastConnectorKey = (0, import_react3.useRef)(0);
  return (0, import_react3.useCallback)((walletConnector) => {
    if (walletConnector !== lastSeenWalletConnector.current) {
      lastSeenWalletConnector.current = walletConnector;
      lastConnectorKey.current += 1;
    }
    return `dynamic-${walletConnector.key}-${lastConnectorKey.current}`;
  }, []);
};

// node_modules/@dynamic-labs/wagmi-connector/src/lib/DynamicWagmiConnector.js
var DynamicWagmiConnector = ({ suppressChainMismatchError = false, children }) => (0, import_jsx_runtime2.jsx)(ErrorBoundaryInclude, { children: (0, import_jsx_runtime2.jsx)(DynamicWagmiConnectorInner, { suppressChainMismatchError, children }) });
var getEvmWallet = (wallet) => {
  if (!wallet || !isEthereumWallet(wallet)) {
    return null;
  }
  return wallet;
};
var DynamicWagmiConnectorInner = ({ suppressChainMismatchError = false, children }) => {
  const config = useConfig();
  const { primaryWallet } = useDynamicContext();
  useChainMismatchLogger({ suppress: suppressChainMismatchError });
  const evmWallet = getEvmWallet(primaryWallet);
  const getConnectorId = useConnectorId();
  const connector = (0, import_react4.useMemo)(() => {
    if (!evmWallet) {
      return;
    }
    const connectorId = getConnectorId(evmWallet.connector);
    return config._internal.connectors.setup(getCreateConnectorFn({
      connectorId,
      wallet: evmWallet
    }));
  }, [config._internal.connectors, getConnectorId, evmWallet]);
  logger.logVerboseTroubleshootingMessage("[DynamicWagmiConnector] DynamicWagmiConnectorInner", {
    connector,
    evmWallet,
    primaryWallet
  });
  (0, import_react4.useEffect)(() => {
    config._internal.connectors.setState(connector ? [connector] : []);
  }, [config._internal.connectors, connector]);
  return (0, import_jsx_runtime2.jsx)(SyncDynamicWagmi, { connector, wallet: evmWallet, children: (0, import_jsx_runtime2.jsx)(ErrorBoundaryExclude, { children }) });
};

// node_modules/@dynamic-labs/wagmi-connector/src/index.js
assertPackageVersion("@dynamic-labs/wagmi-connector", version);
export {
  DynamicWagmiConnector
};
//# sourceMappingURL=@dynamic-labs_wagmi-connector.js.map
