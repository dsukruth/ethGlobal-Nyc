import {
  assertPackageVersion
} from "./chunk-3OCKXW2Z.js";

// node_modules/@dynamic-labs/rpc-providers/package.js
var version = "4.26.0";

// node_modules/@dynamic-labs/rpc-providers/src/RpcProviders.js
var ProviderChain;
(function(ProviderChain2) {
  ProviderChain2["ECLIPSE"] = "eclipse";
  ProviderChain2["EVM"] = "evm";
  ProviderChain2["SOLANA"] = "solana";
  ProviderChain2["STARKNET"] = "starknet";
  ProviderChain2["SUI"] = "sui";
})(ProviderChain || (ProviderChain = {}));

// node_modules/@dynamic-labs/rpc-providers/_virtual/_tslib.js
function __awaiter(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
}

// node_modules/@dynamic-labs/rpc-providers/src/ChainRpcProviders.js
var ChainRpcProvidersClass = class _ChainRpcProvidersClass {
  static get client() {
    if (!_ChainRpcProvidersClass.instance) {
      _ChainRpcProvidersClass.instance = new _ChainRpcProvidersClass();
    }
    return _ChainRpcProvidersClass.instance;
  }
  constructor() {
    this.getProvidersMethods = {};
  }
  static getProviders(configurations) {
    Object.values(ProviderChain).forEach((chain) => {
      var _a, _b;
      if (!_ChainRpcProvidersClass.providers[chain]) {
        const providers = (_b = (_a = _ChainRpcProvidersClass.client.getProvidersMethods)[chain]) === null || _b === void 0 ? void 0 : _b.call(_a, configurations);
        if (providers) {
          Object.assign(_ChainRpcProvidersClass.providers, {
            [chain]: providers
          });
        }
      }
    });
    return _ChainRpcProvidersClass.providers;
  }
  static registerChainProviders(providerChain, fn) {
    return __awaiter(this, void 0, void 0, function* () {
      if (!_ChainRpcProvidersClass.client.getProvidersMethods[providerChain]) {
        Object.assign(_ChainRpcProvidersClass.client.getProvidersMethods, {
          [providerChain]: fn
        });
      }
    });
  }
};
ChainRpcProvidersClass.providers = {};
ChainRpcProvidersClass.wipeInstance = () => {
  ChainRpcProvidersClass.instance = void 0;
  ChainRpcProvidersClass.providers = {};
};
var ChainRpcProviders = ChainRpcProvidersClass;

// node_modules/@dynamic-labs/rpc-providers/src/index.js
assertPackageVersion("@dynamic-labs/rpc-providers", version);

export {
  ProviderChain,
  ChainRpcProviders
};
//# sourceMappingURL=chunk-CLTFP3BU.js.map
