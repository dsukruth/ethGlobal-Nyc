{
  "version": 3,
  "sources": ["../../@dynamic-labs/wagmi-connector/package.js", "../../@dynamic-labs/wagmi-connector/src/lib/DynamicWagmiConnector.js", "../../@dynamic-labs/wagmi-connector/_virtual/_tslib.js", "../../@dynamic-labs/wagmi-connector/src/lib/Connector.js", "../../@dynamic-labs/wagmi-connector/src/lib/SyncDynamicWagmi.js", "../../@dynamic-labs/wagmi-connector/src/lib/useChainMismatchLogger.js", "../../@dynamic-labs/wagmi-connector/src/lib/hooks/useConnectorId/useConnectorId.js", "../../@dynamic-labs/wagmi-connector/src/index.js"],
  "sourcesContent": ["'use client'\nvar version = \"4.26.0\";\n\nexport { version };\n", "'use client'\nimport { jsx } from 'react/jsx-runtime';\nimport { useMemo, useEffect } from 'react';\nimport { useConfig } from 'wagmi';\nimport { ErrorBoundaryInclude, useDynamicContext, ErrorBoundaryExclude } from '@dynamic-labs/sdk-react-core';\nimport { isEthereumWallet } from '@dynamic-labs/ethereum-core';\nimport { logger } from '@dynamic-labs/wallet-connector-core';\nimport { getCreateConnectorFn } from './Connector.js';\nimport { SyncDynamicWagmi } from './SyncDynamicWagmi.js';\nimport { useChainMismatchLogger } from './useChainMismatchLogger.js';\nimport { useConnectorId } from './hooks/useConnectorId/useConnectorId.js';\n\nconst DynamicWagmiConnector = ({ suppressChainMismatchError = false, children, }) => (jsx(ErrorBoundaryInclude, { children: jsx(DynamicWagmiConnectorInner, { suppressChainMismatchError: suppressChainMismatchError, children: children }) }));\nconst getEvmWallet = (wallet) => {\n    if (!wallet || !isEthereumWallet(wallet)) {\n        return null;\n    }\n    return wallet;\n};\nconst DynamicWagmiConnectorInner = ({ suppressChainMismatchError = false, children }) => {\n    const config = useConfig();\n    const { primaryWallet } = useDynamicContext();\n    useChainMismatchLogger({ suppress: suppressChainMismatchError });\n    const evmWallet = getEvmWallet(primaryWallet);\n    const getConnectorId = useConnectorId();\n    const connector = useMemo(() => {\n        if (!evmWallet) {\n            return;\n        }\n        const connectorId = getConnectorId(evmWallet.connector);\n        return config._internal.connectors.setup(getCreateConnectorFn({\n            connectorId,\n            wallet: evmWallet,\n        }));\n    }, [config._internal.connectors, getConnectorId, evmWallet]);\n    logger.logVerboseTroubleshootingMessage('[DynamicWagmiConnector] DynamicWagmiConnectorInner', {\n        connector,\n        evmWallet,\n        primaryWallet: primaryWallet,\n    });\n    /**\n     * Updating the wagmi config must be done in a useEffect because\n     * when setting the public client and connectors, wagmi will fire\n     * an rerender.\n     * Keeping the update in a useEffect will prevent an state update\n     * while react is in the middle of rendering.\n     */\n    useEffect(() => {\n        config._internal.connectors.setState(connector ? [connector] : []);\n    }, [config._internal.connectors, connector]);\n    return (jsx(SyncDynamicWagmi, { connector: connector, wallet: evmWallet, children: jsx(ErrorBoundaryExclude, { children: children }) }));\n};\n\nexport { DynamicWagmiConnector, DynamicWagmiConnectorInner };\n", "'use client'\n/******************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n\r\nfunction __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\ntypeof SuppressedError === \"function\" ? SuppressedError : function (error, suppressed, message) {\r\n    var e = new Error(message);\r\n    return e.name = \"SuppressedError\", e.error = error, e.suppressed = suppressed, e;\r\n};\n\nexport { __awaiter };\n", "'use client'\nimport { __awaiter } from '../../_virtual/_tslib.js';\nimport { createConnector } from '@wagmi/core';\nimport { getAddress, createWalletClient, custom } from 'viem';\n\n/* eslint-disable prefer-arrow/prefer-arrow-functions */\nconst getCreateConnectorFn = ({ connectorId, wallet, }) => createConnector((config) => ({\n    connect() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!wallet.connector) {\n                throw new Error('WalletConnector is not defined');\n            }\n            wallet.connector.on('accountChange', this.handleAccountsChange.bind(this));\n            wallet.connector.on('chainChange', this.handleChainChange.bind(this));\n            wallet.connector.on('disconnect', this.onDisconnect.bind(this));\n            const accounts = yield this.getAccounts();\n            return {\n                accounts,\n                chainId: yield this.getChainId(),\n            };\n        });\n    },\n    disconnect() {\n        return __awaiter(this, void 0, void 0, function* () {\n            wallet.connector.off('accountChange', this.handleAccountsChange.bind(this));\n            wallet.connector.off('chainChange', this.handleChainChange.bind(this));\n            wallet.connector.off('disconnect', this.onDisconnect.bind(this));\n        });\n    },\n    getAccounts() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return [getAddress(wallet.address)];\n        });\n    },\n    getChainId() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const network = yield wallet.connector.getNetwork();\n            if (!network) {\n                throw new Error('Network is not defined');\n            }\n            return Number(network);\n        });\n    },\n    getClient(args) {\n        return __awaiter(this, void 0, void 0, function* () {\n            var _a, _b;\n            const walletClient = yield wallet.getWalletClient();\n            const transportConfig = wallet.getTransportConfig();\n            const client = createWalletClient({\n                account: walletClient.account || ((_a = (yield this.getAccounts())) === null || _a === void 0 ? void 0 : _a[0]),\n                chain: (_b = (walletClient.chain ||\n                    config.chains.find((chain) => chain.id === (args === null || args === void 0 ? void 0 : args.chainId)))) !== null && _b !== void 0 ? _b : config.chains[0],\n                transport: custom(walletClient, transportConfig),\n            });\n            return client;\n        });\n    },\n    getProvider() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return wallet.getWalletClient();\n        });\n    },\n    handleAccountsChange({ accounts }) {\n        this.onAccountsChanged(accounts);\n    },\n    handleChainChange({ chain }) {\n        this.onChainChanged(chain);\n    },\n    id: connectorId,\n    isAuthorized() {\n        return __awaiter(this, void 0, void 0, function* () {\n            var _a, _b;\n            const accounts = (_b = (yield ((_a = wallet.connector) === null || _a === void 0 ? void 0 : _a.getConnectedAccounts()))) !== null && _b !== void 0 ? _b : [];\n            return accounts.includes(wallet.address);\n        });\n    },\n    name: 'Dynamic',\n    onAccountsChanged(_) {\n        // this changes the active account on wagmi, but we don't want to do that\n        // we want the active account to always match the primary wallet\n        // so we should not emit this event on the wagmi config\n    },\n    onChainChanged(chainId) {\n        config.emitter.emit('change', {\n            chainId: Number(chainId),\n        });\n    },\n    onDisconnect() { },\n    switchChain(_a) {\n        return __awaiter(this, arguments, void 0, function* ({ chainId }) {\n            const chain = config.chains.find((x) => x.id === chainId);\n            if (!chain) {\n                throw new Error(`Chain ${chainId} is not supported`);\n            }\n            yield wallet.switchNetwork(chainId);\n            return chain;\n        });\n    },\n    type: 'dynamic',\n}));\n\nexport { getCreateConnectorFn };\n", "'use client'\nimport { __awaiter } from '../../_virtual/_tslib.js';\nimport { jsx, Fragment } from 'react/jsx-runtime';\nimport { useRef, useCallback, useEffect } from 'react';\nimport { useConfig, useConnect, useDisconnect } from 'wagmi';\nimport { useWalletConnectorEvent } from '@dynamic-labs/sdk-react-core';\nimport { logger } from '@dynamic-labs/wallet-connector-core';\n\nconst SyncDynamicWagmi = ({ children, connector, wallet, }) => {\n    const { state: { status: clientStatus }, } = useConfig();\n    const { connect } = useConnect();\n    const { disconnect } = useDisconnect();\n    const lastConnectedWalletId = useRef(undefined);\n    const hasPreviousConnection = Boolean(lastConnectedWalletId.current);\n    const disconnectWagmi = useCallback(() => {\n        logger.logVerboseTroubleshootingMessage('[SyncDynamicWagmi] disconnecting wagmi - previous status: ', {\n            clientStatus,\n            lastConnectedWalletId: lastConnectedWalletId.current,\n        });\n        if (clientStatus === 'disconnected') {\n            return;\n        }\n        disconnect();\n        lastConnectedWalletId.current = undefined;\n    }, [disconnect, clientStatus]);\n    const connectWagmi = useCallback((connector, newId, forceConnect) => {\n        logger.logVerboseTroubleshootingMessage('[SyncDynamicWagmi] connecting wagmi - previous status: ', {\n            clientStatus,\n            connectorKey: connector.key,\n            forceConnect,\n            lastConnectedWalletId: lastConnectedWalletId.current,\n            newId,\n        });\n        if (clientStatus !== 'disconnected' && !forceConnect) {\n            return;\n        }\n        lastConnectedWalletId.current = newId;\n        connect({ connector });\n    }, [connect, clientStatus]);\n    const sync = useCallback(() => __awaiter(void 0, void 0, void 0, function* () {\n        logger.logVerboseTroubleshootingMessage('[SyncDynamicWagmi] sync', {\n            connectorKey: connector === null || connector === void 0 ? void 0 : connector.key,\n            hasPreviousConnection,\n            lastConnectedWalletId: lastConnectedWalletId.current,\n            wallet: wallet === null || wallet === void 0 ? void 0 : wallet.address,\n        });\n        // if there's no connector, disconnect wagmi\n        if (!connector || !(wallet === null || wallet === void 0 ? void 0 : wallet.address)) {\n            disconnectWagmi();\n            return;\n        }\n        const newId = `${connector.id}-${wallet.address}`;\n        // if the connector hasn't changed since the last connection, do nothing\n        if (newId === lastConnectedWalletId.current) {\n            return;\n        }\n        // if has a previous connection, disconnect wagmi\n        if (hasPreviousConnection) {\n            disconnectWagmi();\n        }\n        // and then (re)connect wagmi\n        // force reconnect if has disconnected in the preivous step\n        // in case the clientStatus takes a while to update\n        connectWagmi(connector, newId, hasPreviousConnection);\n    }), [\n        connectWagmi,\n        connector,\n        disconnectWagmi,\n        hasPreviousConnection,\n        wallet === null || wallet === void 0 ? void 0 : wallet.address,\n    ]);\n    // this is for handling the scenario where the user unlocks the wallet,\n    // as well as changes to a linked wallet\n    useWalletConnectorEvent(wallet === null || wallet === void 0 ? void 0 : wallet.connector, 'accountChange', () => {\n        var _a;\n        logger.logVerboseTroubleshootingMessage('[SyncDynamicWagmi] accountChange', {\n            clientStatus,\n            connectorKey: (_a = wallet === null || wallet === void 0 ? void 0 : wallet.connector) === null || _a === void 0 ? void 0 : _a.key,\n            lastConnectedWalletId: lastConnectedWalletId.current,\n        });\n        sync();\n    });\n    useEffect(() => {\n        logger.logVerboseTroubleshootingMessage('[SyncDynamicWagmi] useEffect', {\n            clientStatus,\n        });\n        sync();\n    }, [sync, clientStatus]);\n    // eslint-disable-next-line react/jsx-no-useless-fragment\n    return jsx(Fragment, { children: children });\n};\n\nexport { SyncDynamicWagmi };\n", "'use client'\nimport { useEffect } from 'react';\nimport { useConfig } from 'wagmi';\nimport { Logger } from '@dynamic-labs/logger';\nimport { useDynamicContext } from '@dynamic-labs/sdk-react-core';\n\nconst logger = new Logger('DynamicWagmiConnector');\nconst useChainMismatchLogger = ({ suppress, } = { suppress: false }) => {\n    const config = useConfig();\n    const { networkConfigurations } = useDynamicContext();\n    useEffect(() => {\n        if (!(networkConfigurations === null || networkConfigurations === void 0 ? void 0 : networkConfigurations.evm) || suppress)\n            return;\n        const wagmiChains = config.chains;\n        const wagmiChainIds = wagmiChains.map((chain) => chain.id);\n        const dynamicChains = networkConfigurations.evm;\n        const dynamicChainIds = dynamicChains.map((chain) => chain.chainId);\n        wagmiChains.forEach((chain) => {\n            if (!dynamicChainIds.includes(chain.id)) {\n                const message = `Chain (id: ${chain.id} name: ${chain.name}) is present in the Wagmi config, but is not present in the Dynamic configuration.` +\n                    ' Please make sure to enable the chain in your Dynamic Dashboard, or add it to the evmNetworks prop on DynamicContextProvider.' +\n                    ' For more information, see: https://docs.dynamic.xyz/guides/frameworks/wagmi-v2#chain-configuration';\n                logger.warn(message);\n            }\n        });\n        dynamicChains.forEach((chain) => {\n            if (!wagmiChainIds.includes(Number(chain.chainId))) {\n                const message = `Chain (id: ${chain.chainId} name: ${chain.name}) is present in the Dynamic config, but is not present in the Wagmi configuration.` +\n                    ' Please make sure to add the chain to the chains prop on the Wagmi createConfig function.' +\n                    ' For more information, see: https://docs.dynamic.xyz/guides/frameworks/wagmi-v2#chain-configuration';\n                logger.warn(message);\n            }\n        });\n    }, [config.chains, networkConfigurations, suppress]);\n};\n\nexport { useChainMismatchLogger };\n", "'use client'\nimport { useRef, useCallback } from 'react';\n\n/**\n * This hook is used to generate a unique ID for a given WalletConnector.\n * This is used to ensure the wagmi connector id will change if the wallet connector\n * instance changes between rerenders.\n */\nconst useConnectorId = () => {\n    const lastSeenWalletConnector = useRef(undefined);\n    const lastConnectorKey = useRef(0);\n    /**\n     * This function will generate a unique ID for a given WalletConnector.\n     */\n    return useCallback((walletConnector) => {\n        if (walletConnector !== lastSeenWalletConnector.current) {\n            lastSeenWalletConnector.current = walletConnector;\n            lastConnectorKey.current += 1;\n        }\n        return `dynamic-${walletConnector.key}-${lastConnectorKey.current}`;\n    }, []);\n};\n\nexport { useConnectorId };\n", "'use client'\nimport { assertPackageVersion } from '@dynamic-labs/assert-package-version';\nimport { version } from '../package.js';\nexport { DynamicWagmiConnector } from './lib/DynamicWagmiConnector.js';\n\nassertPackageVersion('@dynamic-labs/wagmi-connector', version);\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA,IAAI,UAAU;;;ACAd,IAAAA,sBAAoB;AACpB,IAAAC,gBAAmC;;;ACcnC,SAAS,UAAU,SAAS,YAAY,GAAG,WAAW;AAClD,WAAS,MAAM,OAAO;AAAE,WAAO,iBAAiB,IAAI,QAAQ,IAAI,EAAE,SAAU,SAAS;AAAE,cAAQ,KAAK;AAAA,IAAG,CAAC;AAAA,EAAG;AAC3G,SAAO,KAAK,MAAM,IAAI,UAAU,SAAU,SAAS,QAAQ;AACvD,aAAS,UAAU,OAAO;AAAE,UAAI;AAAE,aAAK,UAAU,KAAK,KAAK,CAAC;AAAA,MAAG,SAAS,GAAG;AAAE,eAAO,CAAC;AAAA,MAAG;AAAA,IAAE;AAC1F,aAAS,SAAS,OAAO;AAAE,UAAI;AAAE,aAAK,UAAU,OAAO,EAAE,KAAK,CAAC;AAAA,MAAG,SAAS,GAAG;AAAE,eAAO,CAAC;AAAA,MAAG;AAAA,IAAE;AAC7F,aAAS,KAAK,QAAQ;AAAE,aAAO,OAAO,QAAQ,OAAO,KAAK,IAAI,MAAM,OAAO,KAAK,EAAE,KAAK,WAAW,QAAQ;AAAA,IAAG;AAC7G,UAAM,YAAY,UAAU,MAAM,SAAS,cAAc,CAAC,CAAC,GAAG,KAAK,CAAC;AAAA,EACxE,CAAC;AACL;;;AClBA,IAAM,uBAAuB,CAAC,EAAE,aAAa,OAAQ,MAAM,gBAAgB,CAAC,YAAY;AAAA,EACpF,UAAU;AACN,WAAO,UAAU,MAAM,QAAQ,QAAQ,aAAa;AAChD,UAAI,CAAC,OAAO,WAAW;AACnB,cAAM,IAAI,MAAM,gCAAgC;AAAA,MACpD;AACA,aAAO,UAAU,GAAG,iBAAiB,KAAK,qBAAqB,KAAK,IAAI,CAAC;AACzE,aAAO,UAAU,GAAG,eAAe,KAAK,kBAAkB,KAAK,IAAI,CAAC;AACpE,aAAO,UAAU,GAAG,cAAc,KAAK,aAAa,KAAK,IAAI,CAAC;AAC9D,YAAM,WAAW,MAAM,KAAK,YAAY;AACxC,aAAO;AAAA,QACH;AAAA,QACA,SAAS,MAAM,KAAK,WAAW;AAAA,MACnC;AAAA,IACJ,CAAC;AAAA,EACL;AAAA,EACA,aAAa;AACT,WAAO,UAAU,MAAM,QAAQ,QAAQ,aAAa;AAChD,aAAO,UAAU,IAAI,iBAAiB,KAAK,qBAAqB,KAAK,IAAI,CAAC;AAC1E,aAAO,UAAU,IAAI,eAAe,KAAK,kBAAkB,KAAK,IAAI,CAAC;AACrE,aAAO,UAAU,IAAI,cAAc,KAAK,aAAa,KAAK,IAAI,CAAC;AAAA,IACnE,CAAC;AAAA,EACL;AAAA,EACA,cAAc;AACV,WAAO,UAAU,MAAM,QAAQ,QAAQ,aAAa;AAChD,aAAO,CAAC,WAAW,OAAO,OAAO,CAAC;AAAA,IACtC,CAAC;AAAA,EACL;AAAA,EACA,aAAa;AACT,WAAO,UAAU,MAAM,QAAQ,QAAQ,aAAa;AAChD,YAAM,UAAU,MAAM,OAAO,UAAU,WAAW;AAClD,UAAI,CAAC,SAAS;AACV,cAAM,IAAI,MAAM,wBAAwB;AAAA,MAC5C;AACA,aAAO,OAAO,OAAO;AAAA,IACzB,CAAC;AAAA,EACL;AAAA,EACA,UAAU,MAAM;AACZ,WAAO,UAAU,MAAM,QAAQ,QAAQ,aAAa;AAChD,UAAI,IAAI;AACR,YAAM,eAAe,MAAM,OAAO,gBAAgB;AAClD,YAAM,kBAAkB,OAAO,mBAAmB;AAClD,YAAM,SAAS,mBAAmB;AAAA,QAC9B,SAAS,aAAa,aAAa,KAAM,MAAM,KAAK,YAAY,OAAQ,QAAQ,OAAO,SAAS,SAAS,GAAG,CAAC;AAAA,QAC7G,QAAQ,KAAM,aAAa,SACvB,OAAO,OAAO,KAAK,CAAC,UAAU,MAAM,QAAQ,SAAS,QAAQ,SAAS,SAAS,SAAS,KAAK,QAAQ,OAAQ,QAAQ,OAAO,SAAS,KAAK,OAAO,OAAO,CAAC;AAAA,QAC7J,WAAW,OAAO,cAAc,eAAe;AAAA,MACnD,CAAC;AACD,aAAO;AAAA,IACX,CAAC;AAAA,EACL;AAAA,EACA,cAAc;AACV,WAAO,UAAU,MAAM,QAAQ,QAAQ,aAAa;AAChD,aAAO,OAAO,gBAAgB;AAAA,IAClC,CAAC;AAAA,EACL;AAAA,EACA,qBAAqB,EAAE,SAAS,GAAG;AAC/B,SAAK,kBAAkB,QAAQ;AAAA,EACnC;AAAA,EACA,kBAAkB,EAAE,MAAM,GAAG;AACzB,SAAK,eAAe,KAAK;AAAA,EAC7B;AAAA,EACA,IAAI;AAAA,EACJ,eAAe;AACX,WAAO,UAAU,MAAM,QAAQ,QAAQ,aAAa;AAChD,UAAI,IAAI;AACR,YAAM,YAAY,KAAM,OAAQ,KAAK,OAAO,eAAe,QAAQ,OAAO,SAAS,SAAS,GAAG,qBAAqB,OAAS,QAAQ,OAAO,SAAS,KAAK,CAAC;AAC3J,aAAO,SAAS,SAAS,OAAO,OAAO;AAAA,IAC3C,CAAC;AAAA,EACL;AAAA,EACA,MAAM;AAAA,EACN,kBAAkB,GAAG;AAAA,EAIrB;AAAA,EACA,eAAe,SAAS;AACpB,WAAO,QAAQ,KAAK,UAAU;AAAA,MAC1B,SAAS,OAAO,OAAO;AAAA,IAC3B,CAAC;AAAA,EACL;AAAA,EACA,eAAe;AAAA,EAAE;AAAA,EACjB,YAAY,IAAI;AACZ,WAAO,UAAU,MAAM,WAAW,QAAQ,WAAW,EAAE,QAAQ,GAAG;AAC9D,YAAM,QAAQ,OAAO,OAAO,KAAK,CAAC,MAAM,EAAE,OAAO,OAAO;AACxD,UAAI,CAAC,OAAO;AACR,cAAM,IAAI,MAAM,SAAS,OAAO,mBAAmB;AAAA,MACvD;AACA,YAAM,OAAO,cAAc,OAAO;AAClC,aAAO;AAAA,IACX,CAAC;AAAA,EACL;AAAA,EACA,MAAM;AACV,EAAE;;;ACjGF,yBAA8B;AAC9B,mBAA+C;AAK/C,IAAM,mBAAmB,CAAC,EAAE,UAAU,WAAW,OAAQ,MAAM;AAC3D,QAAM,EAAE,OAAO,EAAE,QAAQ,aAAa,EAAG,IAAI,UAAU;AACvD,QAAM,EAAE,QAAQ,IAAI,WAAW;AAC/B,QAAM,EAAE,WAAW,IAAI,cAAc;AACrC,QAAM,4BAAwB,qBAAO,MAAS;AAC9C,QAAM,wBAAwB,QAAQ,sBAAsB,OAAO;AACnE,QAAM,sBAAkB,0BAAY,MAAM;AACtC,WAAO,iCAAiC,8DAA8D;AAAA,MAClG;AAAA,MACA,uBAAuB,sBAAsB;AAAA,IACjD,CAAC;AACD,QAAI,iBAAiB,gBAAgB;AACjC;AAAA,IACJ;AACA,eAAW;AACX,0BAAsB,UAAU;AAAA,EACpC,GAAG,CAAC,YAAY,YAAY,CAAC;AAC7B,QAAM,mBAAe,0BAAY,CAACC,YAAW,OAAO,iBAAiB;AACjE,WAAO,iCAAiC,2DAA2D;AAAA,MAC/F;AAAA,MACA,cAAcA,WAAU;AAAA,MACxB;AAAA,MACA,uBAAuB,sBAAsB;AAAA,MAC7C;AAAA,IACJ,CAAC;AACD,QAAI,iBAAiB,kBAAkB,CAAC,cAAc;AAClD;AAAA,IACJ;AACA,0BAAsB,UAAU;AAChC,YAAQ,EAAE,WAAAA,WAAU,CAAC;AAAA,EACzB,GAAG,CAAC,SAAS,YAAY,CAAC;AAC1B,QAAM,WAAO,0BAAY,MAAM,UAAU,QAAQ,QAAQ,QAAQ,aAAa;AAC1E,WAAO,iCAAiC,2BAA2B;AAAA,MAC/D,cAAc,cAAc,QAAQ,cAAc,SAAS,SAAS,UAAU;AAAA,MAC9E;AAAA,MACA,uBAAuB,sBAAsB;AAAA,MAC7C,QAAQ,WAAW,QAAQ,WAAW,SAAS,SAAS,OAAO;AAAA,IACnE,CAAC;AAED,QAAI,CAAC,aAAa,EAAE,WAAW,QAAQ,WAAW,SAAS,SAAS,OAAO,UAAU;AACjF,sBAAgB;AAChB;AAAA,IACJ;AACA,UAAM,QAAQ,GAAG,UAAU,EAAE,IAAI,OAAO,OAAO;AAE/C,QAAI,UAAU,sBAAsB,SAAS;AACzC;AAAA,IACJ;AAEA,QAAI,uBAAuB;AACvB,sBAAgB;AAAA,IACpB;AAIA,iBAAa,WAAW,OAAO,qBAAqB;AAAA,EACxD,CAAC,GAAG;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA,WAAW,QAAQ,WAAW,SAAS,SAAS,OAAO;AAAA,EAC3D,CAAC;AAGD,0BAAwB,WAAW,QAAQ,WAAW,SAAS,SAAS,OAAO,WAAW,iBAAiB,MAAM;AAC7G,QAAI;AACJ,WAAO,iCAAiC,oCAAoC;AAAA,MACxE;AAAA,MACA,eAAe,KAAK,WAAW,QAAQ,WAAW,SAAS,SAAS,OAAO,eAAe,QAAQ,OAAO,SAAS,SAAS,GAAG;AAAA,MAC9H,uBAAuB,sBAAsB;AAAA,IACjD,CAAC;AACD,SAAK;AAAA,EACT,CAAC;AACD,8BAAU,MAAM;AACZ,WAAO,iCAAiC,gCAAgC;AAAA,MACpE;AAAA,IACJ,CAAC;AACD,SAAK;AAAA,EACT,GAAG,CAAC,MAAM,YAAY,CAAC;AAEvB,aAAO,wBAAI,6BAAU,EAAE,SAAmB,CAAC;AAC/C;;;ACzFA,IAAAC,gBAA0B;AAK1B,IAAMC,UAAS,IAAI,OAAO,uBAAuB;AACjD,IAAM,yBAAyB,CAAC,EAAE,SAAU,IAAI,EAAE,UAAU,MAAM,MAAM;AACpE,QAAM,SAAS,UAAU;AACzB,QAAM,EAAE,sBAAsB,IAAI,kBAAkB;AACpD,+BAAU,MAAM;AACZ,QAAI,EAAE,0BAA0B,QAAQ,0BAA0B,SAAS,SAAS,sBAAsB,QAAQ;AAC9G;AACJ,UAAM,cAAc,OAAO;AAC3B,UAAM,gBAAgB,YAAY,IAAI,CAAC,UAAU,MAAM,EAAE;AACzD,UAAM,gBAAgB,sBAAsB;AAC5C,UAAM,kBAAkB,cAAc,IAAI,CAAC,UAAU,MAAM,OAAO;AAClE,gBAAY,QAAQ,CAAC,UAAU;AAC3B,UAAI,CAAC,gBAAgB,SAAS,MAAM,EAAE,GAAG;AACrC,cAAM,UAAU,cAAc,MAAM,EAAE,UAAU,MAAM,IAAI;AAG1D,QAAAA,QAAO,KAAK,OAAO;AAAA,MACvB;AAAA,IACJ,CAAC;AACD,kBAAc,QAAQ,CAAC,UAAU;AAC7B,UAAI,CAAC,cAAc,SAAS,OAAO,MAAM,OAAO,CAAC,GAAG;AAChD,cAAM,UAAU,cAAc,MAAM,OAAO,UAAU,MAAM,IAAI;AAG/D,QAAAA,QAAO,KAAK,OAAO;AAAA,MACvB;AAAA,IACJ,CAAC;AAAA,EACL,GAAG,CAAC,OAAO,QAAQ,uBAAuB,QAAQ,CAAC;AACvD;;;ACjCA,IAAAC,gBAAoC;AAOpC,IAAM,iBAAiB,MAAM;AACzB,QAAM,8BAA0B,sBAAO,MAAS;AAChD,QAAM,uBAAmB,sBAAO,CAAC;AAIjC,aAAO,2BAAY,CAAC,oBAAoB;AACpC,QAAI,oBAAoB,wBAAwB,SAAS;AACrD,8BAAwB,UAAU;AAClC,uBAAiB,WAAW;AAAA,IAChC;AACA,WAAO,WAAW,gBAAgB,GAAG,IAAI,iBAAiB,OAAO;AAAA,EACrE,GAAG,CAAC,CAAC;AACT;;;ALTA,IAAM,wBAAwB,CAAC,EAAE,6BAA6B,OAAO,SAAU,UAAO,yBAAI,sBAAsB,EAAE,cAAU,yBAAI,4BAA4B,EAAE,4BAAwD,SAAmB,CAAC,EAAE,CAAC;AAC7O,IAAM,eAAe,CAAC,WAAW;AAC7B,MAAI,CAAC,UAAU,CAAC,iBAAiB,MAAM,GAAG;AACtC,WAAO;AAAA,EACX;AACA,SAAO;AACX;AACA,IAAM,6BAA6B,CAAC,EAAE,6BAA6B,OAAO,SAAS,MAAM;AACrF,QAAM,SAAS,UAAU;AACzB,QAAM,EAAE,cAAc,IAAI,kBAAkB;AAC5C,yBAAuB,EAAE,UAAU,2BAA2B,CAAC;AAC/D,QAAM,YAAY,aAAa,aAAa;AAC5C,QAAM,iBAAiB,eAAe;AACtC,QAAM,gBAAY,uBAAQ,MAAM;AAC5B,QAAI,CAAC,WAAW;AACZ;AAAA,IACJ;AACA,UAAM,cAAc,eAAe,UAAU,SAAS;AACtD,WAAO,OAAO,UAAU,WAAW,MAAM,qBAAqB;AAAA,MAC1D;AAAA,MACA,QAAQ;AAAA,IACZ,CAAC,CAAC;AAAA,EACN,GAAG,CAAC,OAAO,UAAU,YAAY,gBAAgB,SAAS,CAAC;AAC3D,SAAO,iCAAiC,sDAAsD;AAAA,IAC1F;AAAA,IACA;AAAA,IACA;AAAA,EACJ,CAAC;AAQD,+BAAU,MAAM;AACZ,WAAO,UAAU,WAAW,SAAS,YAAY,CAAC,SAAS,IAAI,CAAC,CAAC;AAAA,EACrE,GAAG,CAAC,OAAO,UAAU,YAAY,SAAS,CAAC;AAC3C,aAAQ,yBAAI,kBAAkB,EAAE,WAAsB,QAAQ,WAAW,cAAU,yBAAI,sBAAsB,EAAE,SAAmB,CAAC,EAAE,CAAC;AAC1I;;;AM9CA,qBAAqB,iCAAiC,OAAO;",
  "names": ["import_jsx_runtime", "import_react", "connector", "import_react", "logger", "import_react"]
}
