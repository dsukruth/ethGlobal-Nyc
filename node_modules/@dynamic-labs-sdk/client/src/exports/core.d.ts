export { getCore } from '../client/core/getCore';
export type { DynamicCore, DynamicCoreState } from '../client/core/types';
export { getDefaultClient } from '../client/defaultClient';
export { APIError } from '../errors/APIError';
export { CannotTrackError } from '../errors/CannotTrackError';
export { ClientNotFoundError } from '../errors/ClientNotFoundError';
export { ClientsDoNotMatchError } from '../errors/ClientsDoNotMatchError';
export { InvalidStorageSet } from '../errors/InvalidStorageSet';
export { MethodNotImplementedError } from '../errors/MethodNotImplementedError';
export { MultipleClientsFoundError } from '../errors/MultipleClientsFoundError';
export { ValueMustBeDefinedError } from '../errors/ValueMustBeDefinedError';
export { createApiClient } from '../modules/apiClient';
export { emitEvent } from '../modules/events';
export { hasExtension } from '../modules/extension/hasExtension';
export { registerExtension } from '../modules/extension/registerExtension';
export type { BaseNetworkProvider } from '../modules/wallets/networks/networkProvider/types';
export { getNetworkProviderBuilderRegistry, type NetworkProviderBuilder, type NetworkProviderBuilderRegistry, } from '../modules/wallets/networks/networkProviderBuilderRegistry';
export { formatSignInMessage } from '../modules/wallets/utils/formatSignInMessage';
export { formatWalletProviderGroupKey } from '../modules/wallets/utils/formatWalletProviderGroupKey';
export { formatWalletProviderKey } from '../modules/wallets/utils/formatWalletProviderKey';
export { getWalletProviderFromWalletAccount } from '../modules/wallets/utils/getWalletProviderFromWalletAccount';
export type { WalletProvider } from '../modules/wallets/walletProvider';
export { getWalletProviderRegistry, WalletProviderPriority, } from '../modules/wallets/walletProviderRegistry';
export type { PasskeyService } from '../services/passkey';
export { assertDefined } from '../utils/assertDefined';
export { bufferToBase64 } from '../utils/bufferToBase64';
export { subscribeWithSelector } from '../utils/observable/subscribeWithSelector';
//# sourceMappingURL=core.d.ts.map