import type { DynamicClient } from '../../client/types';
import type { DynamicEvents, EmitEventParams, OffEventParams, OnEventParams, OnceEventParams } from './types';
/**
 * Listen to an event from the client.
 *
 * @returns A function that can be called to remove the listener.
 */
export declare const onEvent: <E extends keyof DynamicEvents>({ event, listener }: OnEventParams<E>, client?: DynamicClient) => () => void;
/**
 * Remove a listener from an event.
 */
export declare const offEvent: <E extends keyof DynamicEvents>({ event, listener }: OffEventParams<E>, client?: DynamicClient) => void;
/**
 * Listen to an event that will only fire once.
 *
 * @returns A function that can be called to remove the listener.
 */
export declare const onceEvent: <E extends keyof DynamicEvents>({ event, listener }: OnceEventParams<E>, client?: DynamicClient) => () => void;
/**
 * Emit an event.
 */
export declare const emitEvent: <E extends keyof DynamicEvents>({ event, args }: EmitEventParams<E>, client: DynamicClient) => void;
//# sourceMappingURL=events.d.ts.map