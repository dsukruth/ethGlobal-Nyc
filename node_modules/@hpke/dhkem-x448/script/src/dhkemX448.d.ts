import type { DhkemPrimitives, KdfInterface } from "@hpke/common";
import { Dhkem, KemId } from "@hpke/common";
export declare class X448 implements DhkemPrimitives {
    private _hkdf;
    private _nPk;
    private _nSk;
    constructor(hkdf: KdfInterface);
    serializePublicKey(key: CryptoKey): Promise<ArrayBuffer>;
    deserializePublicKey(key: ArrayBuffer): Promise<CryptoKey>;
    serializePrivateKey(key: CryptoKey): Promise<ArrayBuffer>;
    deserializePrivateKey(key: ArrayBuffer): Promise<CryptoKey>;
    importKey(format: "raw" | "jwk", key: ArrayBuffer | JsonWebKey, isPublic: boolean): Promise<CryptoKey>;
    generateKeyPair(): Promise<CryptoKeyPair>;
    deriveKeyPair(ikm: ArrayBuffer): Promise<CryptoKeyPair>;
    derivePublicKey(key: CryptoKey): Promise<CryptoKey>;
    dh(sk: CryptoKey, pk: CryptoKey): Promise<ArrayBuffer>;
    private _serializePublicKey;
    private _serializePrivateKey;
    private _importRawKey;
    private _importJWK;
    private _derivePublicKey;
    private _dh;
}
/**
 * The DHKEM(X448, HKDF-SHA512) for HPKE KEM implementing {@link KemInterface}.
 *
 * This class is implemented using
 * {@link https://github.com/paulmillr/noble-curves | @noble/curves}.
 *
 * The instance of this class can be specified to the
 * {@link https://jsr.io/@hpke/core/doc/~/CipherSuiteParams | CipherSuiteParams} as follows:
 *
 * @example Use with `@hpke/core`:
 *
 * ```ts
 * import {
 *   Aes256Gcm,
 *   CipherSuite,
 *   HkdfSha512,
 * } from "@hpke/core";
 * import { DhkemX448HkdfSha512 } from "@hpke/dhkem-x448";
 *
 * const suite = new CipherSuite({
 *   kem: new DhkemX448HkdfSha512(),
 *   kdf: new HkdfSha512(),
 *   aead: new Aes256Gcm(),
 * });
 * ```
 */
export declare class DhkemX448HkdfSha512 extends Dhkem {
    /** KemId.DhkemX448HkdfSha512 (0x0021) */
    id: KemId;
    /** 64 */
    secretSize: number;
    /** 56 */
    encSize: number;
    /** 56 */
    publicKeySize: number;
    /** 56 */
    privateKeySize: number;
    constructor();
}
//# sourceMappingURL=dhkemX448.d.ts.map