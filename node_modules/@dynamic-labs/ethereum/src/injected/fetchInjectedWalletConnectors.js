'use client'
import { logger, walletConnectorEvents } from '@dynamic-labs/wallet-connector-core';
import { Eip6963ProviderSingleton, sanitizeName, listenToEip6963Events } from '@dynamic-labs/utils';
import { getConnectorConstructorForEip6963Wallet } from '../utils/getConnectorConstructorForEip6963Wallet/getConnectorConstructorForEip6963Wallet.js';
import { getConnectorConstructorInjectedWallet } from '../utils/getConnectorConstructorInjectedWallet/getConnectorConstructorInjectedWallet.js';
import { PhantomEvm } from './PhantomEvm.js';
import { ExodusEvm } from './ExodusEvm.js';

const injectedWalletOverrides = [
    PhantomEvm,
    ExodusEvm,
];
let removeEip6963EventsListener;
// should add eip6963 connector only if not in wallet-book, to avoid adding duplicate connectors
const shouldAddEip6963Connector = (eip6963ProviderInfo, walletBook, walletsWithCustomConnectors) => {
    var _a;
    const { rdns, name } = eip6963ProviderInfo;
    const chain = 'evm';
    const connectorKey = `${sanitizeName(name)}${chain}`;
    logger.logVerboseTroubleshootingMessage('[ETH shouldAddEip6963Connector]', rdns, name, chain, connectorKey);
    const existingWallet = Object.entries((_a = walletBook === null || walletBook === void 0 ? void 0 : walletBook.wallets) !== null && _a !== void 0 ? _a : {}).find(([key, wallet]) => {
        var _a, _b;
        return ((_a = wallet.eip6963Config) === null || _a === void 0 ? void 0 : _a.rdns) === rdns ||
            key === connectorKey ||
            walletsWithCustomConnectors.includes(connectorKey) ||
            (wallet.name === name && ((_b = wallet.injectedConfig) === null || _b === void 0 ? void 0 : _b[0].chain) === chain);
    });
    logger.logVerboseTroubleshootingMessage('[ETH shouldAddEip6963Connector]', existingWallet);
    return !existingWallet;
};
const addEip6963Listener = (walletBook, walletsWithCustomConnectors) => {
    removeEip6963EventsListener === null || removeEip6963EventsListener === void 0 ? void 0 : removeEip6963EventsListener();
    removeEip6963EventsListener = listenToEip6963Events((event) => {
        if (!shouldAddEip6963Connector(event.detail.info, walletBook, walletsWithCustomConnectors)) {
            return;
        }
        logger.logVerboseTroubleshootingMessage('[ETH fetchInjectedWalletConnectors] listenToEip6963Events', event.detail);
        walletConnectorEvents.emit('providerInjected', {
            injectedConnectorConstructor: getConnectorConstructorForEip6963Wallet(event.detail),
        });
    });
};
const fetchInjectedWalletConnector = ({ walletBook, walletsWithCustomConnectors, }) => {
    var _a;
    addEip6963Listener(walletBook, walletsWithCustomConnectors);
    const walletBookConnectors = Object.entries((_a = walletBook === null || walletBook === void 0 ? void 0 : walletBook.wallets) !== null && _a !== void 0 ? _a : {})
        .filter(([key, wallet]) => {
        var _a;
        return ((_a = wallet.injectedConfig) === null || _a === void 0 ? void 0 : _a.find((config) => config.chain === 'evm')) &&
            !walletsWithCustomConnectors.includes(key);
    })
        .map(([key, wallet]) => getConnectorConstructorInjectedWallet(key, wallet));
    const { providers } = Eip6963ProviderSingleton.get();
    const eip6963Connectors = providers
        .filter((provider) => shouldAddEip6963Connector(provider.info, walletBook, walletsWithCustomConnectors))
        .map((provider) => getConnectorConstructorForEip6963Wallet(provider));
    logger.logVerboseTroubleshootingMessage('[ETH fetchInjectedWalletConnectors] eip6963Connectors', eip6963Connectors);
    return [...walletBookConnectors, ...eip6963Connectors];
};

export { fetchInjectedWalletConnector, injectedWalletOverrides };
