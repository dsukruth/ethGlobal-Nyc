'use client'
import { __awaiter } from '../../_virtual/_tslib.js';
import { EthereumWalletConnector } from '@dynamic-labs/ethereum-core';
import { isMobile, template, PlatformService } from '@dynamic-labs/utils';
import { EthProviderHelper } from '../ethProviderHelper.js';
import { logger } from '../utils/logger.js';
import { WalletConnectConnector } from '../walletConnect/WalletConnectConnector/WalletConnectConnector.js';

class InjectedWalletBase extends EthereumWalletConnector {
    constructor() {
        super(...arguments);
        this.walletConnectorFallback = false;
    }
    get ethProviderHelper() {
        if (!this._ethProviderHelper) {
            this._ethProviderHelper = new EthProviderHelper(this);
        }
        return this._ethProviderHelper;
    }
    getMobileOrInstalledWallet() {
        // can use WC if the wallet has WC setting in wallet book and projectId is set
        const canUseWalletConnect = this.walletConnectorFallback && this.constructorProps.projectId;
        logger.logVerboseTroubleshootingMessage('[InjectedWalletBase] getMobileOrInstalledWallet', {
            canUseWalletConnect,
            isInstalledOnBrowser: this.isInstalledOnBrowser(),
            projectId: this.constructorProps.projectId,
            walletConnectorFallback: this.walletConnectorFallback,
        });
        // if the wallet is installed on the browser or WC is not available, return the injected connector
        if (this.isInstalledOnBrowser() || !canUseWalletConnect) {
            return this;
        }
        // if the wallet is not installed on the browser and WC is available, return the WC connector
        return new WalletConnectConnector(Object.assign(Object.assign({}, this.constructorProps), { walletName: this.name }));
    }
    findProvider() {
        var _a;
        return (_a = this.ethProviderHelper) === null || _a === void 0 ? void 0 : _a.getInstalledProvider();
    }
    setupEventListeners() {
        const provider = this.getWalletClient();
        if (!provider)
            return;
        if (!this.ethProviderHelper)
            return;
        const { tearDownEventListeners } = this.ethProviderHelper._setupEventListeners(this);
        this.teardownEventListeners = tearDownEventListeners;
    }
    getWalletClient(chainId) {
        var _a;
        return (_a = this.ethProviderHelper) === null || _a === void 0 ? void 0 : _a.findWalletClient(chainId);
    }
    isInstalledOnBrowser() {
        var _a;
        return ((_a = this.ethProviderHelper) === null || _a === void 0 ? void 0 : _a.findProvider()) !== undefined;
    }
    getAddress() {
        return __awaiter(this, void 0, void 0, function* () {
            var _a, _b;
            if (this.isInstalledOnBrowser()) {
                return (_a = this.ethProviderHelper) === null || _a === void 0 ? void 0 : _a.getAddress();
            }
            if (isMobile() &&
                ((_b = this.metadata) === null || _b === void 0 ? void 0 : _b.inAppBrowserUrl) &&
                this.mobileExperience === 'in-app-browser') {
                const inAppBrowserCompiledTemplate = template(this.metadata.inAppBrowserUrl);
                const { href } = PlatformService.getUrl();
                const deepLink = inAppBrowserCompiledTemplate({
                    encodedDappURI: encodeURIComponent(href),
                });
                PlatformService.openURL(deepLink);
            }
            return undefined;
        });
    }
    connect() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.getAddress();
        });
    }
    signMessage(messageToSign) {
        return __awaiter(this, void 0, void 0, function* () {
            var _a;
            return (_a = this.ethProviderHelper) === null || _a === void 0 ? void 0 : _a.signMessage(messageToSign);
        });
    }
    proveOwnership(address, messageToSign) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.validateActiveWallet(address);
            return this.signMessage(messageToSign);
        });
    }
    endSession() {
        return __awaiter(this, void 0, void 0, function* () {
            var _a;
            const provider = (_a = this.ethProviderHelper) === null || _a === void 0 ? void 0 : _a.findProvider();
            if (!provider)
                return;
            void provider
                .request({
                method: 'wallet_revokePermissions',
                params: [
                    {
                        eth_accounts: {},
                    },
                ],
            })
                .catch((err) => {
                logger.error('[InjectedWalletBase] endSession - Error revoking permissions', err);
            });
        });
    }
    providerSwitchNetwork(_a) {
        const _super = Object.create(null, {
            providerSwitchNetwork: { get: () => super.providerSwitchNetwork }
        });
        return __awaiter(this, arguments, void 0, function* ({ network, provider, }) {
            return _super.providerSwitchNetwork.call(this, { network, provider });
        });
    }
}

export { InjectedWalletBase };
