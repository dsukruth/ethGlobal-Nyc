'use client'
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

require('./polyfills.cjs');
var assertPackageVersion = require('@dynamic-labs/assert-package-version');
var _package = require('../package.cjs');
var ethereumCore = require('@dynamic-labs/ethereum-core');
var PhantomEvm = require('./injected/PhantomEvm.cjs');
var ExodusEvm = require('./injected/ExodusEvm.cjs');
var FallbackEvmConnector = require('./injected/FallbackEvmConnector.cjs');
var fetchInjectedWalletConnectors = require('./injected/fetchInjectedWalletConnectors.cjs');
var InjectedWalletBase = require('./injected/InjectedWalletBase.cjs');
var ethProviderHelper = require('./ethProviderHelper.cjs');
var constants = require('./constants.cjs');
var createInjectedConnector = require('./utils/createInjectedConnector/createInjectedConnector.cjs');
var EthereumWalletConnectors = require('./EthereumWalletConnectors.cjs');
var EthereumWalletConnectorsWithConfig = require('./EthereumWalletConnectorsWithConfig.cjs');

assertPackageVersion.assertPackageVersion('@dynamic-labs/ethereum', _package.version);

Object.defineProperty(exports, 'EthereumWalletConnector', {
  enumerable: true,
  get: function () { return ethereumCore.EthereumWalletConnector; }
});
Object.defineProperty(exports, 'createConnector', {
  enumerable: true,
  get: function () { return ethereumCore.createConnector; }
});
Object.defineProperty(exports, 'isEthereumWallet', {
  enumerable: true,
  get: function () { return ethereumCore.isEthereumWallet; }
});
exports.PhantomEvm = PhantomEvm.PhantomEvm;
exports.ExodusEvm = ExodusEvm.ExodusEvm;
exports.FallbackEvmConnector = FallbackEvmConnector.FallbackEvmConnector;
exports.fetchInjectedWalletConnector = fetchInjectedWalletConnectors.fetchInjectedWalletConnector;
exports.injectedWalletOverrides = fetchInjectedWalletConnectors.injectedWalletOverrides;
exports.EthereumInjectedConnector = InjectedWalletBase.InjectedWalletBase;
exports.EthProviderHelper = ethProviderHelper.EthProviderHelper;
exports.INFURA_ID = constants.INFURA_ID;
exports.createInjectedConnector = createInjectedConnector.createInjectedConnector;
exports.EthereumWalletConnectors = EthereumWalletConnectors.EthereumWalletConnectors;
exports.EthereumWalletConnectorsWithConfig = EthereumWalletConnectorsWithConfig.EthereumWalletConnectorsWithConfig;
