'use client'
import { __awaiter } from '../../../_virtual/_tslib.js';
import '@dynamic-labs/utils';
import { InjectedWalletBase } from '../../injected/InjectedWalletBase.js';
import '@dynamic-labs/wallet-connector-core';

const createInjectedConnector = (customConnectorFn) => (props) => {
    const delegate = customConnectorFn(props);
    return [
        class extends InjectedWalletBase {
            constructor(props) {
                super(Object.assign(Object.assign({}, props), { metadata: delegate.metadata }));
                this.name = delegate.metadata.name;
            }
            init() {
                return __awaiter(this, void 0, void 0, function* () {
                    return delegate.init();
                });
            }
            findProvider() {
                return delegate.findProvider();
            }
            signMessage(messageToSign) {
                return __awaiter(this, void 0, void 0, function* () {
                    return delegate.signMessage(messageToSign);
                });
            }
            connect() {
                const _super = Object.create(null, {
                    connect: { get: () => super.connect }
                });
                return __awaiter(this, void 0, void 0, function* () {
                    if (delegate.connect) {
                        return delegate.connect();
                    }
                    return _super.connect.call(this);
                });
            }
            endSession() {
                const _super = Object.create(null, {
                    endSession: { get: () => super.endSession }
                });
                return __awaiter(this, void 0, void 0, function* () {
                    if (delegate.disconnect) {
                        yield delegate.disconnect();
                    }
                    return _super.endSession.call(this);
                });
            }
            getAddress() {
                const _super = Object.create(null, {
                    getAddress: { get: () => super.getAddress }
                });
                return __awaiter(this, void 0, void 0, function* () {
                    if (delegate.getAddress) {
                        return delegate.getAddress();
                    }
                    return _super.getAddress.call(this);
                });
            }
            getConnectedAccounts() {
                const _super = Object.create(null, {
                    getConnectedAccounts: { get: () => super.getConnectedAccounts }
                });
                return __awaiter(this, void 0, void 0, function* () {
                    if (delegate.getConnectedAccounts) {
                        return delegate.getConnectedAccounts();
                    }
                    return _super.getConnectedAccounts.call(this);
                });
            }
            filter() {
                if (delegate.filter) {
                    return delegate.filter();
                }
                return super.filter();
            }
            supportsNetworkSwitching() {
                if (delegate.supportsNetworkSwitching) {
                    return delegate.supportsNetworkSwitching();
                }
                return super.supportsNetworkSwitching();
            }
        },
    ];
};

export { createInjectedConnector };
