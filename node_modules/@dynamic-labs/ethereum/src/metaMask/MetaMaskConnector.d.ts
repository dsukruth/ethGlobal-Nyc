import { MetaMaskSDK } from '@metamask/sdk';
import { Account, Transport, Chain as ViemChain, WalletClient } from 'viem';
import { EthereumWalletConnectorOpts } from '@dynamic-labs/ethereum-core';
import { GetAddressOpts, IWalletConnectConnector } from '@dynamic-labs/wallet-connector-core';
import { InjectedWalletBase } from '../injected/InjectedWalletBase';
export type MetaMaskConnectorProps = EthereumWalletConnectorOpts & {
    appName: string;
    appLogoUrl: string;
};
export declare const eventTimeline: import("@dynamic-labs/utils").EventTimeline<"connect" | "disconnect">;
export declare const setMetaMaskDisplayUri: (displayUri: string) => void;
export declare const clearMetaMaskSdk: () => void;
export declare class MetaMaskConnector extends InjectedWalletBase implements IWalletConnectConnector {
    name: string;
    overrideKey: string;
    canConnectViaQrCode: boolean;
    private appName;
    private appLogoUrl;
    private isInAppBrowser;
    constructor(props: MetaMaskConnectorProps);
    isInstalledOnBrowser(): boolean;
    getSupportedNetworks(): Promise<string[]>;
    get metaMaskSDK(): MetaMaskSDK;
    set metaMaskSDK(metaMaskSDK: MetaMaskSDK);
    createMetaMaskSDK(): void;
    endSession(): Promise<void>;
    getAddress(opts?: GetAddressOpts): Promise<string | undefined>;
    private getConnectedAccountsSafely;
    getConnectedAccounts(): Promise<string[]>;
    signMessage(messageToSign: string): Promise<string | undefined>;
    chooseAccountsToConnect(): Promise<never[]>;
    getWalletClient(chainId?: string): WalletClient<Transport, ViemChain, Account> | undefined;
    get rdns(): string;
    setupEventListeners(): Promise<void>;
    /**
     * This override is necessary to wait for the MetaMask SDK to initialize
     * before calling the super method. Otherwise, the super method may fail
     * to fetch the provider
     */
    getNetwork(): Promise<number | undefined>;
    private getProvider;
    private evmNetworkByChainId;
    private getWalletClientForAddress;
    private toInt;
    private getCurrentChainId;
    /**
     * Checks if the current environment is the MetaMask in-app browser
     * by checking if the MetaMask provider is installed in the window object
     * on a mobile device
     */
    private getIsInAppBrowser;
    private shouldDeepLinkToMetaMaskInAppBrowser;
    getConnectionUri(): string | undefined;
    retryDeeplinkConnection(): void;
}
