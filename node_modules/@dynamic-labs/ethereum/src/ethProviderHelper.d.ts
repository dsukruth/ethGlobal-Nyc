import { Account, Hex, Transport, Chain as ViemChain, WalletClient } from 'viem';
import { ProviderCondition, WalletConnector } from '@dynamic-labs/wallet-connector-core';
import { InjectedWalletBase } from './injected/InjectedWalletBase';
import { ExtensionLocator, IEthereum } from './types';
export declare class EthProviderHelper {
    private walletBookWallet;
    private connector;
    constructor(connector: InjectedWalletBase);
    getInstalledProvider(): IEthereum | undefined;
    getInjectedProvider(): IEthereum | undefined;
    getEip6963Provider(): IEthereum | undefined;
    getInjectedConfig(): {
        chain: string;
        extensionLocators: {
            flag: string;
            value: boolean;
        }[];
        providerInterface?: string | undefined;
        walletStandard?: {
            features: string[];
            name: string;
            providerId?: string | undefined;
        } | undefined;
        walletStandardLocators?: {
            locator: string;
            name: string;
        }[] | undefined;
        windowLocations?: string[] | undefined;
    } | undefined;
    installedProviders(): IEthereum[];
    installedProviderLookup(extensionLocators: Array<ProviderCondition<ExtensionLocator>>): IEthereum | undefined;
    eip6963ProviderLookup(rdns: string): IEthereum | undefined;
    isInstalledHelper(): boolean;
    findProvider(): IEthereum | undefined;
    findWalletClient(chainId?: string): WalletClient<Transport, ViemChain, Account> | undefined;
    getAddress(): Promise<Hex | undefined>;
    getAddressWithProvider(client: WalletClient): Promise<Hex | undefined>;
    signMessage(messageToSign: string): Promise<string | undefined>;
    _setupEventListeners(walletConnector: WalletConnector): {
        tearDownEventListeners: () => void;
    };
}
