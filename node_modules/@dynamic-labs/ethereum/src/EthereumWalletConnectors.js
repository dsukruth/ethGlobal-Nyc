'use client'
import { TurnkeyEVMWalletConnectors } from '@dynamic-labs/embedded-wallet-evm';
import { DynamicWaasEVMConnectors } from '@dynamic-labs/waas-evm';
import '../_virtual/_tslib.js';
import '@dynamic-labs/utils';
import '@dynamic-labs/ethereum-core';
import 'viem';
import '@dynamic-labs/wallet-book';
import '@dynamic-labs/wallet-connector-core';
import './utils/logger.js';
import 'viem/accounts';
import './walletConnect/WalletConnectProvider/WalletConnectProvider.js';
import { fetchWalletConnectWallets } from './walletConnect/utils/fetchWalletConnectWallets.js';
import { getWalletConnectConnector } from './walletConnect/utils/getWalletConnectConnector.js';
import { FallbackEvmConnector } from './injected/FallbackEvmConnector.js';
import { injectedWalletOverrides, fetchInjectedWalletConnector } from './injected/fetchInjectedWalletConnectors.js';
import { Coinbase } from './coinbase/coinbase.js';
import { MetaMaskConnector } from './metaMask/MetaMaskConnector.js';

const EthereumWalletConnectors = (props) => {
    const { useMetamaskSdk } = props;
    const walletsWithCustomConnectors = [
        'phantomevm',
        'coinbase',
        'exodusevm',
        'abstract',
        'edenonline',
        'intersend',
    ];
    if (useMetamaskSdk) {
        walletsWithCustomConnectors.push('metamask');
    }
    return [
        ...injectedWalletOverrides,
        ...fetchInjectedWalletConnector(Object.assign(Object.assign({}, props), { walletsWithCustomConnectors })),
        ...fetchWalletConnectWallets(props),
        ...TurnkeyEVMWalletConnectors(props),
        ...DynamicWaasEVMConnectors(),
        ...(useMetamaskSdk ? [MetaMaskConnector] : []),
        Coinbase,
        FallbackEvmConnector,
        getWalletConnectConnector(),
    ];
};

export { EthereumWalletConnectors };
