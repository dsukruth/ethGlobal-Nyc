'use client'
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var embeddedWalletEvm = require('@dynamic-labs/embedded-wallet-evm');
var waasEvm = require('@dynamic-labs/waas-evm');
require('../_virtual/_tslib.cjs');
require('@dynamic-labs/utils');
require('@dynamic-labs/ethereum-core');
require('viem');
require('@dynamic-labs/wallet-book');
require('@dynamic-labs/wallet-connector-core');
require('./utils/logger.cjs');
require('viem/accounts');
require('./walletConnect/WalletConnectProvider/WalletConnectProvider.cjs');
var fetchWalletConnectWallets = require('./walletConnect/utils/fetchWalletConnectWallets.cjs');
var getWalletConnectConnector = require('./walletConnect/utils/getWalletConnectConnector.cjs');
var FallbackEvmConnector = require('./injected/FallbackEvmConnector.cjs');
var fetchInjectedWalletConnectors = require('./injected/fetchInjectedWalletConnectors.cjs');
var coinbase = require('./coinbase/coinbase.cjs');
var MetaMaskConnector = require('./metaMask/MetaMaskConnector.cjs');

const EthereumWalletConnectors = (props) => {
    const { useMetamaskSdk } = props;
    const walletsWithCustomConnectors = [
        'phantomevm',
        'coinbase',
        'exodusevm',
        'abstract',
        'edenonline',
        'intersend',
    ];
    if (useMetamaskSdk) {
        walletsWithCustomConnectors.push('metamask');
    }
    return [
        ...fetchInjectedWalletConnectors.injectedWalletOverrides,
        ...fetchInjectedWalletConnectors.fetchInjectedWalletConnector(Object.assign(Object.assign({}, props), { walletsWithCustomConnectors })),
        ...fetchWalletConnectWallets.fetchWalletConnectWallets(props),
        ...embeddedWalletEvm.TurnkeyEVMWalletConnectors(props),
        ...waasEvm.DynamicWaasEVMConnectors(),
        ...(useMetamaskSdk ? [MetaMaskConnector.MetaMaskConnector] : []),
        coinbase.Coinbase,
        FallbackEvmConnector.FallbackEvmConnector,
        getWalletConnectConnector.getWalletConnectConnector(),
    ];
};

exports.EthereumWalletConnectors = EthereumWalletConnectors;
