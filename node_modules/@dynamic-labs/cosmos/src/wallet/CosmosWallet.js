'use client'
import { __awaiter } from '../../_virtual/_tslib.js';
import { Wallet, logger } from '@dynamic-labs/wallet-connector-core';
import { cloneObjectWithOverrides } from '@dynamic-labs/utils';

class CosmosWallet extends Wallet {
    sendBalance(_a) {
        return __awaiter(this, arguments, void 0, function* ({ amount, toAddress, }) {
            throw new Error('Not implemented');
        });
    }
    getProvider() {
        return __awaiter(this, void 0, void 0, function* () {
            const provider = yield this._connector.getProvider();
            if (!provider) {
                throw new Error('unable to retrieve Cosmos provider');
            }
            try {
                return cloneObjectWithOverrides(provider, {
                    sendEthereumTx: (chainId, tx) => __awaiter(this, void 0, void 0, function* () {
                        yield this.sync();
                        return provider.sendEthereumTx(chainId, tx);
                    }),
                    sendTx: (chainId, tx, mode) => __awaiter(this, void 0, void 0, function* () {
                        yield this.sync();
                        return provider.sendTx(chainId, tx, mode);
                    }),
                    signAmino: (chainId, signer, signerDoc, signerOperations) => __awaiter(this, void 0, void 0, function* () {
                        yield this.sync();
                        return provider.signAmino(chainId, signer, signerDoc, signerOperations);
                    }),
                    signArbitrary: (chainId, signer, data) => __awaiter(this, void 0, void 0, function* () {
                        yield this.sync();
                        return provider.signArbitrary(chainId, signer, data);
                    }),
                    signDirect: (chainId, signer, signDoc, signOptions) => __awaiter(this, void 0, void 0, function* () {
                        yield this.sync();
                        return provider.signDirect(chainId, signer, signDoc, signOptions);
                    }),
                    signDirectAux: (chainId, signer, signDoc, signOptions) => __awaiter(this, void 0, void 0, function* () {
                        yield this.sync();
                        return provider.signDirectAux(chainId, signer, signDoc, signOptions);
                    }),
                    signEthereum: (chainId, signer, data, type) => __awaiter(this, void 0, void 0, function* () {
                        yield this.sync();
                        return provider.signEthereum(chainId, signer, data, type);
                    }),
                    signICNSAdr36: (chainId, contractAddress, owner, username, addressChainIds) => __awaiter(this, void 0, void 0, function* () {
                        yield this.sync();
                        return provider.signICNSAdr36(chainId, contractAddress, owner, username, addressChainIds);
                    }),
                });
            }
            catch (error) {
                logger.warn(`Failed to add logic to auto-sync the wallet. Provider might be out of sync for wallet: ${this._connector.name} (${this.address})`, error);
                return provider;
            }
        });
    }
    getOfflineSigner() {
        return __awaiter(this, void 0, void 0, function* () {
            const offlineSigner = yield this._connector.getOfflineSigner();
            if (!offlineSigner) {
                throw new Error('unable to retrieve Cosmos offline signer');
            }
            try {
                return cloneObjectWithOverrides(offlineSigner, {
                    signAmino: (signerAddress, signerDoc) => __awaiter(this, void 0, void 0, function* () {
                        yield this.sync();
                        return offlineSigner.signAmino(signerAddress, signerDoc);
                    }),
                    signDirect: (signerAddress, signDoc) => __awaiter(this, void 0, void 0, function* () {
                        yield this.sync();
                        return offlineSigner.signDirect(signerAddress, signDoc);
                    }),
                });
            }
            catch (error) {
                logger.warn(`Failed to add logic to auto-sync the wallet. Signer might be out of sync for wallet: ${this._connector.name} (${this.address})`, error);
                return offlineSigner;
            }
        });
    }
}

export { CosmosWallet };
