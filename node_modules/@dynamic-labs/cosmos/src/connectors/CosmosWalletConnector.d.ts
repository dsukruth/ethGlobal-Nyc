import { ChainInfo, Keplr as KeplrWallet, OfflineAminoSigner, OfflineDirectSigner } from '@keplr-wallet/types';
import { CosmosNetwork, GenericNetwork } from '@dynamic-labs/types';
import { WalletBookSchema } from '@dynamic-labs/wallet-book';
import { Chain, WalletConnectorBase, WalletMetadata } from '@dynamic-labs/wallet-connector-core';
import { CosmosWallet } from '../wallet';
import { CosmosConnectorConfig } from '../CosmosWalletConnectorsWithConfig';
import { SwitchNetworkOps } from './KeplrWalletConnector';
export interface IFetchBalanceResponse {
    balances: IFetchBalanceBalance[];
    pagination: IFetchBalancePagination;
}
export interface IFetchBalanceBalance {
    amount: string;
    denom: string;
}
export interface IFetchBalancePagination {
    next_key: any;
    total: string;
}
export type CosmosWalletConnectorOpts = {
    cosmosNetworks: GenericNetwork[];
    walletBook: WalletBookSchema;
    metadata?: WalletMetadata;
    connectionConfig?: CosmosConnectorConfig;
};
type CosmosChainIDMapObject = {
    dynamicChainId: number;
    cosmosNetworkId: string;
    bech32Prefix: string | undefined;
    cosmosNetwork: CosmosNetwork;
    experimental: boolean;
};
export declare const DYNAMIC_COSMOS_NETWORK_ID = "dynamic_cosmos_network_id";
export declare abstract class CosmosWalletConnector extends WalletConnectorBase {
    cosmosNetworks: GenericNetwork[];
    switchNetworkOnlyFromWallet: boolean;
    ChainWallet: typeof CosmosWallet;
    connectedChain: Chain;
    supportedChains: Chain[];
    experimentalChainsInfo: ChainInfo[] | undefined;
    constructor(opts: CosmosWalletConnectorOpts);
    private addExperimentalChains;
    protected abstract getWallet(): KeplrWallet | undefined;
    get evmNetworks(): CosmosNetwork[];
    get chainIdMapping(): CosmosChainIDMapObject[];
    isExperimentalChain(cosmosNetwork: CosmosNetwork): boolean;
    getSelectedChain(): CosmosNetwork | undefined;
    getNetwork(): Promise<number | undefined>;
    getLcdUrl(): string | undefined;
    getDenom(): string | undefined;
    getBalance(address: string): Promise<string | undefined>;
    getConnectedAccounts(): Promise<string[]>;
    endSession(): Promise<void>;
    getDefaultChainId(): string;
    getChainId(): string;
    setChainId(chainId: string | null): void;
    protected getAccount(): Promise<import("@keplr-wallet/types").AccountData | undefined>;
    connect(): Promise<void>;
    getAddress(): Promise<string | undefined>;
    getProvider(): Promise<KeplrWallet | undefined>;
    getOfflineSigner(): Promise<(OfflineAminoSigner & OfflineDirectSigner) | undefined>;
    isInstalledOnBrowser(): boolean;
    _handleAccountChange(): Promise<void>;
    signMessage(messageToSign: string): Promise<string | undefined>;
    getBlockExplorerUrlsForCurrentNetwork(): Promise<string[]>;
    getEnabledNetworks(): GenericNetwork[];
    supportsNetworkSwitching(): boolean;
    validateActiveWallet(expectedAddress: string): Promise<void>;
    switchNetwork({ networkChainId, }: SwitchNetworkOps): Promise<void>;
}
export {};
