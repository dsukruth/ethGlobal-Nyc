'use client'
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _tslib = require('../../_virtual/_tslib.cjs');
var utils = require('@dynamic-labs/utils');
var CosmosWalletConnector = require('./CosmosWalletConnector.cjs');

const isSeiNotEnabledError = (error) => {
    if (!error ||
        !Object.prototype.hasOwnProperty.call(error, 'message') ||
        typeof error.message !== 'string')
        return false;
    return error.message.includes('There is no modular chain info for pacific-1');
};
class KeplrWalletConnector extends CosmosWalletConnector.CosmosWalletConnector {
    constructor() {
        super(...arguments);
        this.name = 'Keplr';
        this.overrideKey = 'keplr';
    }
    supportsNetworkSwitching() {
        return true;
    }
    getWallet() {
        if (typeof window === 'undefined') {
            throw new Error('Keplr is not available');
        }
        return window.keplr;
    }
    connect() {
        const _super = Object.create(null, {
            connect: { get: () => super.connect }
        });
        return _tslib.__awaiter(this, void 0, void 0, function* () {
            var _a;
            try {
                yield _super.connect.call(this);
                if (this.experimentalChainsInfo) {
                    for (const chain of this.experimentalChainsInfo) {
                        yield ((_a = this.getWallet()) === null || _a === void 0 ? void 0 : _a.experimentalSuggestChain(chain));
                    }
                }
            }
            catch (error) {
                if (isSeiNotEnabledError(error)) {
                    /**
                     * If only Sei is enabled, throw the error
                     * to inform the user to enable Sei in Keplr
                     */
                    if (this.cosmosNetworks.length === 1) {
                        throw new utils.SeiNotEnabledInKeplrWalletError();
                    }
                    this.cosmosNetworks = this.cosmosNetworks.filter((network) => network.name !== 'pacific-1');
                    yield _super.connect.call(this);
                }
                else {
                    throw error;
                }
            }
        });
    }
    setupEventListeners() {
        window.addEventListener('keplr_keystorechange', this._handleAccountChange);
    }
    teardownEventListeners() {
        window.removeEventListener('keplr_keystorechange', this._handleAccountChange);
        this.setChainId(null);
    }
}

exports.KeplrWalletConnector = KeplrWalletConnector;
