'use client'
import { logger } from '@dynamic-labs/wallet-connector-core';
import { validatePsbt } from './validator/validatePsbt.js';
import { getSigHashType } from './getSigHashType.js';
import 'bitcoinjs-lib';
import 'sats-connect';

const createPsbtOptions = (psbt, request) => {
    var _a;
    const psbtSignOptions = {
        autoFinalized: false,
    };
    if (request.signature) {
        validatePsbt(psbt, request.allowedSighash, request.signature);
        const toSignInputs = [];
        for (const signature of request.signature) {
            if ((_a = signature.signingIndexes) === null || _a === void 0 ? void 0 : _a.length) {
                for (const index of signature.signingIndexes) {
                    toSignInputs.push({
                        address: signature.address,
                        disableAddressValidation: signature.disableAddressValidation,
                        index,
                        sighashTypes: request.allowedSighash,
                    });
                }
            }
        }
        psbtSignOptions.toSignInputs = toSignInputs;
    }
    return psbtSignOptions;
};
const createSignPsbtOptionsForSatsConnect = (psbtFromBase64, request, isLegacyConnector = false) => {
    var _a, _b, _c;
    if ((_a = request.signature) === null || _a === void 0 ? void 0 : _a.length) {
        validatePsbt(psbtFromBase64, request.allowedSighash, request.signature);
    }
    logger.logVerboseTroubleshootingMessage('createSignPsbtOptionsForSatsConnect', { isLegacyConnector, psbtFromBase64, request });
    const inputsToSign = ((_c = (_b = request.signature) === null || _b === void 0 ? void 0 : _b.map((sig) => {
        var _a;
        return ((_a = sig.signingIndexes) !== null && _a !== void 0 ? _a : []).map((inputIndex) => ({
            address: sig.address,
            sigHash: isLegacyConnector
                ? getSigHashType(psbtFromBase64.data.inputs[inputIndex])
                : request.allowedSighash[0],
            signingIndexes: [inputIndex],
        }));
    })) !== null && _c !== void 0 ? _c : []).flat();
    logger.logVerboseTroubleshootingMessage('createSignPsbtOptionsForSatsConnect', { inputsToSign });
    return inputsToSign;
};

export { createPsbtOptions, createSignPsbtOptionsForSatsConnect };
