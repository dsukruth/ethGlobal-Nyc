import { Wallet } from '@dynamic-labs/wallet-connector-core';
import type { WalletAddressType } from '@dynamic-labs/types';
import { BitcoinWalletConnector } from '../connectors';
import { BitcoinSignProtocol, BitcoinSignPsbtRequest, BitcoinSignPsbtResponse, BitcoinTransaction } from '../types';
export declare class BitcoinWallet extends Wallet<BitcoinWalletConnector> {
    /**
     * Sends the native balance of the wallet to the given address.
     * @param amount - The amount of balance to send (in satoshis).
     * @param toAddress - The address to send the balance to.
     * @returns The signature of the sent transaction.
     */
    sendBalance({ amount, toAddress, }: {
        amount: string;
        toAddress: string;
    }): Promise<string | undefined>;
    /**
     * Sends a raw transaction
     * @returns A promise that resolves to the transaction id
     */
    sendRawTransaction(rawTransaction: string): Promise<string>;
    /**
     * Sends satoshis to a bitcoin address
     * @returns A promise that resolves to the transaction id
     */
    sendBitcoin(transaction: BitcoinTransaction): Promise<string | undefined>;
    /**
     * Signs a message using a specific address type (payment or ordinals).
     * @param messageToSign - The message to sign.
     * @param options - Optional configuration for signing
     * @param options.addressType - The type of address to sign with (e.g. 'payment' or 'ordinals')
     * @param options.protocol - The signing protocol to use (e.g. 'ecdsa' or 'bip322-simple')
     * @returns A promise that resolves to the signature of the message as a string,
     * or undefined if the message cannot be signed.
     */
    signMessage(messageToSign: string, options?: {
        addressType?: WalletAddressType;
        protocol?: BitcoinSignProtocol;
    }): Promise<string | undefined>;
    /**
     * Sings a PSBT
     * @returns A promise that resolves to an object with the signed PSBT
     * or undefined if no provider is available
     */
    signPsbt(request: BitcoinSignPsbtRequest): Promise<BitcoinSignPsbtResponse | undefined>;
    /**
     * Sings multiple PSBTs
     * @returns A promise that resolves to an array of signed PSBTs in base64
     * or undefined if no provider is available
     */
    signPsbts(requests: BitcoinSignPsbtRequest[]): Promise<string[] | undefined>;
}
