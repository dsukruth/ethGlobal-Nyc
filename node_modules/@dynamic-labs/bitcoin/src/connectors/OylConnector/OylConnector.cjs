'use client'
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _tslib = require('../../../_virtual/_tslib.cjs');
var bitcoinjsLib = require('bitcoinjs-lib');
var BitcoinWalletConnector = require('../BitcoinWalletConnector.cjs');
var createSignPsbtOptions = require('../../utils/psbt/createSignPsbtOptions.cjs');

class OylConnector extends BitcoinWalletConnector.BitcoinWalletConnector {
    constructor(opts) {
        super(Object.assign(Object.assign({}, opts), { overrideKey: 'oylwallet' }));
        this.name = 'Oyl Wallet';
        this.overrideKey = 'oylwallet';
    }
    getAddress() {
        return _tslib.__awaiter(this, void 0, void 0, function* () {
            var _a;
            const provider = this.getProvider();
            if (!provider) {
                return;
            }
            const addresses = yield provider.getAddresses();
            const ordinalsAddress = addresses.taproot;
            const paymentAddress = addresses.nativeSegwit;
            const mainAddress = (_a = ordinalsAddress === null || ordinalsAddress === void 0 ? void 0 : ordinalsAddress.address) !== null && _a !== void 0 ? _a : paymentAddress === null || paymentAddress === void 0 ? void 0 : paymentAddress.address;
            yield this.setConnectedAccountWithAddresses({
                active: true,
                mainAddress,
                ordinalsAddress,
                paymentAddress,
            });
            return mainAddress;
        });
    }
    signMessage(messageToSign, options) {
        return _tslib.__awaiter(this, void 0, void 0, function* () {
            const { address, protocol } = options;
            const provider = this.getProvider();
            if (!provider) {
                return;
            }
            const { signature } = yield provider.signMessage({
                address,
                message: messageToSign,
                // Oyl Wallet calls it just bip322 instead of bip322-simple
                protocol: protocol === 'bip322-simple' ? 'bip322' : protocol,
            });
            return signature;
        });
    }
    signPsbt(request) {
        return _tslib.__awaiter(this, void 0, void 0, function* () {
            const provider = this.getProvider();
            if (!provider) {
                return;
            }
            const psbtFromBase64 = bitcoinjsLib.Psbt.fromBase64(request.unsignedPsbtBase64);
            const options = createSignPsbtOptions.createPsbtOptions(psbtFromBase64, request);
            const { psbt: signedPsbtHex } = yield provider.signPsbt({
                broadcast: false,
                finalize: options.autoFinalized,
                psbt: psbtFromBase64.toHex(),
            });
            return { signedPsbt: bitcoinjsLib.Psbt.fromHex(signedPsbtHex).toBase64() };
        });
    }
}

exports.OylConnector = OylConnector;
