import { type EventEmitter } from 'eventemitter3';
import type { Wallet } from '@wallet-standard/base';
import { Chain, IBitcoinWalletConnector, WalletConnectorBase, WalletMetadata } from '@dynamic-labs/wallet-connector-core';
import { WalletBookSchema, WalletSchema } from '@dynamic-labs/wallet-book';
import { JwtVerifiedCredential, WalletAdditionalAddress } from '@dynamic-labs/sdk-api-core';
import { IBitcoinSessionCache } from '../BitcoinLocalStorageCache';
import { BitcoinTransaction, BitcoinSignPsbtRequest, BitcoinSignPsbtResponse, BitcoinWalletStandardMethods, ConnectedAccountWithAddressesProps, BitcoinSignProtocol } from '../types';
import { BitcoinWallet } from '../wallet';
export type BitcoinWalletConnectorOpts = {
    walletBook: WalletBookSchema;
    walletData: WalletSchema;
    overrideKey?: string;
    metadata?: WalletMetadata;
};
export declare abstract class BitcoinWalletConnector extends WalletConnectorBase<typeof BitcoinWallet> implements IBitcoinWalletConnector {
    cache: IBitcoinSessionCache;
    ChainWallet: typeof BitcoinWallet;
    connectedChain: Chain;
    supportedChains: Chain[];
    private getAddressPromise;
    private bitcoinProviderHelper;
    wallet: Wallet | undefined;
    walletMethods: BitcoinWalletStandardMethods | undefined;
    canFetchConnectedAccounts: boolean;
    isHardwareWalletEnabled: boolean;
    verifiedCredentials: JwtVerifiedCredential[];
    private lastAccountChange;
    constructor(opts: BitcoinWalletConnectorOpts);
    private isSameAccountChangeRequest;
    private setLastAccountChangeRequest;
    clearConnectedAccounts(): Promise<void>;
    canConnectWithHardwareWallet(): boolean;
    isInstalledOnBrowser(): boolean;
    getDeepLink(): string | undefined;
    endSession(): Promise<void>;
    private apiGetBalance;
    getBalance(address: string): Promise<string | undefined>;
    getConnectedAccountsFromCache(): Promise<string[]>;
    getConnectedAccounts(): Promise<string[]>;
    getAdditionalAddresses(mainAddress?: string): Promise<WalletAdditionalAddress[]>;
    setAdditionalAddresses(mainAddress: string, additionalAddresses: WalletAdditionalAddress[]): Promise<void>;
    sendRawTransaction(rawTransaction: string): Promise<string>;
    sendBitcoin(transaction: BitcoinTransaction): Promise<string | undefined>;
    getProvider<T>(): T & EventEmitter<string | symbol, any>;
    abstract signPsbt(request: BitcoinSignPsbtRequest): Promise<BitcoinSignPsbtResponse | undefined>;
    signPsbts(requests: BitcoinSignPsbtRequest[]): Promise<string[] | undefined>;
    setConnectedAccountWithAddresses({ mainAddress, ordinalsAddress, paymentAddress, active, }: ConnectedAccountWithAddressesProps): Promise<void>;
    setupEventListeners(): void;
    setVerifiedCredentials(verifiedCredentials: JwtVerifiedCredential[]): void;
    isLedgerAddress(address: string): boolean;
    signMessage(messageToSign: string, options?: {
        address?: string;
        protocol?: BitcoinSignProtocol;
    }): Promise<string | undefined>;
    proveOwnership(address: string, messageToSign: string): Promise<string | undefined>;
    getBlockExplorerUrlsForCurrentNetwork(): Promise<string[]>;
    protected openInAppBrowserIfRequired(): boolean;
}
