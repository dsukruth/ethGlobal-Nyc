import { BitcoinNetworkType, SignMultipleTransactionsPayload, SignTransactionResponse } from 'sats-connect';
import { BitcoinSignProtocol, BitcoinSignPsbtRequest, BitcoinSignPsbtResponse, BitcoinTransaction, SatsConnectSignTransactionInput } from '../../types';
import { BitcoinWalletConnector, BitcoinWalletConnectorOpts } from '../BitcoinWalletConnector';
export declare abstract class BitcoinSatsConnectConnector extends BitcoinWalletConnector {
    isLegacy: boolean;
    currentNetwork: BitcoinNetworkType;
    providerId: string | undefined;
    constructor(opts: BitcoinWalletConnectorOpts);
    getBalance(address: string): Promise<string | undefined>;
    private getGenericUserCancelledError;
    private getAddresses;
    /**
     * If is inAppBrowser experience, redirects to the inAppBrowser template.
     * Returns true if redirection was triggered.
     */
    protected handleInAppBrowserGetAddress(): boolean;
    getAddress(): Promise<string | undefined>;
    signMessage(messageToSign: string, options: {
        address: string;
        protocol?: BitcoinSignProtocol;
    }): Promise<string | undefined>;
    sendBitcoin(transaction: BitcoinTransaction): Promise<string | undefined>;
    signTransaction(params: SatsConnectSignTransactionInput): Promise<SignTransactionResponse | undefined>;
    signTransactions(transactions: SignMultipleTransactionsPayload): Promise<SignTransactionResponse[] | undefined>;
    signPsbt(request: BitcoinSignPsbtRequest): Promise<BitcoinSignPsbtResponse | undefined>;
    signPsbts(requests: BitcoinSignPsbtRequest[]): Promise<string[] | undefined>;
    validateActiveWallet(expectedAddress: string): Promise<void>;
    private handleXverseAccountChange;
    setupEventListeners(): void;
}
