'use client'
import { __awaiter } from '../../../_virtual/_tslib.js';
import { Psbt } from 'bitcoinjs-lib';
import { logger } from '@dynamic-labs/wallet-connector-core';
import { BitcoinWalletConnector } from '../BitcoinWalletConnector.js';
import { createPsbtOptions } from '../../utils/psbt/createSignPsbtOptions.js';

class UnisatConnector extends BitcoinWalletConnector {
    constructor(opts) {
        var _a;
        super(Object.assign(Object.assign({}, opts), { overrideKey: (_a = opts.overrideKey) !== null && _a !== void 0 ? _a : 'unisat' }));
        this.name = 'UniSat';
        this.overrideKey = 'unisat';
    }
    // other connectors use the Unisat api and extend the UnisatConnector class
    // so we need to use a different name for each connector
    getConnectorName() {
        return `${this.name.replace(' ', '')}Connector`;
    }
    getAddress() {
        return __awaiter(this, void 0, void 0, function* () {
            const didOpenInAppBrowser = this.openInAppBrowserIfRequired();
            if (didOpenInAppBrowser) {
                return;
            }
            const provider = this.getProvider();
            if (!provider) {
                return;
            }
            const [address] = yield provider.requestAccounts();
            const publicKey = yield provider.getPublicKey();
            const bitcoinAddress = {
                address,
                publicKey,
            };
            yield this.setConnectedAccountWithAddresses({
                active: true,
                mainAddress: address,
                ordinalsAddress: bitcoinAddress,
            });
            return address;
        });
    }
    signMessage(messageToSign, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const provider = this.getProvider();
            if (!provider) {
                return;
            }
            if (options === null || options === void 0 ? void 0 : options.address) {
                logger.debug(`[${this.getConnectorName()}] signMessage - Not possible to specify address to sign with`, {
                    address: options.address,
                    protocol: options.protocol,
                });
            }
            return provider.signMessage(messageToSign, options === null || options === void 0 ? void 0 : options.protocol);
        });
    }
    sendBitcoin(transaction) {
        return __awaiter(this, void 0, void 0, function* () {
            const provider = this.getProvider();
            const connectedAddress = yield this.getAddress();
            if (!connectedAddress || !provider) {
                return;
            }
            return provider.sendBitcoin(transaction.recipientAddress, Number(transaction.amount));
        });
    }
    signPsbt(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const provider = this.getProvider();
            if (!provider) {
                return;
            }
            const psbtFromBase64 = Psbt.fromBase64(request.unsignedPsbtBase64);
            const signedPsbtHex = yield provider.signPsbt(psbtFromBase64.toHex(), createPsbtOptions(psbtFromBase64, request));
            return { signedPsbt: Psbt.fromHex(signedPsbtHex).toBase64() };
        });
    }
    signPsbts(requests) {
        return __awaiter(this, void 0, void 0, function* () {
            const provider = this.getProvider();
            if (!provider) {
                return;
            }
            const psbtHexs = [];
            const psbtOptions = [];
            for (const request of requests) {
                const psbtFromBase64 = Psbt.fromBase64(request.unsignedPsbtBase64);
                psbtHexs.push(psbtFromBase64.toHex());
                psbtOptions.push(createPsbtOptions(psbtFromBase64, request));
            }
            const signedPsbtHexs = yield provider.signPsbts(psbtHexs, psbtOptions);
            return signedPsbtHexs.map((signedPsbtHex) => Psbt.fromHex(signedPsbtHex).toBase64());
        });
    }
    getConnectedAccounts() {
        return __awaiter(this, void 0, void 0, function* () {
            const provider = this.getProvider();
            if (!provider) {
                return [];
            }
            return provider.getAccounts();
        });
    }
}

export { UnisatConnector };
