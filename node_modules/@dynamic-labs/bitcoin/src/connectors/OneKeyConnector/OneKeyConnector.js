'use client'
import { __awaiter } from '../../../_virtual/_tslib.js';
import { Psbt } from 'bitcoinjs-lib';
import { logger } from '@dynamic-labs/wallet-connector-core';
import { BitcoinWalletConnector } from '../BitcoinWalletConnector.js';
import { createPsbtOptions } from '../../utils/psbt/createSignPsbtOptions.js';

class OneKeyConnector extends BitcoinWalletConnector {
    constructor(opts) {
        super(Object.assign(Object.assign({}, opts), { overrideKey: 'onekeybtc' }));
        this.name = 'OneKey';
    }
    getAddress() {
        return __awaiter(this, void 0, void 0, function* () {
            const didOpenInAppBrowser = this.openInAppBrowserIfRequired();
            if (didOpenInAppBrowser) {
                return;
            }
            const provider = this.getProvider();
            if (!provider) {
                return;
            }
            const [address] = yield provider.requestAccounts();
            const bitcoinAddress = {
                address,
                publicKey: yield provider.getPublicKey(),
            };
            yield this.setConnectedAccountWithAddresses({
                active: true,
                mainAddress: address,
                ordinalsAddress: bitcoinAddress,
            });
            return address;
        });
    }
    getConnectedAccounts() {
        return __awaiter(this, void 0, void 0, function* () {
            const provider = this.getProvider();
            if (!provider) {
                return [];
            }
            return provider.getAccounts();
        });
    }
    signMessage(messageToSign, options) {
        return __awaiter(this, void 0, void 0, function* () {
            var _a;
            const provider = this.getProvider();
            if (!provider) {
                return;
            }
            // default to ecdsa
            const protocol = (_a = options === null || options === void 0 ? void 0 : options.protocol) !== null && _a !== void 0 ? _a : 'ecdsa';
            if (options === null || options === void 0 ? void 0 : options.address) {
                logger.debug('[OneKeyConnector] signMessage - Not possible to specify address to sign with', {
                    address: options.address,
                });
            }
            return provider.signMessage(messageToSign, protocol);
        });
    }
    sendBitcoin(transaction) {
        return __awaiter(this, void 0, void 0, function* () {
            const provider = this.getProvider();
            if (!provider) {
                return;
            }
            return provider.sendBitcoin(transaction.recipientAddress, transaction.amount.toString());
        });
    }
    signPsbt(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const provider = this.getProvider();
            if (!provider) {
                return;
            }
            const psbtFromBase64 = Psbt.fromBase64(request.unsignedPsbtBase64);
            const signedPsbtHex = yield provider.signPsbt(psbtFromBase64.toHex(), {
                autoFinalized: false,
            });
            return { signedPsbt: Psbt.fromHex(signedPsbtHex).toBase64() };
        });
    }
    signPsbts(requests) {
        return __awaiter(this, void 0, void 0, function* () {
            const provider = this.getProvider();
            if (!provider) {
                return;
            }
            const psbtHexs = [];
            const psbtOptions = [];
            for (const request of requests) {
                const psbt = Psbt.fromBase64(request.unsignedPsbtBase64);
                psbtHexs.push(psbt.toHex());
                psbtOptions.push(createPsbtOptions(psbt, request));
            }
            const signedPsbtHexs = yield provider.signPsbts(psbtHexs, {
                autoFinalized: false,
            });
            return signedPsbtHexs.map((signedPsbtHex) => Psbt.fromHex(signedPsbtHex).toBase64());
        });
    }
}

export { OneKeyConnector };
