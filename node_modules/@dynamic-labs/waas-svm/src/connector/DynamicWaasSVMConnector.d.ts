import { Connection, SendOptions, Transaction, VersionedTransaction } from '@solana/web3.js';
import { MFAAction } from '@dynamic-labs/sdk-api-core';
import { ISolanaSigner, SolanaWalletConnector, SolanaWalletConnectorOpts } from '@dynamic-labs/solana-core';
import { IUITransaction, WalletUiUtils } from '@dynamic-labs/types';
import { IDynamicWaasConnector, InternalWalletConnector } from '@dynamic-labs/wallet-connector-core';
export type DynamicWaasSVMConnectorProps = SolanaWalletConnectorOpts & {
    walletUiUtils: WalletUiUtils<InternalWalletConnector>;
};
declare const DynamicWaasSVMConnector_base: (abstract new (...args: any[]) => {
    [x: string]: any;
    name: string;
    overrideKey: string;
    isEmbeddedWallet: boolean;
    getSignedSessionId?: (() => Promise<string>) | undefined;
    getMfaToken?: ((props?: {
        mfaAction?: MFAAction | undefined;
    } | undefined) => Promise<string | undefined>) | undefined;
    getAuthToken?: (() => string) | undefined;
    environmentId?: string | undefined;
    baseApiUrl?: string | undefined;
    relayUrl?: string | undefined;
    dynamicWaasClient: import("@dynamic-labs-wallet/browser-wallet-client").DynamicWalletClient | undefined;
    chainName: string;
    __exportHandler: import("@dynamic-labs/waas").WaasExportHandler;
    validateActiveWallet(expectedAddress: string): Promise<void>;
    setGetAuthTokenFunction(getAuthToken: () => string): void;
    setGetMfaTokenFunction(getMfaToken: (props?: {
        mfaAction?: MFAAction | undefined;
    } | undefined) => Promise<string | undefined>): void;
    setEnvironmentId(environmentId: string): void;
    setBaseApiUrl(baseApiUrl: string): void;
    setRelayUrl(relayUrl: string): void;
    setGetSignedSessionIdFunction(getSignedSessionId: () => Promise<string>): void;
    delegateKeyShares({ accountAddress, password, }: {
        accountAddress: string;
        password?: string | undefined;
    }): Promise<void>;
    createDynamicWaasClient(): Promise<import("@dynamic-labs-wallet/browser-wallet-client").DynamicWalletClient>;
    getWaasWalletClient(): Promise<import("@dynamic-labs-wallet/browser-wallet-client").DynamicWalletClient>;
    createWalletAccount({ thresholdSignatureScheme, }?: {
        thresholdSignatureScheme?: string | undefined;
    } | undefined): Promise<{
        chainName: string;
        accountAddress: string;
        publicKeyHex: string;
        rawPublicKey: string | Uint8Array | undefined;
    }>;
    importPrivateKey({ privateKey, thresholdSignatureScheme, }: {
        privateKey: string;
        thresholdSignatureScheme?: string | undefined;
    }): Promise<void>;
    exportPrivateKey({ accountAddress, displayContainer, password, }?: {
        accountAddress?: string | undefined;
        displayContainer?: HTMLIFrameElement | undefined;
        password?: string | undefined;
    } | undefined): Promise<void>;
    getExportHandler(): {
        clear: () => void;
    };
    exportClientKeyshares({ accountAddress, password, }: {
        accountAddress: string;
        password?: string | undefined;
    }): Promise<void>;
    backupKeySharesToGoogleDrive({ accountAddress, password, }: {
        accountAddress: string;
        password?: string | undefined;
    }): Promise<void>;
    refreshWalletAccountShares({ accountAddress, password, }: {
        accountAddress: string;
        password?: string | undefined;
    }): Promise<void>;
    updatePassword({ accountAddress, existingPassword, newPassword, }: {
        accountAddress: string;
        existingPassword: string;
        newPassword: string;
    }): Promise<void>;
    signRawMessage({ accountAddress, message, password, }: {
        accountAddress: string;
        message: string;
        password?: string | undefined;
    }): Promise<string>;
    endSession(): Promise<void>;
    getActiveAccountAddress(): Promise<string | undefined>;
}) & typeof SolanaWalletConnector;
export declare class DynamicWaasSVMConnector extends DynamicWaasSVMConnector_base implements IDynamicWaasConnector {
    connect(): Promise<void>;
    name: string;
    overrideKey: string;
    isEmbeddedWallet: boolean;
    activeAccountAddress: string | undefined;
    protected walletUiUtils: WalletUiUtils<InternalWalletConnector>;
    constructor(props: DynamicWaasSVMConnectorProps);
    private setActiveAccountAddress;
    getActiveAccountAddress(): Promise<string | undefined>;
    validateActiveWallet(expectedAddress: string): Promise<void>;
    internalSignMessage(message: string): Promise<string>;
    signMessage(message: string): Promise<string>;
    internalSignTransaction<T extends Transaction | VersionedTransaction>(transaction: T): Promise<Transaction | VersionedTransaction>;
    signTransaction<T extends Transaction | VersionedTransaction>(transaction: T): Promise<Transaction | VersionedTransaction>;
    internalSignAllTransactions<T extends Transaction | VersionedTransaction>(transactions: T[]): Promise<(Transaction | VersionedTransaction)[]>;
    signAllTransactions<T extends Transaction | VersionedTransaction>(transactions: T[]): Promise<(Transaction | VersionedTransaction)[]>;
    internalSignAndSendTransaction<T extends Transaction | VersionedTransaction>(transaction: T, options?: SendOptions): Promise<string>;
    signAndSendTransaction<T extends Transaction | VersionedTransaction>(transaction: T, options?: SendOptions): Promise<string>;
    getSigner(): Promise<ISolanaSigner>;
    getWalletClientByAddress({ accountAddress, }: {
        accountAddress: string;
    }): Connection;
    exportClientKeyshares({ accountAddress, password, }: {
        accountAddress: string;
        password?: string;
    }): Promise<void>;
    createUiTransaction(from: string): Promise<IUITransaction>;
    endSession(): Promise<void>;
    signMessageWithContext(): Promise<string>;
}
export {};
