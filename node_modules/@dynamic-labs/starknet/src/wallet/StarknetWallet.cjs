'use client'
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _tslib = require('../../_virtual/_tslib.cjs');
var starknet = require('starknet');
var walletConnectorCore = require('@dynamic-labs/wallet-connector-core');
var utils = require('@dynamic-labs/utils');
var constants = require('../constants.cjs');
var ethereumContractAbi = require('../ethereumContractAbi.cjs');

class StarknetWallet extends walletConnectorCore.Wallet {
    /**
     * Sends the native balance of the wallet to the given address.
     * @param amount - The amount of balance to send (in Starknet ETH).
     * @param toAddress - The address to send the balance to.
     * @returns The signature of the sent transaction.
     */
    sendBalance(_a) {
        return _tslib.__awaiter(this, arguments, void 0, function* ({ amount, toAddress, token, }) {
            yield this._connector.connect();
            const account = yield this._connector.getWalletAccount();
            if (!account) {
                throw new Error('unable to retrieve Starknet wallet account');
            }
            const contract = new starknet.Contract(ethereumContractAbi, (token === null || token === void 0 ? void 0 : token.address) || constants.ETH_STARKNET_ADDRESS, account);
            const transfer = yield contract.invoke('transfer', [
                toAddress,
                starknet.cairo.uint256(Number(amount) * Math.pow(10, ((token === null || token === void 0 ? void 0 : token.decimals) || 18))),
            ]);
            return transfer === null || transfer === void 0 ? void 0 : transfer.transaction_hash;
        });
    }
    getWalletAccount() {
        return _tslib.__awaiter(this, void 0, void 0, function* () {
            const account = yield this._connector.getWalletAccount();
            if (!account) {
                throw new Error('unable to retrieve Starknet wallet account');
            }
            utils.wrapMethodWithCallback(account, 'signMessage', (originalSignMessage, typedData) => _tslib.__awaiter(this, void 0, void 0, function* () {
                yield this.sync();
                return originalSignMessage(typedData);
            }));
            return account;
        });
    }
    getProvider() {
        return _tslib.__awaiter(this, void 0, void 0, function* () {
            const provider = yield this._connector.getProvider();
            utils.wrapMethodWithCallback(provider, 'callContract', (originalCallContract, call, blockIdentifier) => _tslib.__awaiter(this, void 0, void 0, function* () {
                yield this.sync();
                return originalCallContract(call, blockIdentifier);
            }));
            utils.wrapMethodWithCallback(provider, 'deployAccountContract', (originalDeployAccountContract, payload, details) => _tslib.__awaiter(this, void 0, void 0, function* () {
                yield this.sync();
                return originalDeployAccountContract(payload, details);
            }));
            return provider;
        });
    }
}

exports.StarknetWallet = StarknetWallet;
