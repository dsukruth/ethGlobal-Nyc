'use client'
import { __awaiter } from '../../_virtual/_tslib.js';
import { Contract, cairo } from 'starknet';
import { Wallet } from '@dynamic-labs/wallet-connector-core';
import { wrapMethodWithCallback } from '@dynamic-labs/utils';
import { ETH_STARKNET_ADDRESS } from '../constants.js';
import ETH_CONTRACT_ABI from '../ethereumContractAbi.js';

class StarknetWallet extends Wallet {
    /**
     * Sends the native balance of the wallet to the given address.
     * @param amount - The amount of balance to send (in Starknet ETH).
     * @param toAddress - The address to send the balance to.
     * @returns The signature of the sent transaction.
     */
    sendBalance(_a) {
        return __awaiter(this, arguments, void 0, function* ({ amount, toAddress, token, }) {
            yield this._connector.connect();
            const account = yield this._connector.getWalletAccount();
            if (!account) {
                throw new Error('unable to retrieve Starknet wallet account');
            }
            const contract = new Contract(ETH_CONTRACT_ABI, (token === null || token === void 0 ? void 0 : token.address) || ETH_STARKNET_ADDRESS, account);
            const transfer = yield contract.invoke('transfer', [
                toAddress,
                cairo.uint256(Number(amount) * Math.pow(10, ((token === null || token === void 0 ? void 0 : token.decimals) || 18))),
            ]);
            return transfer === null || transfer === void 0 ? void 0 : transfer.transaction_hash;
        });
    }
    getWalletAccount() {
        return __awaiter(this, void 0, void 0, function* () {
            const account = yield this._connector.getWalletAccount();
            if (!account) {
                throw new Error('unable to retrieve Starknet wallet account');
            }
            wrapMethodWithCallback(account, 'signMessage', (originalSignMessage, typedData) => __awaiter(this, void 0, void 0, function* () {
                yield this.sync();
                return originalSignMessage(typedData);
            }));
            return account;
        });
    }
    getProvider() {
        return __awaiter(this, void 0, void 0, function* () {
            const provider = yield this._connector.getProvider();
            wrapMethodWithCallback(provider, 'callContract', (originalCallContract, call, blockIdentifier) => __awaiter(this, void 0, void 0, function* () {
                yield this.sync();
                return originalCallContract(call, blockIdentifier);
            }));
            wrapMethodWithCallback(provider, 'deployAccountContract', (originalDeployAccountContract, payload, details) => __awaiter(this, void 0, void 0, function* () {
                yield this.sync();
                return originalDeployAccountContract(payload, details);
            }));
            return provider;
        });
    }
}

export { StarknetWallet };
