'use client'
import { __awaiter } from '../../../_virtual/_tslib.js';
import starknet from '@starknet-io/get-starknet-core';
import { Logger, LogLevel } from '@dynamic-labs/logger';
import { Injected } from './injected.js';

const logger = new Logger('MetaMask Starknet Snap', LogLevel.INFO);
class MetaMask extends Injected {
    constructor(opts) {
        super('MetaMask Starknet', 'metamask', 'metamaskstarknet', opts);
        this.overrideKey = 'metamaskstarknet';
        starknet.discoverVirtualWallets().then(() => {
            starknet.getAvailableWallets().then((wallets) => {
                const metaMaskProvider = wallets.find((wallet) => wallet.id === 'metamask');
                if (metaMaskProvider) {
                    // Justification: Checked with the Snap team, the provider is available on the window object
                    // eslint-disable-next-line @typescript-eslint/no-explicit-any
                    this.provider = metaMaskProvider.provider;
                }
            });
        });
    }
    getNetwork() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.provider) {
                logger.error('[getNetwork] - No provider found, returning undefined');
                return undefined;
            }
            try {
                logger.info('[getNetwork] - trying to fetch network using provider');
                // we are using this method to get the network so that we always "see" the absolute
                // active network in the companion site. when using the snap wrapper to get the network,
                // we don't "see" the actual active network in the companion site â€“ instead we see the
                // network that was active at the time of the snap initialization
                const result = yield this.provider.request({
                    method: 'wallet_invokeSnap',
                    params: {
                        request: {
                            method: 'starkNet_getCurrentNetwork',
                            params: {},
                        },
                        snapId: 'npm:@consensys/starknet-snap',
                    },
                });
                if (!('chainId' in result) || typeof result.chainId !== 'string') {
                    logger.error(`[getNetwork] - result.chainId should be a string, but got: ${
                    // eslint-disable-next-line @typescript-eslint/no-explicit-any
                    result.chainId}`);
                    return undefined;
                }
                if (result.chainId !== this.currentChainId) {
                    const resultChainName = this.mapChainIdToNetworkName(result.chainId);
                    const currentChainName = this.currentChainId
                        ? this.mapChainIdToNetworkName(this.currentChainId)
                        : undefined;
                    logger.info(`[getNetwork] - emitting chainChange event. got chainId: ${result.chainId} (${resultChainName}). current chainId: ${this.currentChainId} (${currentChainName})`);
                    this.emit('chainChange', { chain: result.chainId });
                }
                this.currentChainId = result.chainId;
                return this.currentChainId;
            }
            catch (e) {
                logger.error('[getNetwork] - network fetch request failed, returning undefined', e);
                return undefined;
            }
        });
    }
    setupEventListeners() {
        if (this.intervalId) {
            return;
        }
        this.intervalId = setInterval(() => {
            this.getNetwork().then((chainId) => {
                if (!chainId) {
                    return;
                }
                const resultChainName = this.mapChainIdToNetworkName(chainId);
                const currentChainName = this.currentChainId
                    ? this.mapChainIdToNetworkName(this.currentChainId)
                    : undefined;
                logger.info(`[setupEventListeners] - got network: ${chainId} (${resultChainName}). current network: ${this.currentChainId} (${currentChainName})`);
                if (chainId !== this.currentChainId) {
                    logger.info(`[setupEventListeners] - emitting chainChange event: ${chainId}`);
                    this.emit('chainChange', { chain: chainId });
                    this.currentChainId = chainId;
                }
            });
        }, 5000);
    }
    teardownEventListeners() {
        return __awaiter(this, void 0, void 0, function* () {
            clearInterval(this.intervalId);
            this.intervalId = undefined;
        });
    }
    endSession() {
        return __awaiter(this, void 0, void 0, function* () {
            this.teardownEventListeners();
        });
    }
}

export { MetaMask };
