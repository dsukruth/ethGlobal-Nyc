import { VerifyResponse } from '@dynamic-labs/sdk-api-core';
import { PhoneData } from '@dynamic-labs/types';
export type EmailProviders = 'dynamic';
export type ConnectWithEmailOptions = {
    provider?: EmailProviders;
    /** @deprecated this is no longer needed and is not used */
    captchaToken?: string;
};
export type ConnectWithSmsOptions = {
    /** @deprecated this is no longer needed and is not used */
    captchaToken?: string;
};
export type VerificationOptions = {
    /**
     * If true, will skip setting user auth token and calling authSuccess.
     * This is useful in cases where setting the user in the headless flow
     * might trigger a re-render of the view.
     *
     * Default: falsey
     */
    skipSetUserAndAuthToken?: boolean;
};
export type IConnectWithOtpContext = {
    connectWithEmail: (email: string, options?: ConnectWithEmailOptions) => Promise<void>;
    connectWithSms: (phone: PhoneData, options?: ConnectWithSmsOptions) => Promise<void>;
    /** Calls the verification handler to check the OTP and sets the auth token and user */
    verifyOneTimePassword: (oneTimePassword: string, options?: VerificationOptions) => Promise<VerifyResponse | void>;
    /** Resends the OTP to the user */
    retryOneTimePassword: () => Promise<void>;
};
export type ProviderVerificationHandler<T extends string | PhoneData> = {
    type: 'email' | 'sms';
    verify: (oneTimePassword: string, options?: VerificationOptions) => Promise<{
        destination: T;
        verified: boolean;
        response: VerifyResponse | undefined;
    }>;
    retry?: () => Promise<void>;
};
export type ProviderHandler<T extends string | PhoneData> = (
/** Either a string or PhoneData that the handler will return on verify */
destination: T, 
/** Optional captcha token for certain verification flows */
captchaToken?: string) => Promise<ProviderVerificationHandler<T>>;
