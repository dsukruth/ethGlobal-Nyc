'use client'
import { __awaiter } from '../../../../../_virtual/_tslib.js';
import { useMemo } from 'react';
import { WalletAddressType } from '@dynamic-labs/sdk-api-core';
import { getChainInfo, isBitcoinConnector } from '@dynamic-labs/wallet-connector-core';
import { getOnrampProviders } from '../../../data/api/onramp/onramp.js';
import { getWalletAdditionalAddressByType } from '../../../utils/functions/getWalletAdditionalAddressByType/getWalletAdditionalAddressByType.js';
import { usePromise } from '../../../utils/hooks/usePromise/usePromise.js';

const useOnrampProviders = ({ primaryWallet, network, environmentId, projectSettingsOnramps, target, includeDisabled, }) => {
    var _a, _b;
    const chainName = (primaryWallet === null || primaryWallet === void 0 ? void 0 : primaryWallet.chain)
        ? (_a = getChainInfo(primaryWallet.chain)) === null || _a === void 0 ? void 0 : _a.name
        : undefined;
    const chainNameToUse = (_b = target.chainName) !== null && _b !== void 0 ? _b : chainName;
    const bitcoinAddress = primaryWallet &&
        isBitcoinConnector(primaryWallet.connector) &&
        getWalletAdditionalAddressByType(WalletAddressType.Payment, primaryWallet);
    const chainHasNetwork = network && chainNameToUse === 'evm';
    let networkToUse;
    if (target.network) {
        networkToUse = target.network;
    }
    else {
        networkToUse = chainHasNetwork ? network.toString() : undefined;
    }
    const { data: allOnRamps = [] } = usePromise(() => __awaiter(void 0, void 0, void 0, function* () {
        if (!chainNameToUse || (!(primaryWallet === null || primaryWallet === void 0 ? void 0 : primaryWallet.address) && !target.address))
            return [];
        const walletAddress = target.address || bitcoinAddress || (primaryWallet === null || primaryWallet === void 0 ? void 0 : primaryWallet.address);
        if (!walletAddress)
            return [];
        return getOnrampProviders({
            chain: chainNameToUse,
            environmentId,
            includeDisabled: true,
            networkId: networkToUse,
            token: target.token,
            tokenAmount: target.tokenAmount,
            walletAddress: walletAddress,
        });
    }), {
        deps: [
            environmentId,
            network,
            primaryWallet === null || primaryWallet === void 0 ? void 0 : primaryWallet.address,
            target.address,
            target.token,
            target.tokenAmount,
            target.chainName,
            target.network,
        ],
        // no need to fetch onramp providers if there are none enabled
        enabled: includeDisabled || Boolean(projectSettingsOnramps === null || projectSettingsOnramps === void 0 ? void 0 : projectSettingsOnramps.length),
        initialData: [],
    });
    const enabledOnRamps = useMemo(() => allOnRamps.filter((p) => projectSettingsOnramps === null || projectSettingsOnramps === void 0 ? void 0 : projectSettingsOnramps.includes(p.provider)), [allOnRamps, projectSettingsOnramps]);
    return useMemo(() => ({ allOnRamps, enabledOnRamps }), [allOnRamps, enabledOnRamps]);
};

export { useOnrampProviders };
