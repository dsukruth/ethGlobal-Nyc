'use client'
import { useMemo } from 'react';
import { useTranslation } from 'react-i18next';
import { ErrorCode } from '@dynamic-labs/utils';
import { useErrorContext } from '../../ErrorContext.js';

const mapErrorCodeToTranslation = {
    [ErrorCode.UNKNOWN]: 'dyn_error.default',
    [ErrorCode.DEFAULT]: 'dyn_error.default',
    [ErrorCode.USER_REJECTED]: 'dyn_error.user_rejected',
    [ErrorCode.MESSAGE_SIGNATURE_DENIED]: 'dyn_error.message_signature_denied',
    [ErrorCode.WALLET_LOCKED]: 'dyn_error.wallet_locked',
    [ErrorCode.INVALID_PARAMETERS]: 'dyn_error.invalid_parameters',
    [ErrorCode.INTERNAL_ERROR]: 'dyn_error.internal_error',
    [ErrorCode.ACCOUNT_ALREADY_LINKED_TO_DIFFERENT_PROFILE]: 'dyn_error.account_already_linked_to_different_profile',
    [ErrorCode.CONNECTION_REJECTED]: 'dyn_error.connection_rejected',
    [ErrorCode.MISSING_PUBLIC_ADDRESS]: 'dyn_error.missing_public_address',
    [ErrorCode.CONNECTION_PROPOSAL_EXPIRED]: 'dyn_error.connection_proposal_expired',
    [ErrorCode.SEI_NOT_ENABLED_IN_KEPLR_WALLET]: 'dyn_error.sei_not_enabled_in_keplr_wallet',
};
/** A hook that listens to the error context and returns a translated value */
const useErrorText = () => {
    const { t } = useTranslation();
    const { error, errorCode } = useErrorContext();
    const errorText = useMemo(() => {
        var _a;
        if (errorCode) {
            return t((_a = mapErrorCodeToTranslation[errorCode]) !== null && _a !== void 0 ? _a : 'dyn_error.default');
        }
        return error;
    }, [error, errorCode, t]);
    return { errorText };
};

export { mapErrorCodeToTranslation, useErrorText };
