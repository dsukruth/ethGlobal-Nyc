'use client'
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var React = require('react');
var DynamicContext = require('../DynamicContext.cjs');
var loadingAndLifecycle = require('../../../store/state/loadingAndLifecycle/loadingAndLifecycle.cjs');
var useOverrides = require('./useOverrides/useOverrides.cjs');

// This is external context hook which is exposed to customers
const useDynamicContext = () => {
    const context = React.useContext(DynamicContext.DynamicContext);
    if (context === undefined) {
        throw new Error('useDynamicContext must be used within a DynamicContextProvider');
    }
    const { accountSwitchState, awaitingSignatureState, getNameService, handleLogOut, removeWallet, loadingNetwork, locale, loginWithEmail, multiWalletWidgetState, network, networkConfigurations, qrcodeUri, refetchProjectSettings, sdkHasLoaded, setLogInWithEmail, setMultiWalletWidgetState, setShowAuthFlow, setShowDynamicUserProfile, setShowQrcodeModal, shadowDOMEnabled, showAuthFlow, showQrcodeModal, user, userWithMissingInfo, bridgeChains, bridgeChainsToConnect, primaryWallet, setShowBridgeWidget, sendWagmiSettings, showDynamicUserProfile, selectedTabIndex, setSelectedTabIndex, } = context;
    const { authMode, setAuthMode } = useOverrides.useOverrides(context);
    const externalSetShowAuthFlow = React.useCallback((value) => {
        setShowAuthFlow(value, {
            clearErrors: true,
            emitCancelAuth: true,
            ignoreIfIsEmbeddedWidget: true,
            initializeWalletConnect: true,
            performMultiWalletChecks: true,
        });
    }, [setShowAuthFlow]);
    const { initialWalletVerificationInProgress } = loadingAndLifecycle.useLoadingAndLifecycle();
    // This ref ensures we don't return a value for primary wallet until useConnectAndSign has completely finished running
    // Read UserWalletsContext.tsx explanation for more context
    const verifiedPrimaryWallet = React.useRef(null);
    if (!initialWalletVerificationInProgress || !primaryWallet) {
        verifiedPrimaryWallet.current = primaryWallet;
    }
    return {
        accountSwitchState,
        authMode,
        awaitingSignatureState,
        bridgeChains,
        bridgeChainsToConnect,
        getNameService,
        handleLogOut,
        handleUnlinkWallet: removeWallet,
        loadingNetwork,
        locale,
        loginWithEmail,
        multiWalletWidgetState,
        network,
        networkConfigurations,
        primaryWallet: verifiedPrimaryWallet.current,
        qrcodeUri,
        refetchProjectSettings,
        removeWallet,
        sdkHasLoaded,
        selectedTabIndex,
        sendWagmiSettings,
        setAuthMode,
        setLogInWithEmail,
        setMultiWalletWidgetState,
        setSelectedTabIndex,
        setShowAuthFlow: externalSetShowAuthFlow,
        setShowBridgeWidget,
        setShowDynamicUserProfile,
        setShowQrcodeModal,
        shadowDOMEnabled,
        showAuthFlow,
        showDynamicUserProfile,
        showQrcodeModal,
        user,
        userWithMissingInfo,
    };
};

exports.useDynamicContext = useDynamicContext;
