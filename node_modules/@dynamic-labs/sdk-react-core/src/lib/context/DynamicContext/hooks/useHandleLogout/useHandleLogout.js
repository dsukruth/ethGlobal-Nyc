'use client'
import { __awaiter } from '../../../../../../_virtual/_tslib.js';
import { useRef, useCallback, useEffect } from 'react';
import { logout } from '@dynamic-labs-sdk/client';
import { tracing, StorageService } from '@dynamic-labs/utils';
import '@dynamic-labs/sdk-api-core';
import '@dynamic-labs-sdk/client/core';
import '../../../../client/client.js';
import { DYNAMIC_AUTH_COOKIE_NAME } from '../../../../utils/constants/values.js';
import '@dynamic-labs/multi-wallet';
import { logger } from '../../../../shared/logger.js';
import { AUTH_TOKEN, AUTH_MIN_TOKEN, WALLET_PICKER_SEARCH_KEY, EXCHANGE_PICKER_SEARCH_KEY, PHANTOM_SIGNATURE_STATE, AUTH_EXPIRES_AT } from '../../../../utils/constants/localStorage.js';
import '../../../../utils/constants/colors.js';
import 'react-international-phone';
import '@dynamic-labs/iconic';
import '@dynamic-labs/wallet-connector-core';
import 'react/jsx-runtime';
import '../../../ViewContext/ViewContext.js';
import '@dynamic-labs/wallet-book';
import '../../../../shared/consts/index.js';
import '../../../../store/state/nonce/nonce.js';
import '../../../../store/state/dynamicContextProps/dynamicContextProps.js';
import { resetPrimaryWalletId } from '../../../../store/state/primaryWalletId/primaryWalletId.js';
import { resetConnectedWalletsInfo } from '../../../../store/state/connectedWalletsInfo/connectedWalletsInfo.js';
import { dynamicEvents } from '../../../../events/dynamicEvents.js';
import '../../../../store/state/projectSettings/projectSettings.js';
import '../../../../config/ApiEndpoint.js';
import { revokeSession } from '../../../../data/api/session/session.js';
import '../../../../locale/locale.js';
import { setAuthMode } from '../../../../store/state/authMode/authMode.js';
import { useInternalDynamicEvents } from '../../../../utils/hooks/events/useDynamicEvents/useDynamicEvents.js';
import '../../DynamicContext.js';
import '../../../../store/state/loadingAndLifecycle/loadingAndLifecycle.js';
import '../../../CaptchaContext/CaptchaContext.js';
import '../../../ErrorContext/ErrorContext.js';
import '../../../AccessDeniedContext/AccessDeniedContext.js';
import '../../../AccountExistsContext/AccountExistsContext.js';
import '../../../UserWalletsContext/UserWalletsContext.js';
import '../../../VerificationContext/VerificationContext.js';
import 'react-dom';
import '../../../../utils/functions/compareChains/compareChains.js';
import '../../../../views/Passkey/utils/findPrimaryEmbeddedChain/findPrimaryEmbeddedChain.js';
import '../../../ThemeContext/ThemeContext.js';
import '../../../../utils/hooks/useUserUpdateRequest/useUpdateUser/userFieldsSchema.js';
import 'bs58';
import '@dynamic-labs/types';
import '../../../SocialRedirectContext/SocialRedirectContext.js';
import '../../../LoadingContext/LoadingContext.js';
import '../../../WalletContext/WalletContext.js';
import '../../../../utils/hooks/useEmbeddedWallet/useSecureEnclaveEmbeddedWallet/constants.js';
import 'yup';
import '../../../MockContext/MockContext.js';
import '../../../../views/CollectUserDataView/useFields.js';
import '../../../FieldsStateContext/FieldsStateContext.js';
import '../../../UserFieldEditorContext/UserFieldEditorContext.js';
import '@dynamic-labs/rpc-providers';
import '../../../../store/state/walletOptions/walletOptions.js';
import 'react-i18next';
import '../../../../components/Accordion/components/AccordionItem/AccordionItem.js';
import '../../../../components/Alert/Alert.js';
import '../../../../components/ShadowDOM/ShadowDOM.js';
import '../../../../components/IconButton/IconButton.js';
import '../../../../components/InlineWidget/InlineWidget.js';
import '../../../../components/Input/Input.js';
import '../../../../components/IsBrowser/IsBrowser.js';
import '../../../../components/MenuList/Dropdown/Dropdown.js';
import '../../../../components/OverlayCard/OverlayCard.js';
import '../../../../components/Transition/ZoomTransition/ZoomTransition.js';
import '../../../../components/Transition/SlideInUpTransition/SlideInUpTransition.js';
import '../../../../components/Transition/OpacityTransition/OpacityTransition.js';
import '../../../../components/PasskeyCreatedSuccessBanner/PasskeyCreatedSuccessBanner.js';
import '../../../../components/Popper/Popper/Popper.js';
import '../../../../components/Popper/PopperContext/PopperContext.js';
import 'react-focus-lock';
import 'qrcode';
import 'formik';
import '../../../../utils/hooks/useSubdomainCheck/useSubdomainCheck.js';
import '../../../WalletGroupContext/WalletGroupContext.js';
import '../../../IpConfigurationContext/IpConfigurationContext.js';
import '../../../ConnectWithOtpContext/ConnectWithOtpContext.js';
import '../../../../widgets/DynamicBridgeWidget/views/WalletsView/components/SecondaryWallets/SecondaryWallets.js';
import '@hcaptcha/react-hcaptcha';
import '../../../../widgets/DynamicWidget/context/DynamicWidgetContext.js';
import '../../../../widgets/DynamicWidget/helpers/convertExchangeKeyAndProviderEnum.js';
import '../../../../views/ExchangeWhitelistWarning/ExchangeWhitelistWarning.js';
import '../../../ErrorContext/hooks/useErrorText/useErrorText.js';
import '../../../FooterAnimationContext/index.js';
import '../../../../views/MfaChooseDeviceView/getMfaOptions/getMfaOptions.js';
import '../../../PasskeyContext/PasskeyContext.js';
import '../../../OnrampContext/OnrampContext.js';
import '../../../../store/state/sendBalances.js';
import '../../../../store/state/connectorsInitializing/connectorsInitializing.js';
import '../../../../components/OverlayCardBase/OverlayCardTarget/OverlayCardTarget.js';
import '../../../../widgets/DynamicWidget/components/DynamicWidgetHeader/DynamicWidgetHeader.js';
import '../../../../views/TransactionConfirmationView/TransactionConfirmationView.js';
import '../../../../widgets/DynamicWidget/components/PasskeyCard/PasskeyCard.js';
import '../../../../../index.js';
import '../../../../widgets/DynamicWidget/views/ReceiveWalletFunds/ReceiveWalletFunds.js';
import '../../../../store/state/tokenBalances.js';
import '../../../../store/state/multichainBalances.js';
import '../../../../shared/utils/functions/getInitialUrl/getInitialUrl.js';

const useHandleLogout = (params) => {
    const paramsRef = useRef(params);
    paramsRef.current = params;
    const logout$1 = useCallback(() => __awaiter(void 0, void 0, void 0, function* () {
        const p = paramsRef.current;
        // We store which wallet connectors were active before logout
        // to not have to worry about having the array change midway through
        const activeConnectors = [
            ...p.walletConnectors,
            ...p.connectedWallets.map((connectedWallet) => connectedWallet.connector),
        ];
        yield logout();
        logger.logVerboseTroubleshootingMessage('useHandleLogout called', {
            params: paramsRef.current,
        });
        tracing.logEvent('logout', 'useHandleLogout called');
        p.setSelectedWalletConnectorKey(null);
        p.clearAllWalletConnectSessions();
        p.setShowDynamicUserProfile(false);
        p.setShowBridgeWidget(false);
        p.resetLoginWithEmail();
        if (p.user) {
            // this deletes the auth cookie, if it exists
            // if the cookie doesn't exist, this sets a new cookie which would expire immediately
            document.cookie = `${DYNAMIC_AUTH_COOKIE_NAME}=; Max-Age=-99999999; path=/; SameSite=Lax`;
            // do not await this async call - just fire and forget
            revokeSession({
                environmentId: p.environmentId,
                sessionId: p.user.sessionId,
            });
        }
        p.setLegacyIsVerifying(false);
        // Clear storage
        StorageService.removeItem(AUTH_TOKEN, {
            priority: ['secureStorage', 'localStorage'],
        });
        StorageService.removeItem(AUTH_MIN_TOKEN, {
            priority: ['secureStorage', 'localStorage'],
        });
        StorageService.removeItem(WALLET_PICKER_SEARCH_KEY);
        StorageService.removeItem(EXCHANGE_PICKER_SEARCH_KEY);
        StorageService.removeItem(PHANTOM_SIGNATURE_STATE);
        StorageService.removeItem(AUTH_EXPIRES_AT);
        setAuthMode(p.initialAuthenticationMode);
        p.setShowAuthFlow(false, {
            emitCancelAuth: false,
            ignoreIfIsEmbeddedWidget: false,
            initializeWalletConnect: false,
            performMultiWalletChecks: false,
        });
        p.setMultiWalletWidgetState('idle');
        resetConnectedWalletsInfo();
        p.removeBridgeOnboardingCompleted();
        resetPrimaryWalletId();
        p.removeConnectedNameService();
        p.removeSessionStorageSessionKeys();
        dynamicEvents.emit('logout');
        yield Promise.all(activeConnectors.map((connector) => connector.endSession()));
    }), []);
    /** Trigger a logout when the SDK failed to load data from storage */
    useEffect(() => {
        StorageService.events.on('parseFailure', logout$1);
        return () => {
            StorageService.events.off('parseFailure', logout$1);
        };
    }, [logout$1]);
    /** Allows triggering a logout from anywhere in the code */
    useInternalDynamicEvents('triggerLogout', () => logout$1());
    return logout$1;
};

export { useHandleLogout };
