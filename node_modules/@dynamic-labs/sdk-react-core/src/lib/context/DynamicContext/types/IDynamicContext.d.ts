import { Dispatch, ReactNode, SetStateAction } from 'react';
import { changeLanguage } from 'i18next';
import { CountryIso2 } from 'react-international-phone';
import { NameServiceData, ProjectSettings } from '@dynamic-labs/sdk-api-core';
import { MobileExperience, NetworkConfigurationMap, SocialProviderFilter, UserProfile, WalletUiUtils } from '@dynamic-labs/types';
import { Chain, GetAddressOpts, InternalWalletConnector, WalletConnector } from '@dynamic-labs/wallet-connector-core';
import { PasskeySuccessEnum } from '../../../components/PasskeyCreatedSuccessBanner/PasskeyCreatedSuccessBanner';
import { AccessDeniedCustomButton, AccountSwitchState, AwaitingSignatureState, ChainToWalletMap, DynamicEventsCallbacks, MultiWalletWidgetState, RecommendedWallet, Wallet, WalletListViewTabItem, WalletOption, WalletsFilter, WalletWithAction } from '../../../shared';
import { DynamicHandlers } from '../../../shared/types/dynamicHandlers';
import { SocialNetworkIconType } from '../../../utils/functions/getSocialNetworkIcon';
import { MultiWalletWidgetStateSetter } from '../../../utils/hooks/multiWallet';
import { ConnectWalletOptions } from '../../../utils/hooks/useConnectWallet/useConnectWallet';
import { ThemeData, ThemeSetting } from '../../ThemeContext';
import { DisplayOrder, SetDisplayOrderPriority, SetShowAuthFlow } from '../hooks';
import { SetCallbackType } from '../useCustomerCallbacks';
import { SettingsOverrides } from './SettingsOverrides';
import { SocialSettings } from './SocialSettings';
export type ChainsToConnect = {
    chain: Chain;
    chainId?: number;
};
export type ConnectWalletResult = {
    address: string;
    id: string;
};
export type NetworkValidationMode = 'always' | 'sign-in' | 'never';
export interface IDynamicContext {
    accessDeniedButton?: AccessDeniedCustomButton;
    accessDeniedMessagePrimary?: string;
    accessDeniedMessageSecondary?: string;
    accountSwitchState: AccountSwitchState;
    appLogoUrl?: string;
    appName?: string;
    defaultPhoneInputIso2?: CountryIso2;
    authorizationViewDisplayOrder: DisplayOrder;
    awaitingSignatureState: AwaitingSignatureState;
    socialSettings?: SocialSettings;
    bridgeChains: ChainsToConnect[] | undefined;
    bridgeChainsToConnect: ChainsToConnect[] | undefined;
    bridgeOnboardingCompleted: boolean;
    clearStatesOnBackClick: () => void;
    /**
     * @deprecated please call useUserWallets() OR useInternalUserWallets() instead
     */
    connectedWallets: Wallet[];
    connectWallet: (walletConnector: WalletConnector, getAddressOpts?: GetAddressOpts, options?: ConnectWalletOptions) => Promise<ConnectWalletResult | undefined>;
    cssOverrides?: string | JSX.Element;
    customPrivacyPolicy?: ReactNode;
    customTermsOfServices?: ReactNode;
    debugError: boolean;
    defaultNumberOfWalletsToShow: number;
    desktopUri: string;
    detectNewWalletsForLinking: boolean;
    disconnectWallet: (walletId: string) => void;
    displaySiweStatement: boolean;
    enableConnectOnlyFallback?: boolean;
    /**
     * @deprecated get environmentId from store instead with useEnvironmentId or getEnvironmentId()
     */
    environmentId: string;
    events?: DynamicEventsCallbacks;
    getConnectedWalletById: (walletId: string) => Wallet | undefined;
    getNameService: (address?: string) => Promise<NameServiceData | undefined>;
    handleLogOut: () => Promise<void>;
    removeWallet: (walletId: string, clearStackAndPushInitialView?: () => void) => Promise<void>;
    handlers?: DynamicHandlers;
    isBridgeFlow: boolean;
    /** Whether there is an instance of DynamicEmbeddedAuthFlow being rendered */
    isRenderingEmbeddedAuthFlow: boolean;
    isSingleWalletAccount: boolean;
    /**
     * Legacy boolean flag used in useVerifyOnAwaitingSignature. Used to be called "isVerifying"
     * Was meant to prevent an effect from accidentally triggering again when it shouldn't.
     * @deprecated Should be removed asap.
     */
    legacyIsVerifying: boolean;
    linkedWallets: Wallet[];
    loadingNetwork: boolean;
    locale: {
        changeLanguage: typeof changeLanguage;
    };
    loginWithEmail: boolean;
    selectedTabIndex: number;
    selectedTabSettings: WalletListViewTabItem | undefined;
    setIsRenderingEmbeddedAuthFlow: Dispatch<SetStateAction<boolean>>;
    tabsItems: WalletListViewTabItem[] | undefined;
    setSelectedTabIndex: Dispatch<SetStateAction<number>>;
    multiAsset: boolean;
    multiWallet: boolean;
    multiWalletWidgetState: MultiWalletWidgetState;
    mobileExperience?: MobileExperience;
    networkValidationMode: NetworkValidationMode;
    network: number | string | undefined;
    networkConfigurations: NetworkConfigurationMap | undefined;
    newToWeb3WalletChainMap: ChainToWalletMap;
    notInTheListImageUrl?: string;
    onboardingImageUrl?: string;
    overrides?: SettingsOverrides;
    passkeySuccessPopup: PasskeySuccessEnum | undefined;
    policiesConsentInnerComponent?: ReactNode | ReactNode[];
    primaryWallet: Wallet | null;
    /**
     * @deprecated get primaryWalletId from store instead with usePrimaryWalletId or getPrimaryWalletId()
     */
    primaryWalletId: string | undefined;
    privacyPolicyUrl?: string;
    /**
     * @deprecated get projectSettings from store instead with useProjectSettings or getProjectSettings()
     */
    projectSettings: ProjectSettings | undefined;
    qrcodeUri: string;
    recommendedWallets?: RecommendedWallet[];
    redirectUrl?: string;
    refetchProjectSettings: () => Promise<ProjectSettings | undefined>;
    sdkHasLoaded: boolean;
    secondaryWallets: Wallet[];
    selectedWalletConnector: InternalWalletConnector | null;
    selectedWalletWithAction: WalletWithAction | null;
    sendWagmiSettings: (settings: {
        dynamicWagmiSettings?: object;
    }) => void;
    setAuthorizationViewDisplayOrder: SetDisplayOrderPriority;
    setBridgeOnboardingCompleted: (value: boolean | ((val: boolean) => boolean)) => void;
    setCallback: SetCallbackType;
    setDesktopUri: Dispatch<SetStateAction<string>>;
    setIsSingleWalletAccount: Dispatch<SetStateAction<boolean>>;
    /**
     * Legacy setter for legacyIsVerifying
     * @deprecated Should be removed asap.
     */
    setLegacyIsVerifying: Dispatch<SetStateAction<boolean>>;
    setLogInWithEmail: Dispatch<SetStateAction<boolean>>;
    setMultiWalletWidgetState: MultiWalletWidgetStateSetter;
    setPasskeySuccessPopup: (key: PasskeySuccessEnum) => void;
    setPrimaryWallet: (walletId: string) => Promise<void>;
    setQrcodeUri: Dispatch<SetStateAction<string>>;
    setSelectedWalletConnectorKey: (key: string | null) => void;
    setSelectedWalletWithAction: (walletWithAction: WalletWithAction | null) => void;
    setShowAuthFlow: SetShowAuthFlow;
    /**
     * The set state action which regulates displaying the bridge widget
     */
    setShowBridgeWidget: Dispatch<SetStateAction<boolean>>;
    setShowDynamicUserProfile: Dispatch<SetStateAction<boolean>>;
    setShowQrcodeModal: Dispatch<SetStateAction<boolean>>;
    shadowDOMEnabled: boolean;
    showAuthFlow: boolean;
    /**
     * The boolean value representing the state of displaying the bridge widget
     */
    showBridgeWidget: boolean;
    showDynamicUserProfile: boolean;
    showFiat: boolean;
    showLockedWalletView?: boolean;
    showQrcodeModal: boolean;
    siweStatement?: string;
    socialMediaIconUrl?: Record<string, string> | Record<SocialNetworkIconType, string>;
    socialMediaLinkText?: string;
    socialMediaUrl?: string;
    socialProvidersFilter?: SocialProviderFilter;
    termsOfServiceUrl?: string;
    theme?: ThemeData | ThemeSetting;
    user: UserProfile | undefined;
    userWithMissingInfo: UserProfile | undefined;
    /**
     * @deprecated get walletConnectorOptions from store instead with useWalletOptions or getWalletOptions()
     */
    walletConnectorOptions: WalletOption[];
    walletUiUtils: WalletUiUtils<InternalWalletConnector>;
    walletsFilter?: WalletsFilter;
}
