'use client'
import { jsxs, Fragment, jsx } from 'react/jsx-runtime';
import React__default, { useMemo } from 'react';
import { getChainInfoWithOverrides } from '@dynamic-labs/wallet-connector-core';
import '@dynamic-labs/sdk-api-core';
import '../../../../../../shared/logger.js';
import { getChainIcon } from '../../../../../../shared/utils/functions/chain/getChainIcon.js';
import '@dynamic-labs/wallet-book';
import '@dynamic-labs/utils';
import '../../../../../../utils/constants/colors.js';
import '../../../../../../utils/constants/values.js';
import '@dynamic-labs/iconic';
import '../../../../../../context/ViewContext/ViewContext.js';
import '../../../../../../shared/consts/index.js';
import { DynamicBridgeWalletCard } from '../../../../components/DynamicBridgeWalletCard/DynamicBridgeWalletCard.js';
import { DynamicBridgeWalletCardBody } from '../../../../components/DynamicBridgeWalletCardBody/DynamicBridgeWalletCardBody.js';
import { Balance } from '../../../../../DynamicWidget/components/Balance/Balance.js';
import '../../../../../../context/DynamicContext/DynamicContext.js';
import '../../../../../../store/state/loadingAndLifecycle/loadingAndLifecycle.js';
import '../../../../../../events/dynamicEvents.js';
import '../../../../../../../../_virtual/_tslib.js';
import '../../../../../../context/CaptchaContext/CaptchaContext.js';
import '../../../../../../context/ErrorContext/ErrorContext.js';
import '@dynamic-labs/multi-wallet';
import 'react-international-phone';
import '../../../../../../store/state/nonce/nonce.js';
import '@dynamic-labs-sdk/client/core';
import '../../../../../../client/client.js';
import '@dynamic-labs-sdk/client';
import '../../../../../../store/state/projectSettings/projectSettings.js';
import '../../../../../../config/ApiEndpoint.js';
import '../../../../../../locale/locale.js';
import '../../../../../../store/state/dynamicContextProps/dynamicContextProps.js';
import '../../../../../../store/state/primaryWalletId/primaryWalletId.js';
import '../../../../../../store/state/connectedWalletsInfo/connectedWalletsInfo.js';
import '../../../../../../context/AccessDeniedContext/AccessDeniedContext.js';
import '../../../../../../context/AccountExistsContext/AccountExistsContext.js';
import '../../../../../../context/UserWalletsContext/UserWalletsContext.js';
import '../../../../../../store/state/authMode/authMode.js';
import '../../../../../../context/VerificationContext/VerificationContext.js';
import 'react-dom';
import '../../../../../../utils/functions/compareChains/compareChains.js';
import '../../../../../../views/Passkey/utils/findPrimaryEmbeddedChain/findPrimaryEmbeddedChain.js';
import '../../../../../../context/ThemeContext/ThemeContext.js';
import '../../../../../../utils/hooks/useUserUpdateRequest/useUpdateUser/userFieldsSchema.js';
import 'bs58';
import '@dynamic-labs/types';
import '../../../../../../context/SocialRedirectContext/SocialRedirectContext.js';
import '../../../../../../context/LoadingContext/LoadingContext.js';
import '../../../../../../context/WalletContext/WalletContext.js';
import '../../../../../../utils/hooks/useEmbeddedWallet/useSecureEnclaveEmbeddedWallet/constants.js';
import 'yup';
import '../../../../../../context/MockContext/MockContext.js';
import '../../../../../../views/CollectUserDataView/useFields.js';
import '../../../../../../context/FieldsStateContext/FieldsStateContext.js';
import '../../../../../../context/UserFieldEditorContext/UserFieldEditorContext.js';
import '@dynamic-labs/rpc-providers';
import '../../../../../../store/state/walletOptions/walletOptions.js';
import 'react-i18next';
import '../../../../../../components/Accordion/components/AccordionItem/AccordionItem.js';
import '../../../../../../components/Alert/Alert.js';
import '../../../../../../components/ShadowDOM/ShadowDOM.js';
import '../../../../../../components/IconButton/IconButton.js';
import '../../../../../../components/InlineWidget/InlineWidget.js';
import '../../../../../../components/Input/Input.js';
import '../../../../../../components/IsBrowser/IsBrowser.js';
import '../../../../../../components/MenuList/Dropdown/Dropdown.js';
import '../../../../../../components/OverlayCard/OverlayCard.js';
import '../../../../../../components/Transition/ZoomTransition/ZoomTransition.js';
import '../../../../../../components/Transition/SlideInUpTransition/SlideInUpTransition.js';
import '../../../../../../components/Transition/OpacityTransition/OpacityTransition.js';
import '../../../../../../components/PasskeyCreatedSuccessBanner/PasskeyCreatedSuccessBanner.js';
import '../../../../../../components/Popper/Popper/Popper.js';
import '../../../../../../components/Popper/PopperContext/PopperContext.js';
import 'react-focus-lock';
import 'qrcode';
import 'formik';
import '../../../../../../utils/hooks/useSubdomainCheck/useSubdomainCheck.js';
import '../../../../../../context/WalletGroupContext/WalletGroupContext.js';
import '../../../../../../context/IpConfigurationContext/IpConfigurationContext.js';
import '../../../../../../context/ConnectWithOtpContext/ConnectWithOtpContext.js';
import '@hcaptcha/react-hcaptcha';
import '../../../../../DynamicWidget/context/DynamicWidgetContext.js';
import '../../../../../DynamicWidget/helpers/convertExchangeKeyAndProviderEnum.js';
import '../../../../../../views/ExchangeWhitelistWarning/ExchangeWhitelistWarning.js';
import '../../../../../../context/ErrorContext/hooks/useErrorText/useErrorText.js';
import '../../../../../../context/FooterAnimationContext/index.js';
import '../../../../../../views/MfaChooseDeviceView/getMfaOptions/getMfaOptions.js';
import '../../../../../../context/PasskeyContext/PasskeyContext.js';
import '../../../../../../context/OnrampContext/OnrampContext.js';
import '../../../../../../store/state/sendBalances.js';
import '../../../../../../store/state/connectorsInitializing/connectorsInitializing.js';
import '../../../../../../components/OverlayCardBase/OverlayCardTarget/OverlayCardTarget.js';
import '../../../../../DynamicWidget/components/DynamicWidgetHeader/DynamicWidgetHeader.js';
import '../../../../../../views/TransactionConfirmationView/TransactionConfirmationView.js';
import '../../../../../DynamicWidget/components/PasskeyCard/PasskeyCard.js';
import '../../../../../../../index.js';
import '../../../../../DynamicWidget/views/ReceiveWalletFunds/ReceiveWalletFunds.js';
import '../../../../../../store/state/tokenBalances.js';
import '../../../../../../store/state/multichainBalances.js';
import '../../../../../../shared/utils/functions/getInitialUrl/getInitialUrl.js';
import { useInternalDynamicContext } from '../../../../../../context/DynamicContext/useDynamicContext/useInternalDynamicContext/useInternalDynamicContext.js';
import { DynamicBridgeWidgetEmptyCard } from '../../../../components/DynamicBridgeWidgetEmptyCard/DynamicBridgeWidgetEmptyCard.js';

const SecondaryWallets = ({ hideUnlinkAction = false }) => {
    const { disconnectWallet, bridgeChains, connectedWallets, primaryWalletId } = useInternalDynamicContext();
    const secondaryChain = useMemo(() => { var _a; return (_a = bridgeChains === null || bridgeChains === void 0 ? void 0 : bridgeChains[1]) === null || _a === void 0 ? void 0 : _a.chain; }, [bridgeChains]);
    const secondaryWallet = useMemo(() => connectedWallets.find((wallet) => wallet.id !== primaryWalletId && wallet.chain === secondaryChain), [connectedWallets, primaryWalletId, secondaryChain]);
    const NetworkIcon = secondaryWallet && getChainIcon(secondaryWallet === null || secondaryWallet === void 0 ? void 0 : secondaryWallet.chain);
    const networkInfo = secondaryWallet && getChainInfoWithOverrides(secondaryWallet === null || secondaryWallet === void 0 ? void 0 : secondaryWallet.chain);
    return (jsxs(Fragment, { children: [!secondaryWallet && (jsx(DynamicBridgeWidgetEmptyCard, { chain: secondaryChain })), secondaryWallet && NetworkIcon && (jsx(DynamicBridgeWalletCard, { networkIcon: jsx(NetworkIcon, {}), networkName: networkInfo === null || networkInfo === void 0 ? void 0 : networkInfo.displayName, children: jsx(DynamicBridgeWalletCardBody, { walletKey: secondaryWallet.connector.key, walletAddress: secondaryWallet.address, walletBalance: 
                    // eslint-disable-next-line react/jsx-wrap-multilines
                    jsx(Balance, { wallet: secondaryWallet, network: secondaryWallet.chain }), onDisconnectClick: !hideUnlinkAction
                        ? () => disconnectWallet(secondaryWallet.id)
                        : undefined }, secondaryWallet.id) }))] }));
};
const MemoSecondaryWallets = React__default.memo(SecondaryWallets);

export { MemoSecondaryWallets, SecondaryWallets };
