'use client'
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var React = require('react');
require('../../../../../../context/DynamicContext/DynamicContext.cjs');
require('../../../../../../store/state/loadingAndLifecycle/loadingAndLifecycle.cjs');
require('@dynamic-labs/sdk-api-core');
require('../../../../../../shared/logger.cjs');
require('@dynamic-labs/iconic');
require('@dynamic-labs/wallet-connector-core');
require('react/jsx-runtime');
require('../../../../../../context/ViewContext/ViewContext.cjs');
require('@dynamic-labs/wallet-book');
require('@dynamic-labs/utils');
require('../../../../../../utils/constants/colors.cjs');
require('../../../../../../utils/constants/values.cjs');
require('../../../../../../shared/consts/index.cjs');
require('../../../../../../events/dynamicEvents.cjs');
require('../../../../../../../../_virtual/_tslib.cjs');
require('../../../../../../context/CaptchaContext/CaptchaContext.cjs');
require('../../../../../../context/ErrorContext/ErrorContext.cjs');
require('@dynamic-labs/multi-wallet');
require('react-international-phone');
require('../../../../../../store/state/nonce/nonce.cjs');
require('@dynamic-labs-sdk/client/core');
require('../../../../../../client/client.cjs');
require('@dynamic-labs-sdk/client');
require('../../../../../../store/state/projectSettings/projectSettings.cjs');
require('../../../../../../config/ApiEndpoint.cjs');
require('../../../../../../locale/locale.cjs');
require('../../../../../../store/state/dynamicContextProps/dynamicContextProps.cjs');
require('../../../../../../store/state/primaryWalletId/primaryWalletId.cjs');
require('../../../../../../store/state/connectedWalletsInfo/connectedWalletsInfo.cjs');
require('../../../../../../context/AccessDeniedContext/AccessDeniedContext.cjs');
require('../../../../../../context/AccountExistsContext/AccountExistsContext.cjs');
require('../../../../../../context/UserWalletsContext/UserWalletsContext.cjs');
require('../../../../../../store/state/authMode/authMode.cjs');
require('../../../../../../context/VerificationContext/VerificationContext.cjs');
require('react-dom');
require('../../../../../../utils/functions/compareChains/compareChains.cjs');
require('../../../../../../views/Passkey/utils/findPrimaryEmbeddedChain/findPrimaryEmbeddedChain.cjs');
require('../../../../../../context/ThemeContext/ThemeContext.cjs');
require('../../../../../../utils/hooks/useUserUpdateRequest/useUpdateUser/userFieldsSchema.cjs');
require('bs58');
require('@dynamic-labs/types');
require('../../../../../../context/SocialRedirectContext/SocialRedirectContext.cjs');
require('../../../../../../context/LoadingContext/LoadingContext.cjs');
require('../../../../../../context/WalletContext/WalletContext.cjs');
require('../../../../../../utils/hooks/useEmbeddedWallet/useSecureEnclaveEmbeddedWallet/constants.cjs');
require('yup');
require('../../../../../../context/MockContext/MockContext.cjs');
require('../../../../../../views/CollectUserDataView/useFields.cjs');
require('../../../../../../context/FieldsStateContext/FieldsStateContext.cjs');
require('../../../../../../context/UserFieldEditorContext/UserFieldEditorContext.cjs');
require('@dynamic-labs/rpc-providers');
require('../../../../../../store/state/walletOptions/walletOptions.cjs');
require('react-i18next');
require('../../../../../../components/Accordion/components/AccordionItem/AccordionItem.cjs');
require('../../../../../../components/Alert/Alert.cjs');
require('../../../../../../components/ShadowDOM/ShadowDOM.cjs');
require('../../../../../../components/IconButton/IconButton.cjs');
require('../../../../../../components/InlineWidget/InlineWidget.cjs');
require('../../../../../../components/Input/Input.cjs');
require('../../../../../../components/IsBrowser/IsBrowser.cjs');
require('../../../../../../components/MenuList/Dropdown/Dropdown.cjs');
require('../../../../../../components/OverlayCard/OverlayCard.cjs');
require('../../../../../../components/Transition/ZoomTransition/ZoomTransition.cjs');
require('../../../../../../components/Transition/SlideInUpTransition/SlideInUpTransition.cjs');
require('../../../../../../components/Transition/OpacityTransition/OpacityTransition.cjs');
require('../../../../../../components/PasskeyCreatedSuccessBanner/PasskeyCreatedSuccessBanner.cjs');
require('../../../../../../components/Popper/Popper/Popper.cjs');
require('../../../../../../components/Popper/PopperContext/PopperContext.cjs');
require('react-focus-lock');
require('qrcode');
require('formik');
require('../../../../../../utils/hooks/useSubdomainCheck/useSubdomainCheck.cjs');
require('../../../../../../context/WalletGroupContext/WalletGroupContext.cjs');
require('../../../../../../context/IpConfigurationContext/IpConfigurationContext.cjs');
require('../../../../../../context/ConnectWithOtpContext/ConnectWithOtpContext.cjs');
require('../../../../../DynamicBridgeWidget/views/WalletsView/components/SecondaryWallets/SecondaryWallets.cjs');
require('@hcaptcha/react-hcaptcha');
require('../../../../context/DynamicWidgetContext.cjs');
require('../../../../helpers/convertExchangeKeyAndProviderEnum.cjs');
require('../../../../../../views/ExchangeWhitelistWarning/ExchangeWhitelistWarning.cjs');
require('../../../../../../context/ErrorContext/hooks/useErrorText/useErrorText.cjs');
require('../../../../../../context/FooterAnimationContext/index.cjs');
require('../../../../../../views/MfaChooseDeviceView/getMfaOptions/getMfaOptions.cjs');
require('../../../../../../context/PasskeyContext/PasskeyContext.cjs');
require('../../../../../../context/OnrampContext/OnrampContext.cjs');
require('../../../../../../store/state/sendBalances.cjs');
require('../../../../../../store/state/connectorsInitializing/connectorsInitializing.cjs');
require('../../../../../../components/OverlayCardBase/OverlayCardTarget/OverlayCardTarget.cjs');
require('../../../../components/DynamicWidgetHeader/DynamicWidgetHeader.cjs');
require('../../../../../../views/TransactionConfirmationView/TransactionConfirmationView.cjs');
require('../../../../components/PasskeyCard/PasskeyCard.cjs');
require('../../../../../../../index.cjs');
require('../../ReceiveWalletFunds.cjs');
require('../../../../../../store/state/tokenBalances.cjs');
require('../../../../../../store/state/multichainBalances.cjs');
require('../../../../../../shared/utils/functions/getInitialUrl/getInitialUrl.cjs');
var useInternalDynamicContext = require('../../../../../../context/DynamicContext/useDynamicContext/useInternalDynamicContext/useInternalDynamicContext.cjs');
var useExchangeRatesForFunding = require('../useExchangeRatesForFunding/useExchangeRatesForFunding.cjs');

const useExchangeTokensForFunding = ({ accounts, }) => {
    var _a;
    const { primaryWallet, network } = useInternalDynamicContext.useInternalDynamicContext();
    const enabledNetworks = primaryWallet === null || primaryWallet === void 0 ? void 0 : primaryWallet.connector.getEnabledNetworks();
    const logoURI = (_a = enabledNetworks === null || enabledNetworks === void 0 ? void 0 : enabledNetworks.find(({ chainId }) => chainId === network)) === null || _a === void 0 ? void 0 : _a.iconUrls[0];
    const fundingTokens = accounts.flatMap((account) => account.balances.map((balance) => {
        var _a;
        return ({
            balance: balance.balance,
            fiatBalance: undefined,
            logoURI: (_a = balance.logoURI) !== null && _a !== void 0 ? _a : logoURI,
            name: balance.currency,
            symbol: balance.currency,
            token: 'native', // INFORMATION WILL BE ADDED FROM BACKEND
        });
    }));
    const exchangeRates = useExchangeRatesForFunding.useExchangeRatesForFunding({
        onFetch: () => { },
        tokenBalances: fundingTokens,
    });
    const updatedFundingTokens = React.useMemo(() => {
        if (!exchangeRates)
            return fundingTokens;
        return fundingTokens.map((t) => {
            const price = exchangeRates[t.symbol];
            return Object.assign(Object.assign({}, t), { fiatBalance: price !== undefined ? t.balance * price : undefined });
        });
    }, [fundingTokens, exchangeRates]);
    return {
        tokens: updatedFundingTokens,
    };
};

exports.useExchangeTokensForFunding = useExchangeTokensForFunding;
