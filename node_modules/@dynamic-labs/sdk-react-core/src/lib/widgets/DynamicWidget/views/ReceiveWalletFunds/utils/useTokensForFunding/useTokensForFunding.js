'use client'
import 'react';
import '../../../../../../context/DynamicContext/DynamicContext.js';
import '../../../../../../store/state/loadingAndLifecycle/loadingAndLifecycle.js';
import '@dynamic-labs/sdk-api-core';
import '../../../../../../shared/logger.js';
import '@dynamic-labs/iconic';
import '@dynamic-labs/wallet-connector-core';
import 'react/jsx-runtime';
import '../../../../../../context/ViewContext/ViewContext.js';
import '@dynamic-labs/wallet-book';
import '@dynamic-labs/utils';
import '../../../../../../utils/constants/colors.js';
import '../../../../../../utils/constants/values.js';
import '../../../../../../shared/consts/index.js';
import '../../../../../../events/dynamicEvents.js';
import '../../../../../../../../_virtual/_tslib.js';
import '../../../../../../context/CaptchaContext/CaptchaContext.js';
import '../../../../../../context/ErrorContext/ErrorContext.js';
import '@dynamic-labs/multi-wallet';
import 'react-international-phone';
import '../../../../../../store/state/nonce/nonce.js';
import '@dynamic-labs-sdk/client/core';
import '../../../../../../client/client.js';
import '@dynamic-labs-sdk/client';
import '../../../../../../store/state/projectSettings/projectSettings.js';
import '../../../../../../config/ApiEndpoint.js';
import '../../../../../../locale/locale.js';
import '../../../../../../store/state/dynamicContextProps/dynamicContextProps.js';
import '../../../../../../store/state/primaryWalletId/primaryWalletId.js';
import '../../../../../../store/state/connectedWalletsInfo/connectedWalletsInfo.js';
import '../../../../../../context/AccessDeniedContext/AccessDeniedContext.js';
import '../../../../../../context/AccountExistsContext/AccountExistsContext.js';
import '../../../../../../context/UserWalletsContext/UserWalletsContext.js';
import '../../../../../../store/state/authMode/authMode.js';
import '../../../../../../context/VerificationContext/VerificationContext.js';
import 'react-dom';
import '../../../../../../utils/functions/compareChains/compareChains.js';
import '../../../../../../views/Passkey/utils/findPrimaryEmbeddedChain/findPrimaryEmbeddedChain.js';
import '../../../../../../context/ThemeContext/ThemeContext.js';
import '../../../../../../utils/hooks/useUserUpdateRequest/useUpdateUser/userFieldsSchema.js';
import 'bs58';
import '@dynamic-labs/types';
import '../../../../../../context/SocialRedirectContext/SocialRedirectContext.js';
import '../../../../../../context/LoadingContext/LoadingContext.js';
import '../../../../../../context/WalletContext/WalletContext.js';
import '../../../../../../utils/hooks/useEmbeddedWallet/useSecureEnclaveEmbeddedWallet/constants.js';
import 'yup';
import '../../../../../../context/MockContext/MockContext.js';
import '../../../../../../views/CollectUserDataView/useFields.js';
import '../../../../../../context/FieldsStateContext/FieldsStateContext.js';
import '../../../../../../context/UserFieldEditorContext/UserFieldEditorContext.js';
import '@dynamic-labs/rpc-providers';
import '../../../../../../store/state/walletOptions/walletOptions.js';
import 'react-i18next';
import '../../../../../../components/Accordion/components/AccordionItem/AccordionItem.js';
import '../../../../../../components/Alert/Alert.js';
import '../../../../../../components/ShadowDOM/ShadowDOM.js';
import '../../../../../../components/IconButton/IconButton.js';
import '../../../../../../components/InlineWidget/InlineWidget.js';
import '../../../../../../components/Input/Input.js';
import '../../../../../../components/IsBrowser/IsBrowser.js';
import '../../../../../../components/MenuList/Dropdown/Dropdown.js';
import '../../../../../../components/OverlayCard/OverlayCard.js';
import '../../../../../../components/Transition/ZoomTransition/ZoomTransition.js';
import '../../../../../../components/Transition/SlideInUpTransition/SlideInUpTransition.js';
import '../../../../../../components/Transition/OpacityTransition/OpacityTransition.js';
import '../../../../../../components/PasskeyCreatedSuccessBanner/PasskeyCreatedSuccessBanner.js';
import '../../../../../../components/Popper/Popper/Popper.js';
import '../../../../../../components/Popper/PopperContext/PopperContext.js';
import 'react-focus-lock';
import 'qrcode';
import { useFetchBalance } from '../../../../hooks/useFetchBalance/useFetchBalance.js';
import { useFetchCurrency } from '../../../../hooks/useFetchCurrency/useFetchCurrency.js';
import 'formik';
import '../../../../../../utils/hooks/useSubdomainCheck/useSubdomainCheck.js';
import '../../../../../../context/WalletGroupContext/WalletGroupContext.js';
import '../../../../../../context/IpConfigurationContext/IpConfigurationContext.js';
import '../../../../../../context/ConnectWithOtpContext/ConnectWithOtpContext.js';
import '../../../../../DynamicBridgeWidget/views/WalletsView/components/SecondaryWallets/SecondaryWallets.js';
import '@hcaptcha/react-hcaptcha';
import '../../../../context/DynamicWidgetContext.js';
import '../../../../helpers/convertExchangeKeyAndProviderEnum.js';
import '../../../../../../views/ExchangeWhitelistWarning/ExchangeWhitelistWarning.js';
import '../../../../../../context/ErrorContext/hooks/useErrorText/useErrorText.js';
import '../../../../../../context/FooterAnimationContext/index.js';
import '../../../../../../views/MfaChooseDeviceView/getMfaOptions/getMfaOptions.js';
import '../../../../../../context/PasskeyContext/PasskeyContext.js';
import '../../../../../../context/OnrampContext/OnrampContext.js';
import '../../../../../../store/state/sendBalances.js';
import '../../../../../../store/state/connectorsInitializing/connectorsInitializing.js';
import '../../../../../../components/OverlayCardBase/OverlayCardTarget/OverlayCardTarget.js';
import '../../../../components/DynamicWidgetHeader/DynamicWidgetHeader.js';
import '../../../../../../views/TransactionConfirmationView/TransactionConfirmationView.js';
import '../../../../components/PasskeyCard/PasskeyCard.js';
import '../../../../../../../index.js';
import '../../ReceiveWalletFunds.js';
import { useTokenBalances } from '../../../../../../utils/hooks/useTokenBalances/useTokenBalances.js';
import '../../../../../../store/state/multichainBalances.js';
import '../../../../../../shared/utils/functions/getInitialUrl/getInitialUrl.js';
import { useInternalDynamicContext } from '../../../../../../context/DynamicContext/useDynamicContext/useInternalDynamicContext/useInternalDynamicContext.js';
import { isFiatOrStablecoin } from '../isFiatToken/isFiatToken.js';

const useTokensForFunding = ({ wallet, networkId, }) => {
    var _a, _b;
    const { network } = useInternalDynamicContext();
    const { tokenBalances, isLoading: tokenBalancesLoading } = useTokenBalances({
        accountAddress: wallet === null || wallet === void 0 ? void 0 : wallet.address,
        chainName: wallet === null || wallet === void 0 ? void 0 : wallet.connector.connectedChain,
        includeFiat: true,
        includeNativeBalance: true,
    });
    const { currency, isLoading: currencyLoading } = useFetchCurrency(wallet === null || wallet === void 0 ? void 0 : wallet.connector, network);
    const { balance, isLoading: balanceLoading } = useFetchBalance({
        chain: currency === null || currency === void 0 ? void 0 : currency.symbol,
        network: networkId !== null && networkId !== void 0 ? networkId : network,
        wallet,
    });
    if (tokenBalancesLoading || currencyLoading || balanceLoading) {
        return {
            isLoading: true,
            tokens: [],
        };
    }
    const enabledNetworks = wallet === null || wallet === void 0 ? void 0 : wallet.connector.getEnabledNetworks();
    let parsedTokens = [];
    if (!tokenBalancesLoading) {
        parsedTokens = tokenBalances
            // Contrary to what the type says, symbol and name may be undefined
            .filter(({ symbol, balance, address }) => symbol && balance && address)
            .map(({ symbol, balance, name, logoURI, address, decimals, price, marketValue, }) => {
            const parsedBalance = parseFloat(balance.toString());
            // We use token balance for stablecoins to improve readability (user expectation is to be 1:1)
            let fiatBalance = isFiatOrStablecoin(symbol)
                ? parsedBalance
                : marketValue;
            if (fiatBalance === undefined && price)
                fiatBalance = price * parsedBalance;
            return {
                balance: parsedBalance,
                fiatBalance,
                logoURI,
                name: name !== null && name !== void 0 ? name : symbol,
                price,
                symbol,
                token: {
                    address,
                    decimals,
                },
            };
        });
    }
    if ((currency === null || currency === void 0 ? void 0 : currency.symbol) && parseFloat(balance !== null && balance !== void 0 ? balance : '0')) {
        const nativeToken = parsedTokens.find((token) => token.symbol === currency.symbol);
        if (nativeToken) {
            nativeToken.token = 'native';
            return {
                isLoading: false,
                tokens: parsedTokens,
            };
        }
        const logoURI = (_a = enabledNetworks === null || enabledNetworks === void 0 ? void 0 : enabledNetworks.find(({ chainId }) => chainId === network)) === null || _a === void 0 ? void 0 : _a.iconUrls[0];
        const fetchedToken = {
            balance: parseFloat(balance !== null && balance !== void 0 ? balance : '0'),
            fiatBalance: undefined,
            logoURI,
            name: (_b = currency.name) !== null && _b !== void 0 ? _b : currency.symbol,
            symbol: currency.symbol,
            token: 'native',
        };
        return {
            isLoading: false,
            tokens: [...parsedTokens, fetchedToken],
        };
    }
    return {
        isLoading: false,
        tokens: parsedTokens,
    };
};

export { useTokensForFunding };
