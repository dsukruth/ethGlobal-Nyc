'use client'
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('react/jsx-runtime');
var reactI18next = require('react-i18next');
var Icon = require('../../../../components/Icon/Icon.cjs');
var IconButton = require('../../../../components/IconButton/IconButton.cjs');
var ModalHeader = require('../../../../components/ModalHeader/ModalHeader.cjs');
var Typography = require('../../../../components/Typography/Typography.cjs');
var TypographyButton = require('../../../../components/TypographyButton/TypographyButton.cjs');
require('react');
var arrowLeft = require('../../../../shared/assets/arrow-left.cjs');
require('@dynamic-labs/iconic');
require('../../../../context/ViewContext/ViewContext.cjs');
var DynamicWidgetContext = require('../../context/DynamicWidgetContext.cjs');
var MakeTrailing = require('./MakeTrailing/MakeTrailing.cjs');
var useFundingMethods = require('./useFundingMethods/useFundingMethods.cjs');

const ChooseWalletFundingMethod = () => {
    const { goToInitialDynamicWidgetView } = DynamicWidgetContext.useWidgetContext();
    const { t } = reactI18next.useTranslation();
    const backButton = (jsxRuntime.jsx(IconButton.IconButton, { type: 'button', id: 'back-button', "data-testid": 'back-button', onClick: goToInitialDynamicWidgetView, children: jsxRuntime.jsx(arrowLeft.ReactComponent, {}) }));
    const methods = useFundingMethods.useFundingMethods();
    return (jsxRuntime.jsxs("div", { className: 'choose-wallet-funding-method', children: [jsxRuntime.jsx(ModalHeader.ModalHeader, { leading: backButton, children: jsxRuntime.jsx(Typography.Typography, { variant: 'title', copykey: 'dyn_wallet_funding.funding_method_selection.title', children: t('dyn_wallet_funding.funding_method_selection.title') }) }), jsxRuntime.jsx("div", { className: 'choose-wallet-funding-method__options', children: methods.map((method) => {
                    var _a;
                    return (jsxRuntime.jsx(TypographyButton.TypographyButton, { onClick: method.onClick, description: method.description, leading: jsxRuntime.jsx(Icon.Icon, { color: 'text-tertiary', className: 'choose-wallet-funding-method__options__option__icon', children: method.icon }), trailing: jsxRuntime.jsx(MakeTrailing.MakeTrailing, { previewIcons: (_a = method.previewIcons) !== null && _a !== void 0 ? _a : [], showChevron: Boolean(method.showChevron) }), typographyProps: { variant: 'body_normal', weight: 'medium' }, buttonVariant: 'card', className: 'choose-wallet-funding-method__options__option', children: method.label }, method.key));
                }) })] }));
};

exports.ChooseWalletFundingMethod = ChooseWalletFundingMethod;
