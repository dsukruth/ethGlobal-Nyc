'use client'
import { __awaiter } from '../../../../../../../../_virtual/_tslib.js';
import { useCallback } from 'react';
import '@dynamic-labs-sdk/client/core';
import '@dynamic-labs/sdk-api-core';
import '../../../../../../client/client.js';
import '@dynamic-labs-sdk/client';
import '@dynamic-labs/utils';
import '../../../../../../utils/constants/values.js';
import '@dynamic-labs/multi-wallet';
import { logger } from '../../../../../../shared/logger.js';
import '../../../../../../utils/constants/colors.js';
import 'react-international-phone';
import '@dynamic-labs/iconic';
import '@dynamic-labs/wallet-connector-core';
import 'react/jsx-runtime';
import '../../../../../../context/ViewContext/ViewContext.js';
import '@dynamic-labs/wallet-book';
import '../../../../../../shared/consts/index.js';
import '../../../../../../store/state/nonce/nonce.js';
import '../../../../../../config/ApiEndpoint.js';
import { useProjectSettings } from '../../../../../../store/state/projectSettings/projectSettings.js';
import '../../../../../../locale/locale.js';
import '../../../../../../store/state/dynamicContextProps/dynamicContextProps.js';
import '../../../../../../store/state/primaryWalletId/primaryWalletId.js';
import '../../../../../../store/state/connectedWalletsInfo/connectedWalletsInfo.js';
import '../../../../../../events/dynamicEvents.js';
import { useOnboardingCompleteUser } from '../../../../../../client/extension/user/useOnboardingCompleteUser/useOnboardingCompleteUser.js';
import { useOnrampContext } from '../../../../../../context/OnrampContext/OnrampContext.js';
import { getAuthMode } from '../../../../../../store/state/authMode/authMode.js';
import '../../../../../../context/DynamicContext/DynamicContext.js';
import '../../../../../../store/state/loadingAndLifecycle/loadingAndLifecycle.js';
import '../../../../../../context/CaptchaContext/CaptchaContext.js';
import '../../../../../../context/ErrorContext/ErrorContext.js';
import '../../../../../../context/AccessDeniedContext/AccessDeniedContext.js';
import '../../../../../../context/AccountExistsContext/AccountExistsContext.js';
import '../../../../../../context/UserWalletsContext/UserWalletsContext.js';
import '../../../../../../context/VerificationContext/VerificationContext.js';
import 'react-dom';
import '../../../../../../utils/functions/compareChains/compareChains.js';
import '../../../../../../views/Passkey/utils/findPrimaryEmbeddedChain/findPrimaryEmbeddedChain.js';
import '../../../../../../context/ThemeContext/ThemeContext.js';
import '../../../../../../utils/hooks/useUserUpdateRequest/useUpdateUser/userFieldsSchema.js';
import 'bs58';
import { useSocialAccounts } from '../../../../../../utils/hooks/useSocialAccounts/useSocialAccounts.js';
import 'yup';
import '../../../../../../context/MockContext/MockContext.js';
import '../../../../../../views/CollectUserDataView/useFields.js';
import '../../../../../../context/FieldsStateContext/FieldsStateContext.js';
import '../../../../../../context/UserFieldEditorContext/UserFieldEditorContext.js';
import '@dynamic-labs/rpc-providers';
import '../../../../../../store/state/walletOptions/walletOptions.js';
import 'react-i18next';
import '../../../../../../components/Accordion/components/AccordionItem/AccordionItem.js';
import '../../../../../../components/Alert/Alert.js';
import '../../../../../../context/WalletContext/WalletContext.js';
import '../../../../../../components/ShadowDOM/ShadowDOM.js';
import '../../../../../../components/IconButton/IconButton.js';
import '../../../../../../components/InlineWidget/InlineWidget.js';
import '../../../../../../components/Input/Input.js';
import '../../../../../../components/IsBrowser/IsBrowser.js';
import '../../../../../../components/MenuList/Dropdown/Dropdown.js';
import '../../../../../../components/OverlayCard/OverlayCard.js';
import '../../../../../../components/Transition/ZoomTransition/ZoomTransition.js';
import '../../../../../../components/Transition/SlideInUpTransition/SlideInUpTransition.js';
import '../../../../../../components/Transition/OpacityTransition/OpacityTransition.js';
import '../../../../../../components/PasskeyCreatedSuccessBanner/PasskeyCreatedSuccessBanner.js';
import '../../../../../../components/Popper/Popper/Popper.js';
import '../../../../../../components/Popper/PopperContext/PopperContext.js';
import 'react-focus-lock';
import 'qrcode';
import 'formik';
import '../../../../../../utils/hooks/useSubdomainCheck/useSubdomainCheck.js';
import '../../../../../../context/WalletGroupContext/WalletGroupContext.js';
import '../../../../../../context/IpConfigurationContext/IpConfigurationContext.js';
import '../../../../../../context/SocialRedirectContext/SocialRedirectContext.js';
import '../../../../../../context/ConnectWithOtpContext/ConnectWithOtpContext.js';
import '../../../../../DynamicBridgeWidget/views/WalletsView/components/SecondaryWallets/SecondaryWallets.js';
import '@hcaptcha/react-hcaptcha';
import '../../../../../../context/LoadingContext/LoadingContext.js';
import '../../../../context/DynamicWidgetContext.js';
import '../../../../helpers/convertExchangeKeyAndProviderEnum.js';
import '../../../../../../views/ExchangeWhitelistWarning/ExchangeWhitelistWarning.js';
import '../../../../../../context/ErrorContext/hooks/useErrorText/useErrorText.js';
import '../../../../../../context/FooterAnimationContext/index.js';
import '@dynamic-labs/types';
import '../../../../../../utils/hooks/useEmbeddedWallet/useSecureEnclaveEmbeddedWallet/constants.js';
import '../../../../../../views/MfaChooseDeviceView/getMfaOptions/getMfaOptions.js';
import '../../../../../../context/PasskeyContext/PasskeyContext.js';
import '../../../../../../store/state/sendBalances.js';
import '../../../../../../store/state/connectorsInitializing/connectorsInitializing.js';
import '../../../../../../components/OverlayCardBase/OverlayCardTarget/OverlayCardTarget.js';
import '../../../../components/DynamicWidgetHeader/DynamicWidgetHeader.js';
import '../../../../../../views/TransactionConfirmationView/TransactionConfirmationView.js';
import '../../../../components/PasskeyCard/PasskeyCard.js';
import '../../../../../../../index.js';
import '../../../ReceiveWalletFunds/ReceiveWalletFunds.js';
import '../../../../../../store/state/tokenBalances.js';
import '../../../../../../store/state/multichainBalances.js';
import '../../../../../../shared/utils/functions/getInitialUrl/getInitialUrl.js';
import { useConnectExchangeForFunding } from '../../../../../../utils/hooks/useConnectExchangeForFunding/useConnectExchangeForFunding.js';
import { usePromptAmountAndFundWithExchange } from '../../../../../../utils/hooks/usePromptAndFundWithExchange/usePromptAndFundWithExchange.js';

const useStartExchangeFunding = () => {
    const connectExchangeForFunding = useConnectExchangeForFunding();
    const user = useOnboardingCompleteUser();
    const { linkSocialAccount } = useSocialAccounts();
    const promptAmountAndFundWithExchange = usePromptAmountAndFundWithExchange();
    const { openOnramp } = useOnrampContext();
    const projectSettings = useProjectSettings();
    const startExchangeFunding = useCallback(() => __awaiter(void 0, void 0, void 0, function* () {
        var _a, _b, _c, _d;
        const authMode = getAuthMode();
        try {
            let exchange;
            if ((projectSettings === null || projectSettings === void 0 ? void 0 : projectSettings.exchanges) &&
                ((_a = projectSettings === null || projectSettings === void 0 ? void 0 : projectSettings.exchanges) === null || _a === void 0 ? void 0 : _a.length) > 1) {
                exchange = yield connectExchangeForFunding({
                    initiatedByWidget: true,
                });
            }
            else if (projectSettings === null || projectSettings === void 0 ? void 0 : projectSettings.exchanges) {
                exchange = projectSettings === null || projectSettings === void 0 ? void 0 : projectSettings.exchanges[0].exchange;
            }
            else {
                return;
            }
            const fullExchange = projectSettings.exchanges.find((e) => e.exchange === exchange);
            const provider = fullExchange === null || fullExchange === void 0 ? void 0 : fullExchange.socialProvider;
            const connectedSocial = (_c = (_b = user === null || user === void 0 ? void 0 : user.verifiedCredentials) === null || _b === void 0 ? void 0 : _b.some(({ oauthProvider }) => oauthProvider === provider)) !== null && _c !== void 0 ? _c : false;
            const connectThoughSocial = provider &&
                (projectSettings === null || projectSettings === void 0 ? void 0 : projectSettings.providers) &&
                (((_d = projectSettings.providers.find((p) => p.provider === provider)) === null || _d === void 0 ? void 0 : _d.enabledAt) ||
                    connectedSocial);
            if (connectThoughSocial) {
                if (!connectedSocial) {
                    yield linkSocialAccount(provider, {
                        triggerFundFromExchangeOnSuccess: exchange,
                    });
                }
                else {
                    promptAmountAndFundWithExchange({ exchange });
                }
            }
            else if (fullExchange === null || fullExchange === void 0 ? void 0 : fullExchange.onRampProvider) {
                yield openOnramp({
                    onrampProvider: fullExchange === null || fullExchange === void 0 ? void 0 : fullExchange.onRampProvider,
                    overrideOnRamp: true,
                });
            }
        }
        catch (error) {
            logger.error('Error while attempting to connect exchange for funding.', {
                authMode,
                error,
                userId: user === null || user === void 0 ? void 0 : user.id,
            });
        }
    }), [
        projectSettings === null || projectSettings === void 0 ? void 0 : projectSettings.exchanges,
        projectSettings === null || projectSettings === void 0 ? void 0 : projectSettings.providers,
        connectExchangeForFunding,
        user === null || user === void 0 ? void 0 : user.verifiedCredentials,
        user === null || user === void 0 ? void 0 : user.id,
        linkSocialAccount,
        promptAmountAndFundWithExchange,
        openOnramp,
    ]);
    return {
        startExchangeFunding,
    };
};

export { useStartExchangeFunding };
