import { Account, ExchangeKeyEnum } from '@dynamic-labs/sdk-api-core';
import { Wallet } from '../../../../shared/types/wallets';
export type FundingTokenData = {
    name: string;
    symbol: string;
    balance: number;
    fiatBalance: number | undefined;
    logoURI: string | undefined;
    price?: number;
    token: 'native' | {
        address: string;
        decimals?: number;
    };
};
/**
 * Rule over how the user can input the amount.
 *
 * - `exact` means the user cannot change the amount.
 * - `minimum` means the user can input any amount greater than the minimum amount.
 * - `recommended` means the user can input any amount, though it is initially set to the recommended amount.
 *
 * When set to recommended or left empty, quick suggestions are shown.
 */
export type FundingAmountRule = 'exact' | 'minimum' | 'recommended';
/**
 * Rule over how the user can toggle the current token.
 *
 * - `exact` means the user cannot change the token.
 * - `recommended` means the user can change the token though it is initially set to the recommended token.
 * - `exact-with-amount` same as `exact`, but the amount now refers to the token amount instead of the fiat amount.
 */
export type FundingTokenRule = 'exact' | 'recommended' | 'exact-with-amount';
export type FiatToken = 'USD';
export type ReceiveWalletFundsProps = {
    wallet?: Wallet;
    /**
     * Configure the amount input.
     *
     * - `value` is the amount to display.
     * - `rule` is the rule over how the specified amount can be changed by the user.
     *
     * The value refers to the fiat amount by default, but if token.rule is set to `exact-with-amount`,
     * the value then refers to the token amount instead.
     */
    amount?: {
        /**
         * The amount to display.
         *
         * The amount is in fiat by default, but if token.rule is set to `exact-with-amount`,
         * the amount then refers to the token instead.
         */
        value: number;
        /**
         * Rule over how the user can input the amount.
         *
         * - `exact` means the user cannot change the amount.
         * - `minimum` means the user can input any amount greater than the minimum amount.
         * - `recommended` means the user can input any amount, though it is initially set to the recommended amount.
         *
         * When set to recommended or left empty, quick suggestions are shown.
         */
        rule: FundingAmountRule;
    };
    token?: {
        /**
         * The token to be purchased.
         */
        value: string;
        /**
         * Rule over how the user can toggle the current token being purchased.
         *
         * - `exact` means the user cannot change the token.
         * - `recommended` means the user can change the token though it is initially set to the recommended token.
         * - `exact-with-amount` same as `exact`, but the amount now refers to the token amount instead of the fiat amount.
         */
        rule: FundingTokenRule;
    };
    /**
     * The exchange that is connected for funding if applicable
     */
    exchange?: ExchangeKeyEnum;
    /**
     * True if funding with an exchange and false if funding with wallet
     */
    fundingWithExchange?: boolean;
    /**
     * Accounts associated with exchange
     */
    accounts?: Account[];
    /**
     * The address to send funds to
     */
    destinationAddress?: string;
    /**
     * The netowrk to sends funds on
     */
    network?: string | number;
    /**
     * Quick suggestions for the amount input.
     *
     * If an array is passed directly, uses $ (USD) as the token.
     *
     * If a token is provided, but doesn't correspond to the selected token, quick suggestions will NOT be shown.
     */
    quickSuggestions?: number[] | {
        token: string;
        values: number[];
    };
    /**
     * A function for what to do when the user selects the back button
     */
    onBack?: () => void;
    /**
     * If this prop is true then hide the back button. Instead show a close button
     */
    hideBackButton?: boolean;
};
