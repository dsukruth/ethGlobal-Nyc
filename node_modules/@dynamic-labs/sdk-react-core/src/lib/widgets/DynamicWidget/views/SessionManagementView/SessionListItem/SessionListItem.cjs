'use client'
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('react/jsx-runtime');
var React = require('react');
var reactI18next = require('react-i18next');
var Typography = require('../../../../../components/Typography/Typography.cjs');
var TypographyButton = require('../../../../../components/TypographyButton/TypographyButton.cjs');
var getSessionInformation = require('../../../../../utils/functions/getSessionInformation/getSessionInformation.cjs');
require('@dynamic-labs/utils');
require('../../../../../components/Accordion/components/AccordionItem/AccordionItem.cjs');
var AccordionToggle = require('../../../../../components/Accordion/components/AccordionToggle/AccordionToggle.cjs');
require('../../../../../components/Alert/Alert.cjs');
require('../../../../../events/dynamicEvents.cjs');
require('../../../../../../../_virtual/_tslib.cjs');
require('../../../../../context/DynamicContext/DynamicContext.cjs');
require('../../../../../store/state/loadingAndLifecycle/loadingAndLifecycle.cjs');
require('@dynamic-labs/sdk-api-core');
require('../../../../../shared/logger.cjs');
require('@dynamic-labs/iconic');
require('@dynamic-labs/wallet-connector-core');
require('../../../../../context/ViewContext/ViewContext.cjs');
require('@dynamic-labs/wallet-book');
require('../../../../../utils/constants/colors.cjs');
require('../../../../../utils/constants/values.cjs');
require('../../../../../shared/consts/index.cjs');
require('../../../../../store/state/authMode/authMode.cjs');
require('../../../../../context/CaptchaContext/CaptchaContext.cjs');
require('../../../../../context/ErrorContext/ErrorContext.cjs');
require('@dynamic-labs/multi-wallet');
require('react-international-phone');
require('../../../../../store/state/nonce/nonce.cjs');
require('@dynamic-labs-sdk/client/core');
require('../../../../../client/client.cjs');
require('@dynamic-labs-sdk/client');
require('../../../../../store/state/projectSettings/projectSettings.cjs');
require('../../../../../config/ApiEndpoint.cjs');
require('../../../../../locale/locale.cjs');
require('../../../../../store/state/dynamicContextProps/dynamicContextProps.cjs');
require('../../../../../store/state/primaryWalletId/primaryWalletId.cjs');
require('../../../../../store/state/connectedWalletsInfo/connectedWalletsInfo.cjs');
require('../../../../../context/AccessDeniedContext/AccessDeniedContext.cjs');
require('../../../../../context/AccountExistsContext/AccountExistsContext.cjs');
require('../../../../../context/UserWalletsContext/UserWalletsContext.cjs');
require('../../../../../context/VerificationContext/VerificationContext.cjs');
require('react-dom');
require('../../../../../utils/functions/compareChains/compareChains.cjs');
require('../../../../../views/Passkey/utils/findPrimaryEmbeddedChain/findPrimaryEmbeddedChain.cjs');
require('../../../../../context/ThemeContext/ThemeContext.cjs');
require('../../../../../utils/hooks/useUserUpdateRequest/useUpdateUser/userFieldsSchema.cjs');
require('bs58');
require('@dynamic-labs/types');
require('../../../../../context/SocialRedirectContext/SocialRedirectContext.cjs');
require('../../../../../context/LoadingContext/LoadingContext.cjs');
require('../../../../../context/WalletContext/WalletContext.cjs');
require('../../../../../utils/hooks/useEmbeddedWallet/useSecureEnclaveEmbeddedWallet/constants.cjs');
require('yup');
require('../../../../../context/MockContext/MockContext.cjs');
require('../../../../../views/CollectUserDataView/useFields.cjs');
require('../../../../../context/FieldsStateContext/FieldsStateContext.cjs');
require('../../../../../context/UserFieldEditorContext/UserFieldEditorContext.cjs');
require('@dynamic-labs/rpc-providers');
require('../../../../../store/state/walletOptions/walletOptions.cjs');
require('../../../../../context/FooterAnimationContext/index.cjs');
require('../../../../../components/ShadowDOM/ShadowDOM.cjs');
require('../../../../../components/Transition/ZoomTransition/ZoomTransition.cjs');
require('../../../../../components/Transition/SlideInUpTransition/SlideInUpTransition.cjs');
require('../../../../../components/Transition/OpacityTransition/OpacityTransition.cjs');
require('../../../../../components/OverlayCardBase/OverlayCardTarget/OverlayCardTarget.cjs');
require('../../../../../context/WalletGroupContext/WalletGroupContext.cjs');
require('../../../components/DynamicWidgetHeader/DynamicWidgetHeader.cjs');
require('react-focus-lock');
require('../../../context/DynamicWidgetContext.cjs');
require('../../../../../components/IconButton/IconButton.cjs');
require('../../../../../components/MenuList/Dropdown/Dropdown.cjs');
require('formik');
require('../../../../../utils/hooks/useSubdomainCheck/useSubdomainCheck.cjs');
require('../../../../../store/state/sendBalances.cjs');
require('../../../../../components/Input/Input.cjs');
require('../../../../../components/OverlayCard/OverlayCard.cjs');
require('../../../../../views/TransactionConfirmationView/TransactionConfirmationView.cjs');
require('../../../../../components/PasskeyCreatedSuccessBanner/PasskeyCreatedSuccessBanner.cjs');
require('../../../../../context/PasskeyContext/PasskeyContext.cjs');
require('../../../components/PasskeyCard/PasskeyCard.cjs');
require('../../../../../context/OnrampContext/OnrampContext.cjs');
require('../../../../../../index.cjs');
require('../../../helpers/convertExchangeKeyAndProviderEnum.cjs');
require('qrcode');
require('../../ReceiveWalletFunds/ReceiveWalletFunds.cjs');
require('../../../../../context/IpConfigurationContext/IpConfigurationContext.cjs');
require('../../../../../context/ConnectWithOtpContext/ConnectWithOtpContext.cjs');
require('../../../../DynamicBridgeWidget/views/WalletsView/components/SecondaryWallets/SecondaryWallets.cjs');
require('@hcaptcha/react-hcaptcha');
require('../../../../../views/ExchangeWhitelistWarning/ExchangeWhitelistWarning.cjs');
require('../../../../../context/ErrorContext/hooks/useErrorText/useErrorText.cjs');
require('../../../../../views/MfaChooseDeviceView/getMfaOptions/getMfaOptions.cjs');
require('../../../../../store/state/connectorsInitializing/connectorsInitializing.cjs');
require('../../../../../store/state/tokenBalances.cjs');
require('../../../../../store/state/multichainBalances.cjs');
require('../../../../../shared/utils/functions/getInitialUrl/getInitialUrl.cjs');
require('../../../../../components/InlineWidget/InlineWidget.cjs');
require('../../../../../components/IsBrowser/IsBrowser.cjs');
require('../../../../../components/Popper/Popper/Popper.cjs');
require('../../../../../components/Popper/PopperContext/PopperContext.cjs');

const SessionListItem = ({ session, onRevokeAccessClick, }) => {
    const { t } = reactI18next.useTranslation();
    const [isExpanded, setIsExpanded] = React.useState(false);
    const handleRevokeAccess = React.useCallback(() => {
        onRevokeAccessClick(session);
    }, [onRevokeAccessClick, session]);
    const toggleExpanded = React.useCallback(() => {
        setIsExpanded((prev) => !prev);
    }, []);
    const sessionName = getSessionInformation.getSessionInformationName(session);
    const spendingLimit = getSessionInformation.getSessionInformationSpendingLimit(session);
    const timeToExpiration = getSessionInformation.getSessionInformationExpiration(session);
    const timeSinceCreation = getSessionInformation.getSessionInformationTimeSinceCreation(session);
    return (jsxRuntime.jsxs("div", { className: 'session-management-session', children: [jsxRuntime.jsxs("div", { className: 'session-management-session__main', children: [jsxRuntime.jsx(Typography.Typography, { variant: 'body_normal', children: getSessionInformation.getSessionInformationName(session) }), jsxRuntime.jsx(TypographyButton.TypographyButton, { onClick: handleRevokeAccess, copykey: 'dyn_session_management.session_component.revoke_button', children: t('dyn_session_management.session_component.revoke_button') })] }), jsxRuntime.jsxs("div", { className: 'session-management-session__permissions-accordion', children: [jsxRuntime.jsx(AccordionToggle.AccordionToggle, { isOpen: isExpanded, onClick: toggleExpanded, className: 'session-management-session__permissions-toggle', children: jsxRuntime.jsx(Typography.Typography, { variant: 'body_small', copykey: 'dyn_session_management.session_component.permission_details', children: t('dyn_session_management.session_component.permission_details') }) }), isExpanded && (jsxRuntime.jsxs("div", { className: 'session-management-session__permissions', children: [jsxRuntime.jsx("div", { className: 'session-management-session__permissions-header', children: jsxRuntime.jsx(Typography.Typography, { variant: 'body_small', children: sessionName }) }), jsxRuntime.jsx("div", { className: 'session-management-session__permissions-body', children: jsxRuntime.jsx(Typography.Typography, { variant: 'body_small', color: 'secondary', copykey: 'dyn_session_permissions.connected', children: t('dyn_session_permissions.connected', {
                                        time: timeSinceCreation,
                                    }) }) }), jsxRuntime.jsx("div", { className: 'session-management-session__permissions-header', children: jsxRuntime.jsx(Typography.Typography, { variant: 'body_small', copykey: 'dyn_session_permissions.permissions_label', children: t('dyn_session_permissions.permissions_label') }) }), jsxRuntime.jsx("div", { className: 'session-management-session__permissions-body', children: jsxRuntime.jsxs("ul", { className: 'session-management-session__permissions-list', children: [jsxRuntime.jsx("li", { children: jsxRuntime.jsx(Typography.Typography, { variant: 'body_small', color: 'secondary', copykey: 'dyn_session_permissions.permissions.ownership', children: t('dyn_session_permissions.permissions.ownership') }) }), jsxRuntime.jsx("li", { children: jsxRuntime.jsx(Typography.Typography, { variant: 'body_small', color: 'secondary', copykey: 'dyn_session_permissions.permissions.access', children: t('dyn_session_permissions.permissions.access', {
                                                    time: timeToExpiration,
                                                }) }) })] }) }), jsxRuntime.jsx("div", { className: 'session-management-session__permissions-header', children: jsxRuntime.jsx(Typography.Typography, { variant: 'body_small', copykey: 'dyn_session_permissions.spending_label', children: t('dyn_session_permissions.spending_label') }) }), jsxRuntime.jsx("div", { className: 'session-management-session__permissions-body', children: jsxRuntime.jsx(Typography.Typography, { variant: 'body_small', color: 'secondary', children: spendingLimit }) })] }))] })] }));
};

exports.SessionListItem = SessionListItem;
