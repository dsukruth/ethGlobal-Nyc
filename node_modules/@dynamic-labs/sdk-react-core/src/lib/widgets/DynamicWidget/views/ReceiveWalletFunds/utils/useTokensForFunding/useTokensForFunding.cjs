'use client'
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

require('react');
require('../../../../../../context/DynamicContext/DynamicContext.cjs');
require('../../../../../../store/state/loadingAndLifecycle/loadingAndLifecycle.cjs');
require('@dynamic-labs/sdk-api-core');
require('../../../../../../shared/logger.cjs');
require('@dynamic-labs/iconic');
require('@dynamic-labs/wallet-connector-core');
require('react/jsx-runtime');
require('../../../../../../context/ViewContext/ViewContext.cjs');
require('@dynamic-labs/wallet-book');
require('@dynamic-labs/utils');
require('../../../../../../utils/constants/colors.cjs');
require('../../../../../../utils/constants/values.cjs');
require('../../../../../../shared/consts/index.cjs');
require('../../../../../../events/dynamicEvents.cjs');
require('../../../../../../../../_virtual/_tslib.cjs');
require('../../../../../../context/CaptchaContext/CaptchaContext.cjs');
require('../../../../../../context/ErrorContext/ErrorContext.cjs');
require('@dynamic-labs/multi-wallet');
require('react-international-phone');
require('../../../../../../store/state/nonce/nonce.cjs');
require('@dynamic-labs-sdk/client/core');
require('../../../../../../client/client.cjs');
require('@dynamic-labs-sdk/client');
require('../../../../../../store/state/projectSettings/projectSettings.cjs');
require('../../../../../../config/ApiEndpoint.cjs');
require('../../../../../../locale/locale.cjs');
require('../../../../../../store/state/dynamicContextProps/dynamicContextProps.cjs');
require('../../../../../../store/state/primaryWalletId/primaryWalletId.cjs');
require('../../../../../../store/state/connectedWalletsInfo/connectedWalletsInfo.cjs');
require('../../../../../../context/AccessDeniedContext/AccessDeniedContext.cjs');
require('../../../../../../context/AccountExistsContext/AccountExistsContext.cjs');
require('../../../../../../context/UserWalletsContext/UserWalletsContext.cjs');
require('../../../../../../store/state/authMode/authMode.cjs');
require('../../../../../../context/VerificationContext/VerificationContext.cjs');
require('react-dom');
require('../../../../../../utils/functions/compareChains/compareChains.cjs');
require('../../../../../../views/Passkey/utils/findPrimaryEmbeddedChain/findPrimaryEmbeddedChain.cjs');
require('../../../../../../context/ThemeContext/ThemeContext.cjs');
require('../../../../../../utils/hooks/useUserUpdateRequest/useUpdateUser/userFieldsSchema.cjs');
require('bs58');
require('@dynamic-labs/types');
require('../../../../../../context/SocialRedirectContext/SocialRedirectContext.cjs');
require('../../../../../../context/LoadingContext/LoadingContext.cjs');
require('../../../../../../context/WalletContext/WalletContext.cjs');
require('../../../../../../utils/hooks/useEmbeddedWallet/useSecureEnclaveEmbeddedWallet/constants.cjs');
require('yup');
require('../../../../../../context/MockContext/MockContext.cjs');
require('../../../../../../views/CollectUserDataView/useFields.cjs');
require('../../../../../../context/FieldsStateContext/FieldsStateContext.cjs');
require('../../../../../../context/UserFieldEditorContext/UserFieldEditorContext.cjs');
require('@dynamic-labs/rpc-providers');
require('../../../../../../store/state/walletOptions/walletOptions.cjs');
require('react-i18next');
require('../../../../../../components/Accordion/components/AccordionItem/AccordionItem.cjs');
require('../../../../../../components/Alert/Alert.cjs');
require('../../../../../../components/ShadowDOM/ShadowDOM.cjs');
require('../../../../../../components/IconButton/IconButton.cjs');
require('../../../../../../components/InlineWidget/InlineWidget.cjs');
require('../../../../../../components/Input/Input.cjs');
require('../../../../../../components/IsBrowser/IsBrowser.cjs');
require('../../../../../../components/MenuList/Dropdown/Dropdown.cjs');
require('../../../../../../components/OverlayCard/OverlayCard.cjs');
require('../../../../../../components/Transition/ZoomTransition/ZoomTransition.cjs');
require('../../../../../../components/Transition/SlideInUpTransition/SlideInUpTransition.cjs');
require('../../../../../../components/Transition/OpacityTransition/OpacityTransition.cjs');
require('../../../../../../components/PasskeyCreatedSuccessBanner/PasskeyCreatedSuccessBanner.cjs');
require('../../../../../../components/Popper/Popper/Popper.cjs');
require('../../../../../../components/Popper/PopperContext/PopperContext.cjs');
require('react-focus-lock');
require('qrcode');
var useFetchBalance = require('../../../../hooks/useFetchBalance/useFetchBalance.cjs');
var useFetchCurrency = require('../../../../hooks/useFetchCurrency/useFetchCurrency.cjs');
require('formik');
require('../../../../../../utils/hooks/useSubdomainCheck/useSubdomainCheck.cjs');
require('../../../../../../context/WalletGroupContext/WalletGroupContext.cjs');
require('../../../../../../context/IpConfigurationContext/IpConfigurationContext.cjs');
require('../../../../../../context/ConnectWithOtpContext/ConnectWithOtpContext.cjs');
require('../../../../../DynamicBridgeWidget/views/WalletsView/components/SecondaryWallets/SecondaryWallets.cjs');
require('@hcaptcha/react-hcaptcha');
require('../../../../context/DynamicWidgetContext.cjs');
require('../../../../helpers/convertExchangeKeyAndProviderEnum.cjs');
require('../../../../../../views/ExchangeWhitelistWarning/ExchangeWhitelistWarning.cjs');
require('../../../../../../context/ErrorContext/hooks/useErrorText/useErrorText.cjs');
require('../../../../../../context/FooterAnimationContext/index.cjs');
require('../../../../../../views/MfaChooseDeviceView/getMfaOptions/getMfaOptions.cjs');
require('../../../../../../context/PasskeyContext/PasskeyContext.cjs');
require('../../../../../../context/OnrampContext/OnrampContext.cjs');
require('../../../../../../store/state/sendBalances.cjs');
require('../../../../../../store/state/connectorsInitializing/connectorsInitializing.cjs');
require('../../../../../../components/OverlayCardBase/OverlayCardTarget/OverlayCardTarget.cjs');
require('../../../../components/DynamicWidgetHeader/DynamicWidgetHeader.cjs');
require('../../../../../../views/TransactionConfirmationView/TransactionConfirmationView.cjs');
require('../../../../components/PasskeyCard/PasskeyCard.cjs');
require('../../../../../../../index.cjs');
require('../../ReceiveWalletFunds.cjs');
var useTokenBalances = require('../../../../../../utils/hooks/useTokenBalances/useTokenBalances.cjs');
require('../../../../../../store/state/multichainBalances.cjs');
require('../../../../../../shared/utils/functions/getInitialUrl/getInitialUrl.cjs');
var useInternalDynamicContext = require('../../../../../../context/DynamicContext/useDynamicContext/useInternalDynamicContext/useInternalDynamicContext.cjs');
var isFiatToken = require('../isFiatToken/isFiatToken.cjs');

const useTokensForFunding = ({ wallet, networkId, }) => {
    var _a, _b;
    const { network } = useInternalDynamicContext.useInternalDynamicContext();
    const { tokenBalances, isLoading: tokenBalancesLoading } = useTokenBalances.useTokenBalances({
        accountAddress: wallet === null || wallet === void 0 ? void 0 : wallet.address,
        chainName: wallet === null || wallet === void 0 ? void 0 : wallet.connector.connectedChain,
        includeFiat: true,
        includeNativeBalance: true,
    });
    const { currency, isLoading: currencyLoading } = useFetchCurrency.useFetchCurrency(wallet === null || wallet === void 0 ? void 0 : wallet.connector, network);
    const { balance, isLoading: balanceLoading } = useFetchBalance.useFetchBalance({
        chain: currency === null || currency === void 0 ? void 0 : currency.symbol,
        network: networkId !== null && networkId !== void 0 ? networkId : network,
        wallet,
    });
    if (tokenBalancesLoading || currencyLoading || balanceLoading) {
        return {
            isLoading: true,
            tokens: [],
        };
    }
    const enabledNetworks = wallet === null || wallet === void 0 ? void 0 : wallet.connector.getEnabledNetworks();
    let parsedTokens = [];
    if (!tokenBalancesLoading) {
        parsedTokens = tokenBalances
            // Contrary to what the type says, symbol and name may be undefined
            .filter(({ symbol, balance, address }) => symbol && balance && address)
            .map(({ symbol, balance, name, logoURI, address, decimals, price, marketValue, }) => {
            const parsedBalance = parseFloat(balance.toString());
            // We use token balance for stablecoins to improve readability (user expectation is to be 1:1)
            let fiatBalance = isFiatToken.isFiatOrStablecoin(symbol)
                ? parsedBalance
                : marketValue;
            if (fiatBalance === undefined && price)
                fiatBalance = price * parsedBalance;
            return {
                balance: parsedBalance,
                fiatBalance,
                logoURI,
                name: name !== null && name !== void 0 ? name : symbol,
                price,
                symbol,
                token: {
                    address,
                    decimals,
                },
            };
        });
    }
    if ((currency === null || currency === void 0 ? void 0 : currency.symbol) && parseFloat(balance !== null && balance !== void 0 ? balance : '0')) {
        const nativeToken = parsedTokens.find((token) => token.symbol === currency.symbol);
        if (nativeToken) {
            nativeToken.token = 'native';
            return {
                isLoading: false,
                tokens: parsedTokens,
            };
        }
        const logoURI = (_a = enabledNetworks === null || enabledNetworks === void 0 ? void 0 : enabledNetworks.find(({ chainId }) => chainId === network)) === null || _a === void 0 ? void 0 : _a.iconUrls[0];
        const fetchedToken = {
            balance: parseFloat(balance !== null && balance !== void 0 ? balance : '0'),
            fiatBalance: undefined,
            logoURI,
            name: (_b = currency.name) !== null && _b !== void 0 ? _b : currency.symbol,
            symbol: currency.symbol,
            token: 'native',
        };
        return {
            isLoading: false,
            tokens: [...parsedTokens, fetchedToken],
        };
    }
    return {
        isLoading: false,
        tokens: parsedTokens,
    };
};

exports.useTokensForFunding = useTokensForFunding;
