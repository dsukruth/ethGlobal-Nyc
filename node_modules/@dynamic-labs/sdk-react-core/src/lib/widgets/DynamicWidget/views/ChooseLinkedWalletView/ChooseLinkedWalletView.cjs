'use client'
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('react/jsx-runtime');
var reactI18next = require('react-i18next');
var IconButton = require('../../../../components/IconButton/IconButton.cjs');
var ModalHeader = require('../../../../components/ModalHeader/ModalHeader.cjs');
var Typography = require('../../../../components/Typography/Typography.cjs');
var UserWalletsList = require('../../../../components/UserWalletsList/UserWalletsList.cjs');
require('react');
var arrowLeft = require('../../../../shared/assets/arrow-left.cjs');
require('@dynamic-labs/iconic');
require('../../../../context/ViewContext/ViewContext.cjs');
var DynamicWidgetContext = require('../../context/DynamicWidgetContext.cjs');

const ChooseLinkedWalletView = ({ showBackButton = true, onSelectWallet, wallets, }) => {
    const { setDynamicWidgetView } = DynamicWidgetContext.useWidgetContext();
    const { t } = reactI18next.useTranslation();
    const backButton = showBackButton ? (jsxRuntime.jsx(IconButton.IconButton, { type: 'button', id: 'back-button', "data-testid": 'back-button', onClick: () => setDynamicWidgetView('choose-wallet-funding-method'), children: jsxRuntime.jsx(arrowLeft.ReactComponent, {}) })) : undefined;
    return (jsxRuntime.jsxs("div", { className: 'choose-linked-wallet-view', children: [jsxRuntime.jsx(ModalHeader.ModalHeader, { leading: backButton, children: jsxRuntime.jsx(Typography.Typography, { variant: 'title', copykey: 'dyn_wallet_funding.from_linked_wallet.title', children: t('dyn_wallet_funding.from_linked_wallet.title') }) }), jsxRuntime.jsx(UserWalletsList.UserWalletsList, { onSelectWallet: onSelectWallet, wallets: wallets })] }));
};

exports.ChooseLinkedWalletView = ChooseLinkedWalletView;
