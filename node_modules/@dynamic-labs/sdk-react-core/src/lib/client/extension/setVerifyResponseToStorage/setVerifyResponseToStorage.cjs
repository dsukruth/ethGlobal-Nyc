'use client'
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var utils = require('@dynamic-labs/utils');
var projectSettings = require('../../../store/state/projectSettings/projectSettings.cjs');
require('@dynamic-labs/sdk-api-core');
var localStorage = require('../../../utils/constants/localStorage.cjs');
require('../../../utils/constants/colors.cjs');
var values = require('../../../utils/constants/values.cjs');
require('../../../../../_virtual/_tslib.cjs');
require('@dynamic-labs/multi-wallet');
require('../../../shared/logger.cjs');
require('react-international-phone');
require('@dynamic-labs/iconic');
require('@dynamic-labs/wallet-connector-core');
require('react');
require('react/jsx-runtime');
require('../../../context/ViewContext/ViewContext.cjs');
require('@dynamic-labs/wallet-book');
require('../../../shared/consts/index.cjs');
require('../../../store/state/nonce/nonce.cjs');
var isCookieEnabled = require('../../../utils/functions/isCookieEnabled/isCookieEnabled.cjs');
require('@dynamic-labs-sdk/client/core');
require('../../client.cjs');
require('@dynamic-labs-sdk/client');
require('../../../events/dynamicEvents.cjs');
require('../../../config/ApiEndpoint.cjs');
require('../../../locale/locale.cjs');
require('../../../store/state/dynamicContextProps/dynamicContextProps.cjs');
require('../../../store/state/primaryWalletId/primaryWalletId.cjs');
require('../../../store/state/connectedWalletsInfo/connectedWalletsInfo.cjs');

const setVerifyResponseToStorage = ({ expiresAt, jwt, minifiedJwt, }) => {
    // expiresAt is always sent back by the backend, regardless of whether jwt/minifiedJwt are sent or not
    if (expiresAt !== undefined) {
        utils.StorageService.setItem(localStorage.AUTH_EXPIRES_AT, expiresAt);
    }
    if (jwt && minifiedJwt) {
        utils.StorageService.setItem(localStorage.AUTH_TOKEN, jwt, {
            priority: ['secureStorage', 'localStorage'],
        });
        utils.StorageService.setItem(localStorage.AUTH_MIN_TOKEN, minifiedJwt, {
            priority: ['secureStorage', 'localStorage'],
        });
        const projectSettings$1 = projectSettings.getProjectSettings();
        if (projectSettings$1 && isCookieEnabled.isCookieEnabled(projectSettings$1)) {
            // if cookie is enabled, but the backend returns a JWT, then use JS to store the cookie
            const expireDate = new Date(expiresAt * 1000).toUTCString();
            const authCookie = `${values.DYNAMIC_AUTH_COOKIE_NAME}=${minifiedJwt}; expires=${expireDate}; path=/; SameSite=Lax`;
            document.cookie = authCookie;
        }
    }
};

exports.setVerifyResponseToStorage = setVerifyResponseToStorage;
