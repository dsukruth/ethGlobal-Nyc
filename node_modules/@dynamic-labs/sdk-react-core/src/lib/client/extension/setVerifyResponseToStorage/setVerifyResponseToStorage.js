'use client'
import { StorageService } from '@dynamic-labs/utils';
import { getProjectSettings } from '../../../store/state/projectSettings/projectSettings.js';
import '@dynamic-labs/sdk-api-core';
import { AUTH_EXPIRES_AT, AUTH_TOKEN, AUTH_MIN_TOKEN } from '../../../utils/constants/localStorage.js';
import '../../../utils/constants/colors.js';
import { DYNAMIC_AUTH_COOKIE_NAME } from '../../../utils/constants/values.js';
import '../../../../../_virtual/_tslib.js';
import '@dynamic-labs/multi-wallet';
import '../../../shared/logger.js';
import 'react-international-phone';
import '@dynamic-labs/iconic';
import '@dynamic-labs/wallet-connector-core';
import 'react';
import 'react/jsx-runtime';
import '../../../context/ViewContext/ViewContext.js';
import '@dynamic-labs/wallet-book';
import '../../../shared/consts/index.js';
import '../../../store/state/nonce/nonce.js';
import { isCookieEnabled } from '../../../utils/functions/isCookieEnabled/isCookieEnabled.js';
import '@dynamic-labs-sdk/client/core';
import '../../client.js';
import '@dynamic-labs-sdk/client';
import '../../../events/dynamicEvents.js';
import '../../../config/ApiEndpoint.js';
import '../../../locale/locale.js';
import '../../../store/state/dynamicContextProps/dynamicContextProps.js';
import '../../../store/state/primaryWalletId/primaryWalletId.js';
import '../../../store/state/connectedWalletsInfo/connectedWalletsInfo.js';

const setVerifyResponseToStorage = ({ expiresAt, jwt, minifiedJwt, }) => {
    // expiresAt is always sent back by the backend, regardless of whether jwt/minifiedJwt are sent or not
    if (expiresAt !== undefined) {
        StorageService.setItem(AUTH_EXPIRES_AT, expiresAt);
    }
    if (jwt && minifiedJwt) {
        StorageService.setItem(AUTH_TOKEN, jwt, {
            priority: ['secureStorage', 'localStorage'],
        });
        StorageService.setItem(AUTH_MIN_TOKEN, minifiedJwt, {
            priority: ['secureStorage', 'localStorage'],
        });
        const projectSettings = getProjectSettings();
        if (projectSettings && isCookieEnabled(projectSettings)) {
            // if cookie is enabled, but the backend returns a JWT, then use JS to store the cookie
            const expireDate = new Date(expiresAt * 1000).toUTCString();
            const authCookie = `${DYNAMIC_AUTH_COOKIE_NAME}=${minifiedJwt}; expires=${expireDate}; path=/; SameSite=Lax`;
            document.cookie = authCookie;
        }
    }
};

export { setVerifyResponseToStorage };
