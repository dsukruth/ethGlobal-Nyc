'use client'
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var React = require('react');
var client = require('@dynamic-labs-sdk/client');
var core = require('@dynamic-labs-sdk/client/core');
var client$1 = require('../../../client.cjs');
var constants = require('../../constants.cjs');
var fetchOverride = require('./fetchOverride/fetchOverride.cjs');
var getApiHeaders = require('./getApiHeaders/getApiHeaders.cjs');
var syncEvents = require('./syncEvents/syncEvents.cjs');

const useInitializeSdkClient = ({ settings, client: clientFromProps, }) => {
    const lastClientDependencyKey = React.useRef(null);
    /**
     * Sets the client to the state and setup the extensions.
     */
    const setClient = (client$2) => {
        if (client.hasExtension({ extensionKey: constants.CLIENT_EXTENSION_NAME }, client$2)) {
            return;
        }
        client$1.setDynamicClient(client$2);
        core.registerExtension({ extensionKey: constants.CLIENT_EXTENSION_NAME }, client$2);
        syncEvents.syncEvents(client$2);
    };
    /**
     * If a client is provided by the props, we should use it instead of
     * creating a new one.
     */
    if (clientFromProps) {
        if (!client$1.hasDynamicClient() || client$1.getDynamicClient() !== clientFromProps) {
            setClient(clientFromProps);
        }
        return;
    }
    const clientDependencyKey = [
        settings.apiBaseUrl,
        settings.environmentId,
    ].join('-');
    if (lastClientDependencyKey.current === clientDependencyKey)
        return;
    lastClientDependencyKey.current = clientDependencyKey;
    setClient(client.createDynamicClient({
        coreConfig: {
            apiBaseUrl: settings.apiBaseUrl,
            fetch: fetchOverride.fetchOverride,
            getApiHeaders: getApiHeaders.getApiHeaders,
        },
        environmentId: settings.environmentId,
    }));
};

exports.useInitializeSdkClient = useInitializeSdkClient;
