'use client'
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _tslib = require('../../../../../../../_virtual/_tslib.cjs');
var utils = require('@dynamic-labs/utils');

/**
 * Applies mock responses to requests that are not expected to be while in dog-feeding phase of the SDK.
 *
 * While dog-feeding is not complete, we must keep the client from doing anything other than
 * what it should be doing.
 */
const fetchOverride = (req, init) => _tslib.__awaiter(void 0, void 0, void 0, function* () {
    // For now, we are handling JWT revoke in sdk-react-core.
    if (req.toString().includes('revoke')) {
        return new Response(null, { status: 200 });
    }
    // This endpoint is frequently hit so we mock it directly instead of returning the MockedFetchError
    // to avoid spamming the console with errors.
    if (req.toString().includes('settings')) {
        return new Response(JSON.stringify(null), { status: 200 });
    }
    /**
     * We need to use the FetchService.fetch for ReactNative, Flutter and Unity3d SDKs.
     */
    return utils.FetchService.fetch(req, init);
});

exports.fetchOverride = fetchOverride;
