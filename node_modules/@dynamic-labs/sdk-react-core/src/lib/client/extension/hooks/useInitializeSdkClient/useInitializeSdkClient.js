'use client'
import { useRef } from 'react';
import { createDynamicClient, hasExtension } from '@dynamic-labs-sdk/client';
import { registerExtension } from '@dynamic-labs-sdk/client/core';
import { setDynamicClient, hasDynamicClient, getDynamicClient } from '../../../client.js';
import { CLIENT_EXTENSION_NAME } from '../../constants.js';
import { fetchOverride } from './fetchOverride/fetchOverride.js';
import { getApiHeaders } from './getApiHeaders/getApiHeaders.js';
import { syncEvents } from './syncEvents/syncEvents.js';

const useInitializeSdkClient = ({ settings, client: clientFromProps, }) => {
    const lastClientDependencyKey = useRef(null);
    /**
     * Sets the client to the state and setup the extensions.
     */
    const setClient = (client) => {
        if (hasExtension({ extensionKey: CLIENT_EXTENSION_NAME }, client)) {
            return;
        }
        setDynamicClient(client);
        registerExtension({ extensionKey: CLIENT_EXTENSION_NAME }, client);
        syncEvents(client);
    };
    /**
     * If a client is provided by the props, we should use it instead of
     * creating a new one.
     */
    if (clientFromProps) {
        if (!hasDynamicClient() || getDynamicClient() !== clientFromProps) {
            setClient(clientFromProps);
        }
        return;
    }
    const clientDependencyKey = [
        settings.apiBaseUrl,
        settings.environmentId,
    ].join('-');
    if (lastClientDependencyKey.current === clientDependencyKey)
        return;
    lastClientDependencyKey.current = clientDependencyKey;
    setClient(createDynamicClient({
        coreConfig: {
            apiBaseUrl: settings.apiBaseUrl,
            fetch: fetchOverride,
            getApiHeaders,
        },
        environmentId: settings.environmentId,
    }));
};

export { useInitializeSdkClient };
