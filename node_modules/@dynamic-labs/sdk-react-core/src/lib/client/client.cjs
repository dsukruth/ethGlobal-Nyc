'use client'
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var React = require('react');
var EventEmitter = require('eventemitter3');
var utils = require('@dynamic-labs/utils');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var EventEmitter__default = /*#__PURE__*/_interopDefaultLegacy(EventEmitter);

let dynamicClient = null;
const dynamicClientEmitter = new EventEmitter__default["default"]();
const setDynamicClient = (newClient) => {
    dynamicClient = newClient;
    dynamicClientEmitter.emit('changed', newClient);
};
const hasDynamicClient = () => dynamicClient !== null;
const getDynamicClient = () => {
    if (!dynamicClient) {
        throw new utils.DynamicError('Tried to getClient when it was still null');
    }
    return dynamicClient;
};
/**
 * Not many customers will ever change the client mid execution, but demo v2 will.
 * That means we need hooks that can react to client changes.
 */
const useDynamicClient = () => {
    const [client, setClient] = React.useState(getDynamicClient());
    React.useEffect(() => {
        dynamicClientEmitter.on('changed', setClient);
        return () => {
            dynamicClientEmitter.off('changed', setClient);
        };
    }, []);
    return client;
};

exports.getDynamicClient = getDynamicClient;
exports.hasDynamicClient = hasDynamicClient;
exports.setDynamicClient = setDynamicClient;
exports.useDynamicClient = useDynamicClient;
