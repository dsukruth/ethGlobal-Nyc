'use client'
import { useState, useEffect } from 'react';
import EventEmitter from 'eventemitter3';
import { DynamicError } from '@dynamic-labs/utils';

let dynamicClient = null;
const dynamicClientEmitter = new EventEmitter();
const setDynamicClient = (newClient) => {
    dynamicClient = newClient;
    dynamicClientEmitter.emit('changed', newClient);
};
const hasDynamicClient = () => dynamicClient !== null;
const getDynamicClient = () => {
    if (!dynamicClient) {
        throw new DynamicError('Tried to getClient when it was still null');
    }
    return dynamicClient;
};
/**
 * Not many customers will ever change the client mid execution, but demo v2 will.
 * That means we need hooks that can react to client changes.
 */
const useDynamicClient = () => {
    const [client, setClient] = useState(getDynamicClient());
    useEffect(() => {
        dynamicClientEmitter.on('changed', setClient);
        return () => {
            dynamicClientEmitter.off('changed', setClient);
        };
    }, []);
    return client;
};

export { getDynamicClient, hasDynamicClient, setDynamicClient, useDynamicClient };
