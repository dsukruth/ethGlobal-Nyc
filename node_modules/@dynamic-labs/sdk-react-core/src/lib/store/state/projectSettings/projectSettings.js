'use client'
import { __awaiter } from '../../../../../_virtual/_tslib.js';
import { DynamicError } from '@dynamic-labs/utils';
import '@dynamic-labs-sdk/client/core';
import '@dynamic-labs/sdk-api-core';
import '../../../client/client.js';
import 'react';
import '@dynamic-labs-sdk/client';
import '../../../utils/constants/values.js';
import '@dynamic-labs/multi-wallet';
import '../../../shared/logger.js';
import '../../../utils/constants/colors.js';
import 'react-international-phone';
import '@dynamic-labs/iconic';
import '@dynamic-labs/wallet-connector-core';
import 'react/jsx-runtime';
import '../../../context/ViewContext/ViewContext.js';
import '@dynamic-labs/wallet-book';
import '../../../shared/consts/index.js';
import '../nonce/nonce.js';
import '../../../config/ApiEndpoint.js';
import { fetchProjectSettings } from '../../../data/api/settings/settings.js';
import '../../../locale/locale.js';
import { useEnvironmentId } from '../dynamicContextProps/dynamicContextProps.js';
import '../primaryWalletId/primaryWalletId.js';
import { getConnectedWalletsInfo } from '../connectedWalletsInfo/connectedWalletsInfo.js';
import '../../../events/dynamicEvents.js';
import { getUserProfile } from '../../../client/extension/user/getUserProfile/getUserProfile.js';
import { useDynamicEvents } from '../../../utils/hooks/events/useDynamicEvents/useDynamicEvents.js';
import '../../../context/DynamicContext/DynamicContext.js';
import '../loadingAndLifecycle/loadingAndLifecycle.js';
import '../authMode/authMode.js';
import '../../../context/CaptchaContext/CaptchaContext.js';
import '../../../context/ErrorContext/ErrorContext.js';
import '../../../context/AccessDeniedContext/AccessDeniedContext.js';
import '../../../context/AccountExistsContext/AccountExistsContext.js';
import '../../../context/UserWalletsContext/UserWalletsContext.js';
import '../../../context/VerificationContext/VerificationContext.js';
import 'react-dom';
import '../../../utils/functions/compareChains/compareChains.js';
import '../../../views/Passkey/utils/findPrimaryEmbeddedChain/findPrimaryEmbeddedChain.js';
import '../../../context/ThemeContext/ThemeContext.js';
import '../../../utils/hooks/useUserUpdateRequest/useUpdateUser/userFieldsSchema.js';
import 'bs58';
import { usePromise } from '../../../utils/hooks/usePromise/usePromise.js';
import '@dynamic-labs/types';
import '../../../context/SocialRedirectContext/SocialRedirectContext.js';
import '../../../context/LoadingContext/LoadingContext.js';
import '../../../context/WalletContext/WalletContext.js';
import '../../../utils/hooks/useEmbeddedWallet/useSecureEnclaveEmbeddedWallet/constants.js';
import 'yup';
import '../../../context/MockContext/MockContext.js';
import '../../../views/CollectUserDataView/useFields.js';
import '../../../context/FieldsStateContext/FieldsStateContext.js';
import '../../../context/UserFieldEditorContext/UserFieldEditorContext.js';
import '@dynamic-labs/rpc-providers';
import '../walletOptions/walletOptions.js';
import 'react-i18next';
import '../../../components/Accordion/components/AccordionItem/AccordionItem.js';
import '../../../components/Alert/Alert.js';
import '../../../components/ShadowDOM/ShadowDOM.js';
import '../../../components/IconButton/IconButton.js';
import '../../../components/InlineWidget/InlineWidget.js';
import '../../../components/Input/Input.js';
import '../../../components/IsBrowser/IsBrowser.js';
import '../../../components/MenuList/Dropdown/Dropdown.js';
import '../../../components/OverlayCard/OverlayCard.js';
import '../../../components/Transition/ZoomTransition/ZoomTransition.js';
import '../../../components/Transition/SlideInUpTransition/SlideInUpTransition.js';
import '../../../components/Transition/OpacityTransition/OpacityTransition.js';
import '../../../components/PasskeyCreatedSuccessBanner/PasskeyCreatedSuccessBanner.js';
import '../../../components/Popper/Popper/Popper.js';
import '../../../components/Popper/PopperContext/PopperContext.js';
import 'react-focus-lock';
import 'qrcode';
import 'formik';
import '../../../utils/hooks/useSubdomainCheck/useSubdomainCheck.js';
import '../../../context/WalletGroupContext/WalletGroupContext.js';
import '../../../context/IpConfigurationContext/IpConfigurationContext.js';
import '../../../context/ConnectWithOtpContext/ConnectWithOtpContext.js';
import '../../../widgets/DynamicBridgeWidget/views/WalletsView/components/SecondaryWallets/SecondaryWallets.js';
import '@hcaptcha/react-hcaptcha';
import '../../../widgets/DynamicWidget/context/DynamicWidgetContext.js';
import '../../../widgets/DynamicWidget/helpers/convertExchangeKeyAndProviderEnum.js';
import '../../../views/ExchangeWhitelistWarning/ExchangeWhitelistWarning.js';
import '../../../context/ErrorContext/hooks/useErrorText/useErrorText.js';
import '../../../context/FooterAnimationContext/index.js';
import '../../../views/MfaChooseDeviceView/getMfaOptions/getMfaOptions.js';
import '../../../context/PasskeyContext/PasskeyContext.js';
import '../../../context/OnrampContext/OnrampContext.js';
import '../sendBalances.js';
import '../connectorsInitializing/connectorsInitializing.js';
import '../../../components/OverlayCardBase/OverlayCardTarget/OverlayCardTarget.js';
import '../../../widgets/DynamicWidget/components/DynamicWidgetHeader/DynamicWidgetHeader.js';
import '../../../views/TransactionConfirmationView/TransactionConfirmationView.js';
import '../../../widgets/DynamicWidget/components/PasskeyCard/PasskeyCard.js';
import '../../../../index.js';
import '../../../widgets/DynamicWidget/views/ReceiveWalletFunds/ReceiveWalletFunds.js';
import '../tokenBalances.js';
import '../multichainBalances.js';
import '../../../shared/utils/functions/getInitialUrl/getInitialUrl.js';
import { createStoreState } from '../../internalImplementation/utils/createStoreState/createStoreState.js';

const { getProjectSettings: getProjectSettingsRaw, setProjectSettings, useProjectSettings: useProjectSettingsRaw, resetProjectSettings, } = createStoreState('projectSettings');
const getProjectSettings = () => getProjectSettingsRaw().settings;
const getProjectSettingsExpireAt = () => getProjectSettingsRaw().expiresAt;
const useProjectSettings = () => useProjectSettingsRaw().settings;
const useFetchProjectSettings = ({ retries = 2, } = {}) => {
    const originalProjectSettings = getProjectSettings();
    const expiresAt = getProjectSettingsExpireAt();
    const isProjectSettingsPresent = Boolean(originalProjectSettings);
    const didProjectSettingsExpire = expiresAt ? expiresAt < Date.now() : false;
    const hasUser = Boolean(getUserProfile());
    const hasConnectedWallet = getConnectedWalletsInfo().length > 0;
    const enableProjectSettingsFetch = !isProjectSettingsPresent ||
        didProjectSettingsExpire ||
        (hasUser === false && hasConnectedWallet === false);
    const environmentId = useEnvironmentId();
    const { retrigger } = usePromise(() => __awaiter(void 0, void 0, void 0, function* () {
        const settings = yield fetchProjectSettings(environmentId);
        if (!settings)
            throw new DynamicError('Settings are not defined');
        return settings;
    }), {
        deps: [environmentId],
        enabled: enableProjectSettingsFetch,
        onResolve: (projectSettings) => {
            const expiry = new Date().getTime() + 60000 * 5;
            setProjectSettings({
                expiresAt: expiry,
                settings: projectSettings,
            });
        },
        retries,
    });
    useDynamicEvents('logout', retrigger);
    return { refetchProjectSettings: retrigger };
};

export { getProjectSettings, getProjectSettingsExpireAt, resetProjectSettings, setProjectSettings, useFetchProjectSettings, useProjectSettings };
