'use client'
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var React = require('react');
var utils = require('@dynamic-labs/utils');
var logger$1 = require('@dynamic-labs/logger');
var ApiEndpoint = require('../../../config/ApiEndpoint.cjs');
var logger = require('../../../shared/logger.cjs');
var createStoreState = require('../../internalImplementation/utils/createStoreState/createStoreState.cjs');
var defaultDynamicSettings = require('./defaultDynamicSettings.cjs');

const { getDynamicContextProps, setDynamicContextProps, useDynamicContextProps, } = createStoreState.createStoreState('dynamicContextProps');
const getDynamicSettings = () => applyDefaultSettings(getDynamicContextProps().settings);
const useDynamicSettings = () => applyDefaultSettings(useDynamicContextProps().settings);
const getEnvironmentId = () => getDynamicSettings().environmentId;
const useEnvironmentId = () => useDynamicSettings().environmentId;
const setEnvironmentId = (environmentId) => {
    const props = getDynamicContextProps();
    setDynamicContextProps(Object.assign(Object.assign({}, props), { settings: Object.assign(Object.assign({}, props.settings), { environmentId }) }));
};
const useApiBaseUrl = () => useDynamicSettings().apiBaseUrl;
const getBridgeChains = () => getDynamicSettings().bridgeChains;
const applyDefaultSettings = (settings) => {
    const newSettings = Object.assign({}, settings);
    Object.keys(defaultDynamicSettings.defaultDynamicSettings).forEach((key) => {
        const typedKey = key;
        if (newSettings[typedKey] === undefined) {
            // @ts-expect-error TS fails to infer this type properly
            newSettings[typedKey] = defaultDynamicSettings.defaultDynamicSettings[typedKey];
        }
    });
    return newSettings;
};
const useSyncDynamicContextProps = ({ settings, emitErrors, enableInstrumentation, locale, theme, }) => {
    const environmentId = useEnvironmentId();
    if (!environmentId) {
        throw new utils.MissingEnvironmentIdError();
    }
    // We don't want to update the env id here.
    // If it changes, the user should be logged out and we will detect that in useValidateSession.
    settings.environmentId = environmentId;
    React.useEffect(() => {
        if (environmentId === defaultDynamicSettings.PUBLIC_PROJECT_LIVE_ENVIRONMENT_ID) {
            logger.logger.warn(`WARNING: DYNAMIC is using a test environment ID ${environmentId}. Please sign up on https://app.dynamic.xyz/ to get your production environment ID.`);
        }
        if (settings.logLevel) {
            logger$1.Logger.setLogLevel(settings.logLevel);
        }
        const apiBaseUrl = utils.getEnvVarWithFallback('DYNAMIC_API_BASE_URL', settings.apiBaseUrl || '');
        ApiEndpoint.setBaseUrl(apiBaseUrl);
        setDynamicContextProps({
            emitErrors,
            enableInstrumentation,
            locale,
            settings,
            theme,
        });
    }, [
        emitErrors,
        enableInstrumentation,
        environmentId,
        locale,
        settings,
        theme,
    ]);
};

exports.applyDefaultSettings = applyDefaultSettings;
exports.getBridgeChains = getBridgeChains;
exports.getDynamicContextProps = getDynamicContextProps;
exports.getDynamicSettings = getDynamicSettings;
exports.getEnvironmentId = getEnvironmentId;
exports.setDynamicContextProps = setDynamicContextProps;
exports.setEnvironmentId = setEnvironmentId;
exports.useApiBaseUrl = useApiBaseUrl;
exports.useDynamicContextProps = useDynamicContextProps;
exports.useDynamicSettings = useDynamicSettings;
exports.useEnvironmentId = useEnvironmentId;
exports.useSyncDynamicContextProps = useSyncDynamicContextProps;
