'use client'
import { useEffect } from 'react';
import { MissingEnvironmentIdError, getEnvVarWithFallback } from '@dynamic-labs/utils';
import { Logger } from '@dynamic-labs/logger';
import ApiEndpoint from '../../../config/ApiEndpoint.js';
import { logger } from '../../../shared/logger.js';
import { createStoreState } from '../../internalImplementation/utils/createStoreState/createStoreState.js';
import { defaultDynamicSettings, PUBLIC_PROJECT_LIVE_ENVIRONMENT_ID } from './defaultDynamicSettings.js';

const { getDynamicContextProps, setDynamicContextProps, useDynamicContextProps, } = createStoreState('dynamicContextProps');
const getDynamicSettings = () => applyDefaultSettings(getDynamicContextProps().settings);
const useDynamicSettings = () => applyDefaultSettings(useDynamicContextProps().settings);
const getEnvironmentId = () => getDynamicSettings().environmentId;
const useEnvironmentId = () => useDynamicSettings().environmentId;
const setEnvironmentId = (environmentId) => {
    const props = getDynamicContextProps();
    setDynamicContextProps(Object.assign(Object.assign({}, props), { settings: Object.assign(Object.assign({}, props.settings), { environmentId }) }));
};
const useApiBaseUrl = () => useDynamicSettings().apiBaseUrl;
const getBridgeChains = () => getDynamicSettings().bridgeChains;
const applyDefaultSettings = (settings) => {
    const newSettings = Object.assign({}, settings);
    Object.keys(defaultDynamicSettings).forEach((key) => {
        const typedKey = key;
        if (newSettings[typedKey] === undefined) {
            // @ts-expect-error TS fails to infer this type properly
            newSettings[typedKey] = defaultDynamicSettings[typedKey];
        }
    });
    return newSettings;
};
const useSyncDynamicContextProps = ({ settings, emitErrors, enableInstrumentation, locale, theme, }) => {
    const environmentId = useEnvironmentId();
    if (!environmentId) {
        throw new MissingEnvironmentIdError();
    }
    // We don't want to update the env id here.
    // If it changes, the user should be logged out and we will detect that in useValidateSession.
    settings.environmentId = environmentId;
    useEffect(() => {
        if (environmentId === PUBLIC_PROJECT_LIVE_ENVIRONMENT_ID) {
            logger.warn(`WARNING: DYNAMIC is using a test environment ID ${environmentId}. Please sign up on https://app.dynamic.xyz/ to get your production environment ID.`);
        }
        if (settings.logLevel) {
            Logger.setLogLevel(settings.logLevel);
        }
        const apiBaseUrl = getEnvVarWithFallback('DYNAMIC_API_BASE_URL', settings.apiBaseUrl || '');
        ApiEndpoint.setBaseUrl(apiBaseUrl);
        setDynamicContextProps({
            emitErrors,
            enableInstrumentation,
            locale,
            settings,
            theme,
        });
    }, [
        emitErrors,
        enableInstrumentation,
        environmentId,
        locale,
        settings,
        theme,
    ]);
};

export { applyDefaultSettings, getBridgeChains, getDynamicContextProps, getDynamicSettings, getEnvironmentId, setDynamicContextProps, setEnvironmentId, useApiBaseUrl, useDynamicContextProps, useDynamicSettings, useEnvironmentId, useSyncDynamicContextProps };
