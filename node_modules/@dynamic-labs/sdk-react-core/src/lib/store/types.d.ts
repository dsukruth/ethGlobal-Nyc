import { MultichainAccountBalanceResponse, ProjectSettings, TokenBalance } from '@dynamic-labs/sdk-api-core';
import { AuthMode, UserProfile } from '@dynamic-labs/types';
import type { DynamicContextProps } from '../context/DynamicContext/types';
import { WalletGroups, WalletOption } from '../shared/types/wallets';
import { ConnectedWalletConnectorType } from '../utils/hooks/useConnectWallet/useConnectWallet';
export type SdkStore = {
    user: UserProfile | undefined;
    projectSettings: StoredProjectSettings;
    tokenBalancesState: TokenBalancesState;
    sendBalanceState: SendBalanceState;
    multichainTokenBalancesState: MultichainTokenBalancesState;
    walletOptions: WalletOptionsState;
    loadingAndLifecycle: LoadingAndLifecycle;
    dynamicContextProps: Pick<DynamicContextProps, 'emitErrors' | 'enableInstrumentation' | 'locale' | 'settings' | 'theme'>;
    authMode: AuthMode;
    nonce: StoredNonce;
    primaryWalletId: string | undefined;
    connectedWalletsInfo: ConnectedWalletConnectorType[];
    /**
     * Map of connector keys that need to be initialized.
     * The key is the connector key and the value is a boolean
     * indicating if the connector is initializing (true) or already initialized (false).
     */
    connectorsInitializing: Record<string, boolean>;
};
export type LoadingAndLifecycle = {
    /**
     * Whether session validation has been performed.
     */
    sessionValidation: boolean;
    /**
     * Whether initial wallet signature verification is currently in progress.
     *
     * This is useful to avoid prematurely populating userWallets while the primary wallet isn't
     * done verifying.
     */
    initialWalletVerificationInProgress: boolean;
};
export type SendBalanceState = {
    amount?: number;
    chainName?: string;
    nativePrice?: number;
};
export type TokenBalancesState = {
    error?: string;
    isLoading: boolean;
    tokenBalances: TokenBalance[] | undefined;
    isError: boolean;
};
export type MultichainTokenBalancesState = {
    error?: string;
    isLoading: boolean;
    multichainTokenBalances: MultichainAccountBalanceResponse['chainBalances'] | undefined;
    isError: boolean;
    requestsKey?: string;
};
export type WalletOptionsState = {
    walletConnectorOptions: WalletOption[];
    groups: WalletGroups;
};
export type StoredProjectSettings = {
    expiresAt: number | undefined;
    settings: ProjectSettings | undefined;
};
export type StateConfig = {
    [K in keyof SdkStore]: {
        initialValue: SdkStore[K];
        useLocalStorage?: boolean;
    };
};
export type StoredNonce = {
    expiresAt: number | undefined;
    nonce: string | undefined;
};
