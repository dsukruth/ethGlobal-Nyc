'use client'
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _tslib = require('../../../../../_virtual/_tslib.cjs');
var jsxRuntime = require('react/jsx-runtime');
var React = require('react');
var formik = require('formik');
require('@dynamic-labs/utils');
require('../../../components/Accordion/components/AccordionItem/AccordionItem.cjs');
require('react-i18next');
require('@dynamic-labs/iconic');
require('../../../context/ViewContext/ViewContext.cjs');
require('@dynamic-labs/sdk-api-core');
require('../../../shared/logger.cjs');
require('@dynamic-labs/wallet-connector-core');
require('@dynamic-labs/wallet-book');
require('../../../utils/constants/colors.cjs');
require('../../../utils/constants/values.cjs');
var fields = require('../../../utils/constants/fields.cjs');
require('../../../shared/consts/index.cjs');
var Alert = require('../../../components/Alert/Alert.cjs');
require('../../../events/dynamicEvents.cjs');
require('../../../context/DynamicContext/DynamicContext.cjs');
require('../../../store/state/loadingAndLifecycle/loadingAndLifecycle.cjs');
require('../../../store/state/authMode/authMode.cjs');
var useInternalDynamicContext = require('../../../context/DynamicContext/useDynamicContext/useInternalDynamicContext/useInternalDynamicContext.cjs');
require('../../../context/CaptchaContext/CaptchaContext.cjs');
var ErrorContext = require('../../../context/ErrorContext/ErrorContext.cjs');
require('@dynamic-labs/multi-wallet');
require('react-international-phone');
require('../../../store/state/nonce/nonce.cjs');
require('@dynamic-labs-sdk/client/core');
require('../../../client/client.cjs');
require('@dynamic-labs-sdk/client');
require('../../../store/state/projectSettings/projectSettings.cjs');
require('../../../config/ApiEndpoint.cjs');
require('../../../locale/locale.cjs');
require('../../../store/state/dynamicContextProps/dynamicContextProps.cjs');
require('../../../store/state/primaryWalletId/primaryWalletId.cjs');
require('../../../store/state/connectedWalletsInfo/connectedWalletsInfo.cjs');
require('../../../context/AccessDeniedContext/AccessDeniedContext.cjs');
require('../../../context/AccountExistsContext/AccountExistsContext.cjs');
require('../../../context/UserWalletsContext/UserWalletsContext.cjs');
require('../../../context/VerificationContext/VerificationContext.cjs');
require('react-dom');
require('../../../utils/functions/compareChains/compareChains.cjs');
require('../../Passkey/utils/findPrimaryEmbeddedChain/findPrimaryEmbeddedChain.cjs');
require('../../../context/ThemeContext/ThemeContext.cjs');
require('../../../utils/hooks/useUserUpdateRequest/useUpdateUser/userFieldsSchema.cjs');
require('bs58');
require('@dynamic-labs/types');
require('../../../context/SocialRedirectContext/SocialRedirectContext.cjs');
var useUserAuth = require('../../../utils/hooks/useUserAuth/useUserAuth.cjs');
var useUserDataForm = require('../../../utils/hooks/useUserDataForm/useUserDataForm.cjs');
var useUserUpdateRequest = require('../../../utils/hooks/useUserUpdateRequest/useUserUpdateRequest.cjs');
require('../../../context/UserFieldEditorContext/UserFieldEditorContext.cjs');
require('../../../context/FieldsStateContext/FieldsStateContext.cjs');
require('@dynamic-labs/rpc-providers');
require('../../../store/state/walletOptions/walletOptions.cjs');
require('../../../context/MockContext/MockContext.cjs');
require('../../../context/FooterAnimationContext/index.cjs');
require('../../../components/ShadowDOM/ShadowDOM.cjs');
require('../../../components/Transition/ZoomTransition/ZoomTransition.cjs');
require('../../../components/Transition/SlideInUpTransition/SlideInUpTransition.cjs');
require('../../../components/Transition/OpacityTransition/OpacityTransition.cjs');
require('../../../components/OverlayCardBase/OverlayCardTarget/OverlayCardTarget.cjs');
require('../../../context/WalletGroupContext/WalletGroupContext.cjs');
require('../../../widgets/DynamicWidget/components/DynamicWidgetHeader/DynamicWidgetHeader.cjs');
require('react-focus-lock');
require('../../../context/LoadingContext/LoadingContext.cjs');
require('../../../context/WalletContext/WalletContext.cjs');
require('../../../widgets/DynamicWidget/context/DynamicWidgetContext.cjs');
require('../../../components/IconButton/IconButton.cjs');
require('../../../components/MenuList/Dropdown/Dropdown.cjs');
require('../useFields.cjs');
var TypographyButton = require('../../../components/TypographyButton/TypographyButton.cjs');
var UserDataFields = require('../UserDataFields/UserDataFields.cjs');
var SubdomainField = require('../../SubdomainField/SubdomainField.cjs');
require('yup');
require('../../../store/state/sendBalances.cjs');
require('../../../components/Input/Input.cjs');
require('../../../components/OverlayCard/OverlayCard.cjs');
require('../../TransactionConfirmationView/TransactionConfirmationView.cjs');
require('../../../components/PasskeyCreatedSuccessBanner/PasskeyCreatedSuccessBanner.cjs');
require('../../../context/PasskeyContext/PasskeyContext.cjs');
require('../../../widgets/DynamicWidget/components/PasskeyCard/PasskeyCard.cjs');
require('../../../utils/hooks/useEmbeddedWallet/useSecureEnclaveEmbeddedWallet/constants.cjs');
require('../../../context/OnrampContext/OnrampContext.cjs');
require('../../../../index.cjs');
require('../../../widgets/DynamicWidget/helpers/convertExchangeKeyAndProviderEnum.cjs');
require('qrcode');
require('../../../widgets/DynamicWidget/views/ReceiveWalletFunds/ReceiveWalletFunds.cjs');
require('../../../context/IpConfigurationContext/IpConfigurationContext.cjs');
require('../../../context/ConnectWithOtpContext/ConnectWithOtpContext.cjs');
require('../../../widgets/DynamicBridgeWidget/views/WalletsView/components/SecondaryWallets/SecondaryWallets.cjs');
require('@hcaptcha/react-hcaptcha');
require('../../ExchangeWhitelistWarning/ExchangeWhitelistWarning.cjs');
require('../../../context/ErrorContext/hooks/useErrorText/useErrorText.cjs');
require('../../MfaChooseDeviceView/getMfaOptions/getMfaOptions.cjs');
require('../../../store/state/connectorsInitializing/connectorsInitializing.cjs');
require('../../../store/state/tokenBalances.cjs');
require('../../../store/state/multichainBalances.cjs');
require('../../../shared/utils/functions/getInitialUrl/getInitialUrl.cjs');
require('../../../components/InlineWidget/InlineWidget.cjs');
require('../../../components/IsBrowser/IsBrowser.cjs');
require('../../../components/Popper/Popper/Popper.cjs');
require('../../../components/Popper/PopperContext/PopperContext.cjs');

const OnboardingUserDataForm = ({ children, userProfile, disableSubmit, }) => {
    const { policiesConsentInnerComponent, userWithMissingInfo, primaryWallet } = useInternalDynamicContext.useInternalDynamicContext();
    const { error } = ErrorContext.useErrorContext();
    const { completeAuth } = useUserAuth.useUserAuth({});
    const { updateUser } = useUserUpdateRequest.useUserUpdateRequestInternal({
        validationSchemaStripUnknown: false,
    });
    const onSubmit = React.useCallback((formValues) => _tslib.__awaiter(void 0, void 0, void 0, function* () {
        yield completeAuth({
            updateJwtFunction: () => _tslib.__awaiter(void 0, void 0, void 0, function* () { return updateUser(formValues); }),
        });
    }), [completeAuth, updateUser]);
    const showNameServiceField = React.useMemo(() => {
        var _a;
        return ((_a = userWithMissingInfo === null || userWithMissingInfo === void 0 ? void 0 : userWithMissingInfo.missingFields) === null || _a === void 0 ? void 0 : _a.some((field) => field.name === fields.NAME_SERVICE_FIELD_NAME)) && (primaryWallet === null || primaryWallet === void 0 ? void 0 : primaryWallet.connector.isEmbeddedWallet);
    }, [userWithMissingInfo === null || userWithMissingInfo === void 0 ? void 0 : userWithMissingInfo.missingFields, primaryWallet]);
    const { fetch: loading, formikInitialValues, formikValidationSchema, enforcePolicies, onFormSubmit, } = useUserDataForm.useUserDataForm({
        fields: (userWithMissingInfo === null || userWithMissingInfo === void 0 ? void 0 : userWithMissingInfo.missingFields) || [],
        onSubmit,
        userProfile,
    });
    const policiesConsentInnerComponentArray = [
        policiesConsentInnerComponent,
    ].flat();
    return (jsxRuntime.jsx(formik.Formik, { onSubmit: onFormSubmit, initialValues: formikInitialValues, validationSchema: formikValidationSchema, children: ({ errors, touched, values }) => {
            var _a;
            const isSubmitBtnDisabled = disableSubmit ||
                (enforcePolicies &&
                    (policiesConsentInnerComponentArray === null || policiesConsentInnerComponentArray === void 0 ? void 0 : policiesConsentInnerComponentArray.length) !==
                        ((_a = values.policiesConsentArray) === null || _a === void 0 ? void 0 : _a.length));
            return (jsxRuntime.jsx(formik.Form, { className: 'user-data-form__form', children: jsxRuntime.jsxs(jsxRuntime.Fragment, { children: [children, showNameServiceField && jsxRuntime.jsx(SubdomainField.SubdomainField, { showDetails: true }), error && (jsxRuntime.jsx(Alert.Alert, { icon: 'error', variant: 'error', className: 'user-data-form__error', children: error })), jsxRuntime.jsx(UserDataFields.UserDataFields, { fields: userWithMissingInfo === null || userWithMissingInfo === void 0 ? void 0 : userWithMissingInfo.missingFields, errors: errors, touched: touched, policiesConsentInnerComponentArray: policiesConsentInnerComponentArray }), jsxRuntime.jsx(TypographyButton.TypographyButton, { type: 'submit', loading: loading, disabled: isSubmitBtnDisabled, buttonVariant: 'primary', expanded: true, buttonPadding: 'login-screen-height', children: "Continue" })] }) }));
        } }));
};

exports.OnboardingUserDataForm = OnboardingUserDataForm;
