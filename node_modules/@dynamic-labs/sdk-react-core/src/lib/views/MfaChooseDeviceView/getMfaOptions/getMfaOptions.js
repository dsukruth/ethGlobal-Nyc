'use client'
import { MFADeviceType, MfaBackupCodeAcknowledgement } from '@dynamic-labs/sdk-api-core';
import '@dynamic-labs-sdk/client/core';
import '../../../client/client.js';
import 'react';
import '@dynamic-labs-sdk/client';
import '../../../../../_virtual/_tslib.js';
import '@dynamic-labs/utils';
import '../../../utils/constants/values.js';
import '@dynamic-labs/multi-wallet';
import '../../../shared/logger.js';
import '../../../utils/constants/colors.js';
import 'react-international-phone';
import '@dynamic-labs/iconic';
import '@dynamic-labs/wallet-connector-core';
import 'react/jsx-runtime';
import '../../../context/ViewContext/ViewContext.js';
import '@dynamic-labs/wallet-book';
import '../../../shared/consts/index.js';
import '../../../store/state/nonce/nonce.js';
import '../../../config/ApiEndpoint.js';
import '../../../store/state/projectSettings/projectSettings.js';
import '../../../locale/locale.js';
import '../../../store/state/dynamicContextProps/dynamicContextProps.js';
import '../../../store/state/primaryWalletId/primaryWalletId.js';
import '../../../store/state/connectedWalletsInfo/connectedWalletsInfo.js';
import '../../../events/dynamicEvents.js';
import { getUserProfile } from '../../../client/extension/user/getUserProfile/getUserProfile.js';
import { isMfaMethodEnabled } from '../../../utils/functions/isMfaMethodEnabled/isMfaMethodEnabled.js';

const PASSKEY_OPTION = {
    Icon: undefined,
    descriptionKey: 'dyn_mfa.choose_device_view.passkey_description',
    labelKey: 'dyn_mfa.choose_device_view.passkey',
    type: MFADeviceType.Passkey,
};
const TOTP_OPTION = {
    Icon: undefined,
    descriptionKey: 'dyn_mfa.choose_device_view.authenticator_app_description',
    labelKey: 'dyn_mfa.choose_device_view.authenticator_app',
    type: MFADeviceType.Totp,
};
const BACKUP_CODE_OPTION = {
    Icon: undefined,
    descriptionKey: 'dyn_mfa.choose_device_view.backup_code_description',
    labelKey: 'dyn_mfa.choose_device_view.backup_code',
    type: 'backupCode',
};
const getMfaOptions = (isInitialSetup) => {
    const isTotpEnabled = isMfaMethodEnabled(MFADeviceType.Totp);
    const isPasskeysEnabled = isMfaMethodEnabled(MFADeviceType.Passkey);
    if (!isTotpEnabled && !isPasskeysEnabled) {
        return [];
    }
    const mfaOptions = [];
    if (isPasskeysEnabled) {
        mfaOptions.push(PASSKEY_OPTION);
    }
    if (isTotpEnabled) {
        mfaOptions.push(TOTP_OPTION);
    }
    const user = getUserProfile();
    const shouldShowBackupCodeOption = !isInitialSetup &&
        (user === null || user === void 0 ? void 0 : user.mfaBackupCodeAcknowledgement) ===
            MfaBackupCodeAcknowledgement.Complete;
    if (shouldShowBackupCodeOption) {
        mfaOptions.push(BACKUP_CODE_OPTION);
    }
    return mfaOptions;
};

export { BACKUP_CODE_OPTION, PASSKEY_OPTION, TOTP_OPTION, getMfaOptions };
