'use client'
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var sdkApiCore = require('@dynamic-labs/sdk-api-core');
require('@dynamic-labs-sdk/client/core');
require('../../../client/client.cjs');
require('react');
require('@dynamic-labs-sdk/client');
require('../../../../../_virtual/_tslib.cjs');
require('@dynamic-labs/utils');
require('../../../utils/constants/values.cjs');
require('@dynamic-labs/multi-wallet');
require('../../../shared/logger.cjs');
require('../../../utils/constants/colors.cjs');
require('react-international-phone');
require('@dynamic-labs/iconic');
require('@dynamic-labs/wallet-connector-core');
require('react/jsx-runtime');
require('../../../context/ViewContext/ViewContext.cjs');
require('@dynamic-labs/wallet-book');
require('../../../shared/consts/index.cjs');
require('../../../store/state/nonce/nonce.cjs');
require('../../../config/ApiEndpoint.cjs');
require('../../../store/state/projectSettings/projectSettings.cjs');
require('../../../locale/locale.cjs');
require('../../../store/state/dynamicContextProps/dynamicContextProps.cjs');
require('../../../store/state/primaryWalletId/primaryWalletId.cjs');
require('../../../store/state/connectedWalletsInfo/connectedWalletsInfo.cjs');
require('../../../events/dynamicEvents.cjs');
var getUserProfile = require('../../../client/extension/user/getUserProfile/getUserProfile.cjs');
var isMfaMethodEnabled = require('../../../utils/functions/isMfaMethodEnabled/isMfaMethodEnabled.cjs');

const PASSKEY_OPTION = {
    Icon: undefined,
    descriptionKey: 'dyn_mfa.choose_device_view.passkey_description',
    labelKey: 'dyn_mfa.choose_device_view.passkey',
    type: sdkApiCore.MFADeviceType.Passkey,
};
const TOTP_OPTION = {
    Icon: undefined,
    descriptionKey: 'dyn_mfa.choose_device_view.authenticator_app_description',
    labelKey: 'dyn_mfa.choose_device_view.authenticator_app',
    type: sdkApiCore.MFADeviceType.Totp,
};
const BACKUP_CODE_OPTION = {
    Icon: undefined,
    descriptionKey: 'dyn_mfa.choose_device_view.backup_code_description',
    labelKey: 'dyn_mfa.choose_device_view.backup_code',
    type: 'backupCode',
};
const getMfaOptions = (isInitialSetup) => {
    const isTotpEnabled = isMfaMethodEnabled.isMfaMethodEnabled(sdkApiCore.MFADeviceType.Totp);
    const isPasskeysEnabled = isMfaMethodEnabled.isMfaMethodEnabled(sdkApiCore.MFADeviceType.Passkey);
    if (!isTotpEnabled && !isPasskeysEnabled) {
        return [];
    }
    const mfaOptions = [];
    if (isPasskeysEnabled) {
        mfaOptions.push(PASSKEY_OPTION);
    }
    if (isTotpEnabled) {
        mfaOptions.push(TOTP_OPTION);
    }
    const user = getUserProfile.getUserProfile();
    const shouldShowBackupCodeOption = !isInitialSetup &&
        (user === null || user === void 0 ? void 0 : user.mfaBackupCodeAcknowledgement) ===
            sdkApiCore.MfaBackupCodeAcknowledgement.Complete;
    if (shouldShowBackupCodeOption) {
        mfaOptions.push(BACKUP_CODE_OPTION);
    }
    return mfaOptions;
};

exports.BACKUP_CODE_OPTION = BACKUP_CODE_OPTION;
exports.PASSKEY_OPTION = PASSKEY_OPTION;
exports.TOTP_OPTION = TOTP_OPTION;
exports.getMfaOptions = getMfaOptions;
