'use client'
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _tslib = require('../../../../../_virtual/_tslib.cjs');
var jsxRuntime = require('react/jsx-runtime');
var React = require('react');
var reactI18next = require('react-i18next');
require('@dynamic-labs/utils');
require('../../../components/Accordion/components/AccordionItem/AccordionItem.cjs');
var androidTouchId = require('../../../shared/assets/android-touch-id.cjs');
var mail = require('../../../shared/assets/mail.cjs');
require('@dynamic-labs/iconic');
require('../../../context/ViewContext/ViewContext.cjs');
require('@dynamic-labs/sdk-api-core');
require('../../../shared/logger.cjs');
require('@dynamic-labs/wallet-connector-core');
require('@dynamic-labs/wallet-book');
require('../../../utils/constants/colors.cjs');
require('../../../utils/constants/values.cjs');
require('../../../shared/consts/index.cjs');
require('../../../components/Alert/Alert.cjs');
require('../../../events/dynamicEvents.cjs');
require('../../../context/DynamicContext/DynamicContext.cjs');
require('../../../store/state/loadingAndLifecycle/loadingAndLifecycle.cjs');
require('../../../store/state/authMode/authMode.cjs');
var useInternalDynamicContext = require('../../../context/DynamicContext/useDynamicContext/useInternalDynamicContext/useInternalDynamicContext.cjs');
require('../../../context/CaptchaContext/CaptchaContext.cjs');
require('../../../context/ErrorContext/ErrorContext.cjs');
require('@dynamic-labs/multi-wallet');
require('react-international-phone');
require('../../../store/state/nonce/nonce.cjs');
require('@dynamic-labs-sdk/client/core');
require('../../../client/client.cjs');
require('@dynamic-labs-sdk/client');
require('../../../store/state/projectSettings/projectSettings.cjs');
require('../../../config/ApiEndpoint.cjs');
require('../../../locale/locale.cjs');
require('../../../store/state/dynamicContextProps/dynamicContextProps.cjs');
require('../../../store/state/primaryWalletId/primaryWalletId.cjs');
require('../../../store/state/connectedWalletsInfo/connectedWalletsInfo.cjs');
require('../../../context/AccessDeniedContext/AccessDeniedContext.cjs');
require('../../../context/AccountExistsContext/AccountExistsContext.cjs');
require('../../../context/UserWalletsContext/UserWalletsContext.cjs');
require('../../../context/VerificationContext/VerificationContext.cjs');
require('react-dom');
var useElementById = require('../../../utils/hooks/useElementById/useElementById.cjs');
require('../../../utils/functions/compareChains/compareChains.cjs');
require('../utils/findPrimaryEmbeddedChain/findPrimaryEmbeddedChain.cjs');
require('../../../context/ThemeContext/ThemeContext.cjs');
require('../../../utils/hooks/useUserUpdateRequest/useUpdateUser/userFieldsSchema.cjs');
var constants = require('../PasskeyRecovery/constants.cjs');
var useInitEmbeddedWalletAuthMethod = require('../../../utils/hooks/useInitEmbeddedWalletAuthMethod/useInitEmbeddedWalletAuthMethod.cjs');
require('bs58');
require('@dynamic-labs/types');
require('../../../context/SocialRedirectContext/SocialRedirectContext.cjs');
require('../../../context/LoadingContext/LoadingContext.cjs');
require('../../../context/WalletContext/WalletContext.cjs');
require('../../../utils/hooks/useEmbeddedWallet/useSecureEnclaveEmbeddedWallet/constants.cjs');
require('yup');
require('../../../context/MockContext/MockContext.cjs');
require('../../CollectUserDataView/useFields.cjs');
require('../../../context/FieldsStateContext/FieldsStateContext.cjs');
require('../../../context/UserFieldEditorContext/UserFieldEditorContext.cjs');
require('@dynamic-labs/rpc-providers');
require('../../../store/state/walletOptions/walletOptions.cjs');
require('../../../context/FooterAnimationContext/index.cjs');
require('../../../components/ShadowDOM/ShadowDOM.cjs');
require('../../../components/Transition/ZoomTransition/ZoomTransition.cjs');
require('../../../components/Transition/SlideInUpTransition/SlideInUpTransition.cjs');
require('../../../components/Transition/OpacityTransition/OpacityTransition.cjs');
require('../../../components/OverlayCardBase/OverlayCardTarget/OverlayCardTarget.cjs');
require('../../../context/WalletGroupContext/WalletGroupContext.cjs');
require('../../../widgets/DynamicWidget/components/DynamicWidgetHeader/DynamicWidgetHeader.cjs');
require('react-focus-lock');
var Icon = require('../../../components/Icon/Icon.cjs');
require('../../../widgets/DynamicWidget/context/DynamicWidgetContext.cjs');
require('../../../components/IconButton/IconButton.cjs');
require('../../../components/MenuList/Dropdown/Dropdown.cjs');
require('formik');
require('../../../utils/hooks/useSubdomainCheck/useSubdomainCheck.cjs');
require('../../../store/state/sendBalances.cjs');
require('../../../components/Input/Input.cjs');
require('../../../components/OverlayCard/OverlayCard.cjs');
require('../../TransactionConfirmationView/TransactionConfirmationView.cjs');
require('../../../components/PasskeyCreatedSuccessBanner/PasskeyCreatedSuccessBanner.cjs');
require('../../../context/PasskeyContext/PasskeyContext.cjs');
require('../../../widgets/DynamicWidget/components/PasskeyCard/PasskeyCard.cjs');
var PasskeyDeviceIcon = require('../PasskeyDeviceIcon/PasskeyDeviceIcon.cjs');
require('../../../context/OnrampContext/OnrampContext.cjs');
require('../../../../index.cjs');
require('../../../widgets/DynamicWidget/helpers/convertExchangeKeyAndProviderEnum.cjs');
require('qrcode');
require('../../../widgets/DynamicWidget/views/ReceiveWalletFunds/ReceiveWalletFunds.cjs');
require('../../../context/IpConfigurationContext/IpConfigurationContext.cjs');
require('../../../context/ConnectWithOtpContext/ConnectWithOtpContext.cjs');
require('../../../widgets/DynamicBridgeWidget/views/WalletsView/components/SecondaryWallets/SecondaryWallets.cjs');
require('@hcaptcha/react-hcaptcha');
require('../../ExchangeWhitelistWarning/ExchangeWhitelistWarning.cjs');
require('../../../context/ErrorContext/hooks/useErrorText/useErrorText.cjs');
require('../../MfaChooseDeviceView/getMfaOptions/getMfaOptions.cjs');
var ActionCard = require('./ActionCard/ActionCard.cjs');
require('../../../store/state/connectorsInitializing/connectorsInitializing.cjs');
require('../../../store/state/tokenBalances.cjs');
require('../../../store/state/multichainBalances.cjs');
require('../../../shared/utils/functions/getInitialUrl/getInitialUrl.cjs');
require('../../../components/InlineWidget/InlineWidget.cjs');
require('../../../components/IsBrowser/IsBrowser.cjs');
require('../../../components/Popper/Popper/Popper.cjs');
require('../../../components/Popper/PopperContext/PopperContext.cjs');

const EmbeddedAuthChoiceCards = ({ currentAction, supportedAuthenticators, }) => {
    var _a, _b;
    const [selectedAuthType, setSelectedAuthType] = React.useState();
    const { projectSettings } = useInternalDynamicContext.useInternalDynamicContext();
    const { t } = reactI18next.useTranslation();
    const { initAuthMethod, isLoading } = useInitEmbeddedWalletAuthMethod.useInitEmbeddedWalletAuthMethod();
    const { createRootElement } = useElementById.useElementById();
    const iframeContainerRef = createRootElement(constants.iframeContainerId);
    const supportedAuthenticatorsMap = {
        email: {
            badgeKey: 'dyn_embedded_authenticator.email.badge',
            description: t('dyn_embedded_authenticator.email.description', {
                expiration: (_b = (_a = projectSettings === null || projectSettings === void 0 ? void 0 : projectSettings.sdk.embeddedWallets) === null || _a === void 0 ? void 0 : _a.sessionKeyDuration) === null || _b === void 0 ? void 0 : _b.amount,
            }),
            descriptionKey: 'dyn_embedded_authenticator.email.description',
            icon: (jsxRuntime.jsx(Icon.Icon, { color: 'text-tertiary', size: 'small', children: jsxRuntime.jsx(mail.ReactComponent, {}) }, 'one-time-code-icon')),
            titleKey: 'dyn_embedded_authenticator.email.title',
        },
        passkey: {
            badgeKey: 'dyn_embedded_authenticator.passkey.badge',
            description: t('dyn_embedded_authenticator.passkey.description'),
            descriptionKey: 'dyn_embedded_authenticator.passkey.description',
            icon: (jsxRuntime.jsx(PasskeyDeviceIcon.PasskeyDeviceIcon, { defaultIcon: jsxRuntime.jsx(androidTouchId.ReactComponent, { "data-testid": 'default-icon' }) })),
            titleKey: (currentAction === null || currentAction === void 0 ? void 0 : currentAction.type) === 'reveal'
                ? 'dyn_embedded_authenticator.passkey.reveal_title'
                : 'dyn_embedded_authenticator.passkey.title',
        },
    };
    const handleSelection = (authenticatorType) => () => _tslib.__awaiter(void 0, void 0, void 0, function* () {
        setSelectedAuthType(authenticatorType);
        yield initAuthMethod({
            authenticatorType: authenticatorType,
            currentAction,
            iframeContainer: iframeContainerRef.current,
        });
    });
    return (jsxRuntime.jsx("div", { className: 'embedded-auth-choice-cards', children: supportedAuthenticators &&
            supportedAuthenticators.map((authenticatorType) => (jsxRuntime.jsx(ActionCard.ActionCard, { LeadingIcon: supportedAuthenticatorsMap[authenticatorType]
                    .icon, action: handleSelection(authenticatorType), badgeKey: supportedAuthenticatorsMap[authenticatorType]
                    .badgeKey, badgeVariant: authenticatorType === 'passkey' ? 'primary' : 'secondary', descriptionKey: supportedAuthenticatorsMap[authenticatorType]
                    .descriptionKey, description: supportedAuthenticatorsMap[authenticatorType]
                    .description, titleKey: supportedAuthenticatorsMap[authenticatorType]
                    .titleKey, isLoading: isLoading && authenticatorType === selectedAuthType, dataTestId: `embedded-auth-choice__item-${authenticatorType}` }, authenticatorType))) }));
};

exports.EmbeddedAuthChoiceCards = EmbeddedAuthChoiceCards;
