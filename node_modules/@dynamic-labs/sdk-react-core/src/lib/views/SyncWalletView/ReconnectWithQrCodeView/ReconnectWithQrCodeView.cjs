'use client'
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _tslib = require('../../../../../_virtual/_tslib.cjs');
var jsxRuntime = require('react/jsx-runtime');
var React = require('react');
var reactI18next = require('react-i18next');
var walletConnectorCore = require('@dynamic-labs/wallet-connector-core');
var walletBook = require('@dynamic-labs/wallet-book');
var utils = require('@dynamic-labs/utils');
var DefaultPromptModal = require('../../../widgets/DynamicWidget/prompts/DefaultPromptModal/DefaultPromptModal.cjs');
require('../../../components/Accordion/components/AccordionItem/AccordionItem.cjs');
require('@dynamic-labs/iconic');
require('../../../context/ViewContext/ViewContext.cjs');
require('@dynamic-labs/sdk-api-core');
require('../../../shared/logger.cjs');
require('../../../utils/constants/colors.cjs');
require('../../../utils/constants/values.cjs');
require('../../../shared/consts/index.cjs');
require('../../../components/Alert/Alert.cjs');
require('../../../events/dynamicEvents.cjs');
require('../../../context/DynamicContext/DynamicContext.cjs');
require('../../../store/state/loadingAndLifecycle/loadingAndLifecycle.cjs');
require('../../../store/state/authMode/authMode.cjs');
require('../../../context/CaptchaContext/CaptchaContext.cjs');
require('../../../context/ErrorContext/ErrorContext.cjs');
require('@dynamic-labs/multi-wallet');
require('react-international-phone');
require('../../../store/state/nonce/nonce.cjs');
require('@dynamic-labs-sdk/client/core');
require('../../../client/client.cjs');
require('@dynamic-labs-sdk/client');
require('../../../store/state/projectSettings/projectSettings.cjs');
require('../../../config/ApiEndpoint.cjs');
require('../../../locale/locale.cjs');
require('../../../store/state/dynamicContextProps/dynamicContextProps.cjs');
require('../../../store/state/primaryWalletId/primaryWalletId.cjs');
require('../../../store/state/connectedWalletsInfo/connectedWalletsInfo.cjs');
require('../../../context/AccessDeniedContext/AccessDeniedContext.cjs');
require('../../../context/AccountExistsContext/AccountExistsContext.cjs');
require('../../../context/UserWalletsContext/UserWalletsContext.cjs');
require('../../../context/VerificationContext/VerificationContext.cjs');
require('react-dom');
require('../../../utils/functions/compareChains/compareChains.cjs');
require('../../Passkey/utils/findPrimaryEmbeddedChain/findPrimaryEmbeddedChain.cjs');
var ThemeContext = require('../../../context/ThemeContext/ThemeContext.cjs');
require('../../../utils/hooks/useUserUpdateRequest/useUpdateUser/userFieldsSchema.cjs');
require('bs58');
var usePromise = require('../../../utils/hooks/usePromise/usePromise.cjs');
require('@dynamic-labs/types');
require('../../../context/SocialRedirectContext/SocialRedirectContext.cjs');
require('../../../context/LoadingContext/LoadingContext.cjs');
require('../../../context/WalletContext/WalletContext.cjs');
require('../../../utils/hooks/useEmbeddedWallet/useSecureEnclaveEmbeddedWallet/constants.cjs');
require('yup');
require('../../../context/MockContext/MockContext.cjs');
require('../../CollectUserDataView/useFields.cjs');
require('../../../context/FieldsStateContext/FieldsStateContext.cjs');
require('../../../context/UserFieldEditorContext/UserFieldEditorContext.cjs');
require('@dynamic-labs/rpc-providers');
require('../../../store/state/walletOptions/walletOptions.cjs');
require('../../../context/FooterAnimationContext/index.cjs');
require('../../../components/ShadowDOM/ShadowDOM.cjs');
require('../../../components/Transition/ZoomTransition/ZoomTransition.cjs');
require('../../../components/Transition/SlideInUpTransition/SlideInUpTransition.cjs');
require('../../../components/Transition/OpacityTransition/OpacityTransition.cjs');
require('../../../components/OverlayCardBase/OverlayCardTarget/OverlayCardTarget.cjs');
require('../../../context/WalletGroupContext/WalletGroupContext.cjs');
require('../../../widgets/DynamicWidget/components/DynamicWidgetHeader/DynamicWidgetHeader.cjs');
require('react-focus-lock');
require('../../../widgets/DynamicWidget/context/DynamicWidgetContext.cjs');
require('../../../components/IconButton/IconButton.cjs');
require('../../../components/MenuList/Dropdown/Dropdown.cjs');
require('formik');
require('../../../utils/hooks/useSubdomainCheck/useSubdomainCheck.cjs');
require('../../../store/state/sendBalances.cjs');
require('../../../components/Input/Input.cjs');
require('../../../components/OverlayCard/OverlayCard.cjs');
require('../../TransactionConfirmationView/TransactionConfirmationView.cjs');
require('../../../components/PasskeyCreatedSuccessBanner/PasskeyCreatedSuccessBanner.cjs');
require('../../../context/PasskeyContext/PasskeyContext.cjs');
require('../../../widgets/DynamicWidget/components/PasskeyCard/PasskeyCard.cjs');
require('../../../context/OnrampContext/OnrampContext.cjs');
require('../../../../index.cjs');
require('../../../widgets/DynamicWidget/helpers/convertExchangeKeyAndProviderEnum.cjs');
require('qrcode');
require('../../../widgets/DynamicWidget/views/ReceiveWalletFunds/ReceiveWalletFunds.cjs');
var MobileWalletRedirectView = require('../../MobileWalletRedirectView/MobileWalletRedirectView.cjs');
require('../../../context/IpConfigurationContext/IpConfigurationContext.cjs');
require('../../../context/ConnectWithOtpContext/ConnectWithOtpContext.cjs');
require('../../../widgets/DynamicBridgeWidget/views/WalletsView/components/SecondaryWallets/SecondaryWallets.cjs');
require('@hcaptcha/react-hcaptcha');
require('../../ExchangeWhitelistWarning/ExchangeWhitelistWarning.cjs');
require('../../../context/ErrorContext/hooks/useErrorText/useErrorText.cjs');
require('../../MfaChooseDeviceView/getMfaOptions/getMfaOptions.cjs');
require('../../../store/state/connectorsInitializing/connectorsInitializing.cjs');
require('../../../store/state/tokenBalances.cjs');
require('../../../store/state/multichainBalances.cjs');
require('../../../shared/utils/functions/getInitialUrl/getInitialUrl.cjs');
require('../../../components/InlineWidget/InlineWidget.cjs');
require('../../../components/IsBrowser/IsBrowser.cjs');
require('../../../components/Popper/Popper/Popper.cjs');
require('../../../components/Popper/PopperContext/PopperContext.cjs');
var QrCodeWrapper = require('../../../components/QrCodeWrapper/QrCodeWrapper.cjs');

const ReconnectWithQrCodeView = ({ onCancel, onSuccess, connector, expectedAddress, }) => {
    var _a;
    const { t } = reactI18next.useTranslation();
    const { theme: { theme }, } = ThemeContext.useThemeContext();
    const { name: themeName } = theme;
    const [qrcodeUri, setQrcodeUri] = React.useState();
    const [desktopUri, setDesktopUri] = React.useState();
    const triggeredGetAddress = React.useRef(false);
    const { retrigger } = usePromise.usePromise(() => _tslib.__awaiter(void 0, void 0, void 0, function* () {
        if (triggeredGetAddress.current) {
            return;
        }
        triggeredGetAddress.current = true;
        const publicAddress = yield connector.getAddress({
            onDesktopUri: (uri) => _tslib.__awaiter(void 0, void 0, void 0, function* () {
                setDesktopUri(uri);
            }),
            onDisplayUri: (uri) => _tslib.__awaiter(void 0, void 0, void 0, function* () {
                setQrcodeUri(uri);
            }),
        });
        if (publicAddress &&
            walletConnectorCore.isSameAddress(publicAddress, expectedAddress, connector.connectedChain)) {
            onSuccess();
            return;
        }
        yield connector.endSession();
        onCancel();
    }), { deps: [connector], retries: 3 });
    const retryMobileConnection = () => {
        triggeredGetAddress.current = false;
        retrigger();
    };
    return (jsxRuntime.jsx(DefaultPromptModal.DefaultPromptModal, { dataTestId: 'reconnect-qr-code', title: t('dyn_sync_wallet.reconnect_with_qr_code.title'), onClose: onCancel, children: !utils.isMobile() ? (jsxRuntime.jsx(QrCodeWrapper.QrCodeWrapper, { uri: qrcodeUri || '', desktopUri: desktopUri, accentColor: 
            /* istanbul ignore next */
            themeName === 'dark'
                ? theme.colors.textPrimary
                : (_a = connector.metadata.brandColor) !== null && _a !== void 0 ? _a : '', icon: 
            // eslint-disable-next-line react/jsx-wrap-multilines
            jsxRuntime.jsx(walletBook.WalletIcon, { icon: connector.metadata.icon, walletKey: connector.key }), showCopyToClipboardButton: true, walletConnector: connector })) : (jsxRuntime.jsx(MobileWalletRedirectView.MobileWalletRedirectView, { onRetry: retryMobileConnection, connector: connector })) }));
};

exports.ReconnectWithQrCodeView = ReconnectWithQrCodeView;
