'use client'
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _tslib = require('../../../../_virtual/_tslib.cjs');
var jsxRuntime = require('react/jsx-runtime');
var React = require('react');
var formik = require('formik');
var reactI18next = require('react-i18next');
require('@dynamic-labs/utils');
require('../../components/Accordion/components/AccordionItem/AccordionItem.cjs');
require('@dynamic-labs/iconic');
require('../../context/ViewContext/ViewContext.cjs');
require('@dynamic-labs/sdk-api-core');
var logger = require('../../shared/logger.cjs');
require('@dynamic-labs/wallet-connector-core');
require('@dynamic-labs/wallet-book');
require('../../utils/constants/colors.cjs');
require('../../utils/constants/values.cjs');
require('../../shared/consts/index.cjs');
require('../../components/Alert/Alert.cjs');
require('../../events/dynamicEvents.cjs');
require('../../context/DynamicContext/DynamicContext.cjs');
require('../../store/state/loadingAndLifecycle/loadingAndLifecycle.cjs');
require('../../store/state/authMode/authMode.cjs');
var useInternalDynamicContext = require('../../context/DynamicContext/useDynamicContext/useInternalDynamicContext/useInternalDynamicContext.cjs');
require('../../context/CaptchaContext/CaptchaContext.cjs');
require('../../context/ErrorContext/ErrorContext.cjs');
require('@dynamic-labs/multi-wallet');
require('react-international-phone');
require('../../store/state/nonce/nonce.cjs');
require('@dynamic-labs-sdk/client/core');
require('../../client/client.cjs');
require('@dynamic-labs-sdk/client');
require('../../store/state/projectSettings/projectSettings.cjs');
require('../../config/ApiEndpoint.cjs');
require('../../locale/locale.cjs');
require('../../store/state/dynamicContextProps/dynamicContextProps.cjs');
require('../../store/state/primaryWalletId/primaryWalletId.cjs');
require('../../store/state/connectedWalletsInfo/connectedWalletsInfo.cjs');
require('../../context/AccessDeniedContext/AccessDeniedContext.cjs');
require('../../context/AccountExistsContext/AccountExistsContext.cjs');
require('../../context/UserWalletsContext/UserWalletsContext.cjs');
require('../../context/VerificationContext/VerificationContext.cjs');
require('react-dom');
require('../../utils/functions/compareChains/compareChains.cjs');
require('../Passkey/utils/findPrimaryEmbeddedChain/findPrimaryEmbeddedChain.cjs');
require('../../context/ThemeContext/ThemeContext.cjs');
require('../../utils/hooks/useUserUpdateRequest/useUpdateUser/userFieldsSchema.cjs');
require('bs58');
require('@dynamic-labs/types');
require('../../context/SocialRedirectContext/SocialRedirectContext.cjs');
require('../../context/LoadingContext/LoadingContext.cjs');
require('../../context/WalletContext/WalletContext.cjs');
require('../../utils/hooks/useEmbeddedWallet/useSecureEnclaveEmbeddedWallet/constants.cjs');
require('yup');
require('../../context/MockContext/MockContext.cjs');
require('../CollectUserDataView/useFields.cjs');
require('../../context/FieldsStateContext/FieldsStateContext.cjs');
require('../../context/UserFieldEditorContext/UserFieldEditorContext.cjs');
require('@dynamic-labs/rpc-providers');
require('../../store/state/walletOptions/walletOptions.cjs');
var Typography = require('../../components/Typography/Typography.cjs');
require('../../context/FooterAnimationContext/index.cjs');
require('../../components/ShadowDOM/ShadowDOM.cjs');
require('../../components/Transition/ZoomTransition/ZoomTransition.cjs');
require('../../components/Transition/SlideInUpTransition/SlideInUpTransition.cjs');
require('../../components/Transition/OpacityTransition/OpacityTransition.cjs');
require('../../components/OverlayCardBase/OverlayCardTarget/OverlayCardTarget.cjs');
require('../../context/WalletGroupContext/WalletGroupContext.cjs');
require('../../widgets/DynamicWidget/components/DynamicWidgetHeader/DynamicWidgetHeader.cjs');
require('react-focus-lock');
var Divider = require('../../components/Divider/Divider.cjs');
require('../../widgets/DynamicWidget/context/DynamicWidgetContext.cjs');
require('../../components/IconButton/IconButton.cjs');
require('../../components/MenuList/Dropdown/Dropdown.cjs');
var useSubdomainCheck = require('../../utils/hooks/useSubdomainCheck/useSubdomainCheck.cjs');
require('../../store/state/sendBalances.cjs');
var Input = require('../../components/Input/Input.cjs');
require('../../components/OverlayCard/OverlayCard.cjs');
require('../TransactionConfirmationView/TransactionConfirmationView.cjs');
require('../../components/PasskeyCreatedSuccessBanner/PasskeyCreatedSuccessBanner.cjs');
require('../../context/PasskeyContext/PasskeyContext.cjs');
require('../../widgets/DynamicWidget/components/PasskeyCard/PasskeyCard.cjs');
require('../../context/OnrampContext/OnrampContext.cjs');
require('../../../index.cjs');
require('../../widgets/DynamicWidget/helpers/convertExchangeKeyAndProviderEnum.cjs');
require('qrcode');
require('../../widgets/DynamicWidget/views/ReceiveWalletFunds/ReceiveWalletFunds.cjs');
require('../../context/IpConfigurationContext/IpConfigurationContext.cjs');
require('../../context/ConnectWithOtpContext/ConnectWithOtpContext.cjs');
require('../../widgets/DynamicBridgeWidget/views/WalletsView/components/SecondaryWallets/SecondaryWallets.cjs');
require('@hcaptcha/react-hcaptcha');
require('../ExchangeWhitelistWarning/ExchangeWhitelistWarning.cjs');
require('../../context/ErrorContext/hooks/useErrorText/useErrorText.cjs');
require('../MfaChooseDeviceView/getMfaOptions/getMfaOptions.cjs');
require('../../store/state/connectorsInitializing/connectorsInitializing.cjs');
require('../../store/state/tokenBalances.cjs');
require('../../store/state/multichainBalances.cjs');
require('../../shared/utils/functions/getInitialUrl/getInitialUrl.cjs');
var useDebounce = require('../../utils/hooks/useDebounce/useDebounce.cjs');
require('../../components/InlineWidget/InlineWidget.cjs');
require('../../components/IsBrowser/IsBrowser.cjs');
require('../../components/Popper/Popper/Popper.cjs');
require('../../components/Popper/PopperContext/PopperContext.cjs');

const SubdomainField = ({ showDetails = false, }) => {
    const { t } = reactI18next.useTranslation();
    const { values, setFieldValue, initialValues } = formik.useFormikContext();
    const checkSubdomain = useSubdomainCheck.useSubdomainCheck();
    const { projectSettings } = useInternalDynamicContext.useInternalDynamicContext();
    const [checkResponse, setCheckResponse] = React.useState(undefined);
    // When the subdomain is saved, the value is stored in a metadata object
    // instead, so we need to default to the initial value to prevent the
    // value from disappearing
    const subDomainValue = React.useMemo(() => values['name-service-subdomain-handle'] === undefined
        ? initialValues['name-service-subdomain-handle'] || ''
        : values['name-service-subdomain-handle'], [values, initialValues]);
    const ensDomain = React.useMemo(() => {
        var _a;
        const domain = (_a = projectSettings === null || projectSettings === void 0 ? void 0 : projectSettings.sdk.nameService) === null || _a === void 0 ? void 0 : _a.evm.domain;
        if (!domain) {
            return undefined;
        }
        return `.${domain}`;
    }, [projectSettings]);
    const runCheckSubdomain = React.useCallback((value) => _tslib.__awaiter(void 0, void 0, void 0, function* () {
        if (value !== '' &&
            value !== initialValues['name-service-subdomain-handle']) {
            const checkReponse = yield checkSubdomain({
                subdomain: value,
            });
            setCheckResponse(checkReponse);
        }
        else {
            setCheckResponse(undefined);
        }
    }), [checkSubdomain, initialValues]);
    const debouncedCheckSubdomain = useDebounce.useDebounce(runCheckSubdomain, 500);
    const onChange = (e) => _tslib.__awaiter(void 0, void 0, void 0, function* () {
        setFieldValue('name-service-subdomain-handle', e.target.value);
        debouncedCheckSubdomain(e.target.value);
    });
    const message = React.useMemo(() => {
        if (!checkResponse) {
            return undefined;
        }
        if (checkResponse === null || checkResponse === void 0 ? void 0 : checkResponse.error) {
            return t('dyn_subdomain_field.error');
        }
        if (!(checkResponse === null || checkResponse === void 0 ? void 0 : checkResponse.available)) {
            return t('dyn_subdomain_field.not_available');
        }
        return t('dyn_subdomain_field.available');
    }, [checkResponse, t]);
    if (!ensDomain) {
        logger.logger.error('Failed to get ENS domain from settings.sdk.nameService');
        return null;
    }
    return (jsxRuntime.jsxs(jsxRuntime.Fragment, { children: [jsxRuntime.jsxs("div", { className: 'subdomain-field__container', children: [jsxRuntime.jsx(Input.Input, { id: 'subdomain-field', className: 'input__container--available', value: subDomainValue, onChange: onChange, label: t('dyn_subdomain_field.label'), error: message && !(checkResponse === null || checkResponse === void 0 ? void 0 : checkResponse.available) ? true : false, success: checkResponse === null || checkResponse === void 0 ? void 0 : checkResponse.available, message: message }), jsxRuntime.jsx(Typography.Typography, { as: 'span', color: 'secondary', variant: 'body_normal', children: ensDomain })] }), showDetails && (jsxRuntime.jsx(Typography.Typography, { as: 'p', color: 'secondary', variant: 'body_small', className: 'subdomain-field__details', copykey: 'dyn_subdomain_field.details', children: t('dyn_subdomain_field.details') })), jsxRuntime.jsx(Divider.Divider, {})] }));
};

exports.SubdomainField = SubdomainField;
