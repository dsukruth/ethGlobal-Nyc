'use client'
import { jsx } from 'react/jsx-runtime';
import { useState } from 'react';
import { useTranslation } from 'react-i18next';
import { SdkViewSectionType } from '@dynamic-labs/sdk-api-core';
import '@dynamic-labs/utils';
import '../../../components/Accordion/components/AccordionItem/AccordionItem.js';
import '@dynamic-labs/iconic';
import '../../../context/ViewContext/ViewContext.js';
import '../../../../../_virtual/_tslib.js';
import '../../../shared/logger.js';
import '@dynamic-labs/wallet-connector-core';
import '@dynamic-labs/wallet-book';
import '../../../utils/constants/colors.js';
import '../../../utils/constants/values.js';
import '../../../shared/consts/index.js';
import '../../../components/Alert/Alert.js';
import '../../../events/dynamicEvents.js';
import '../../../context/DynamicContext/DynamicContext.js';
import '../../../store/state/loadingAndLifecycle/loadingAndLifecycle.js';
import '../../../store/state/authMode/authMode.js';
import '../../../context/CaptchaContext/CaptchaContext.js';
import '../../../context/ErrorContext/ErrorContext.js';
import '@dynamic-labs/multi-wallet';
import 'react-international-phone';
import '../../../store/state/nonce/nonce.js';
import '@dynamic-labs-sdk/client/core';
import '../../../client/client.js';
import '@dynamic-labs-sdk/client';
import '../../../store/state/projectSettings/projectSettings.js';
import '../../../config/ApiEndpoint.js';
import '../../../locale/locale.js';
import '../../../store/state/dynamicContextProps/dynamicContextProps.js';
import '../../../store/state/primaryWalletId/primaryWalletId.js';
import '../../../store/state/connectedWalletsInfo/connectedWalletsInfo.js';
import '../../../context/AccessDeniedContext/AccessDeniedContext.js';
import '../../../context/AccountExistsContext/AccountExistsContext.js';
import '../../../context/UserWalletsContext/UserWalletsContext.js';
import '../../../context/VerificationContext/VerificationContext.js';
import 'react-dom';
import '../../../utils/functions/compareChains/compareChains.js';
import '../../Passkey/utils/findPrimaryEmbeddedChain/findPrimaryEmbeddedChain.js';
import '../../../context/ThemeContext/ThemeContext.js';
import '../../../utils/hooks/useUserUpdateRequest/useUpdateUser/userFieldsSchema.js';
import 'bs58';
import '@dynamic-labs/types';
import '../../../context/SocialRedirectContext/SocialRedirectContext.js';
import { useLoadingContext } from '../../../context/LoadingContext/LoadingContext.js';
import '../../../context/WalletContext/WalletContext.js';
import '../../../utils/hooks/useEmbeddedWallet/useSecureEnclaveEmbeddedWallet/constants.js';
import 'yup';
import '../../../context/MockContext/MockContext.js';
import '../../CollectUserDataView/useFields.js';
import '../../../context/FieldsStateContext/FieldsStateContext.js';
import '../../../context/UserFieldEditorContext/UserFieldEditorContext.js';
import '@dynamic-labs/rpc-providers';
import '../../../store/state/walletOptions/walletOptions.js';
import { Typography } from '../../../components/Typography/Typography.js';
import '../../../context/FooterAnimationContext/index.js';
import '../../../components/ShadowDOM/ShadowDOM.js';
import '../../../components/Transition/ZoomTransition/ZoomTransition.js';
import '../../../components/Transition/SlideInUpTransition/SlideInUpTransition.js';
import '../../../components/Transition/OpacityTransition/OpacityTransition.js';
import '../../../components/OverlayCardBase/OverlayCardTarget/OverlayCardTarget.js';
import '../../../context/WalletGroupContext/WalletGroupContext.js';
import '../../../widgets/DynamicWidget/components/DynamicWidgetHeader/DynamicWidgetHeader.js';
import 'react-focus-lock';
import { Divider } from '../../../components/Divider/Divider.js';
import '../../../widgets/DynamicWidget/context/DynamicWidgetContext.js';
import '../../../components/IconButton/IconButton.js';
import '../../../components/MenuList/Dropdown/Dropdown.js';
import 'formik';
import '../../../utils/hooks/useSubdomainCheck/useSubdomainCheck.js';
import '../../../store/state/sendBalances.js';
import '../../../components/Input/Input.js';
import '../../../components/OverlayCard/OverlayCard.js';
import '../../TransactionConfirmationView/TransactionConfirmationView.js';
import '../../../components/PasskeyCreatedSuccessBanner/PasskeyCreatedSuccessBanner.js';
import '../../../context/PasskeyContext/PasskeyContext.js';
import '../../../widgets/DynamicWidget/components/PasskeyCard/PasskeyCard.js';
import '../../../context/OnrampContext/OnrampContext.js';
import '../../../../index.js';
import '../../../widgets/DynamicWidget/helpers/convertExchangeKeyAndProviderEnum.js';
import 'qrcode';
import '../../../widgets/DynamicWidget/views/ReceiveWalletFunds/ReceiveWalletFunds.js';
import '../../../context/IpConfigurationContext/IpConfigurationContext.js';
import { LoginEmailForm } from '../sections/EmailSignInSection/LoginEmailForm.js';
import '../../../widgets/DynamicBridgeWidget/views/WalletsView/components/SecondaryWallets/SecondaryWallets.js';
import '@hcaptcha/react-hcaptcha';
import '../../../context/ConnectWithOtpContext/ConnectWithOtpContext.js';
import '../../ExchangeWhitelistWarning/ExchangeWhitelistWarning.js';
import '../../../context/ErrorContext/hooks/useErrorText/useErrorText.js';
import { PasskeySignInSection } from '../sections/PasskeySignInSection/PasskeySignInSection.js';
import { PhoneNumberSignInSection } from '../sections/PhoneNumberSignInSection/PhoneNumberSignInSection.js';
import { SocialSignInSection } from '../sections/SocialSignInSection/SocialSignInSection.js';
import { ToggleableSection } from '../sections/ToggleableSection/ToggleableSection.js';
import { WalletSignInSection } from '../sections/WalletSignInSection/WalletSignInSection.js';
import '../../MfaChooseDeviceView/getMfaOptions/getMfaOptions.js';
import '../../../store/state/connectorsInitializing/connectorsInitializing.js';
import '../../../store/state/tokenBalances.js';
import '../../../store/state/multichainBalances.js';
import '../../../shared/utils/functions/getInitialUrl/getInitialUrl.js';
import '../../../components/InlineWidget/InlineWidget.js';
import '../../../components/IsBrowser/IsBrowser.js';
import '../../../components/Popper/Popper/Popper.js';
import '../../../components/Popper/PopperContext/PopperContext.js';

const LoginViewSection = ({ viewSection, index, walletCount, gotToWalletList, }) => {
    const { loading } = useLoadingContext();
    const { t } = useTranslation();
    const [isLoading, setIsLoading] = useState(loading);
    switch (viewSection.type) {
        case SdkViewSectionType.Separator:
            return jsx(Divider, { text: viewSection.label });
        case SdkViewSectionType.Email:
            return (jsx(LoginEmailForm, { onSubmit: () => setIsLoading(true), onSubmitError: () => setIsLoading(false), isLoading: isLoading }));
        case SdkViewSectionType.Phone:
            return (jsx(PhoneNumberSignInSection, { onSubmit: () => setIsLoading(true), onSubmitError: () => setIsLoading(false), isLoading: isLoading }));
        case SdkViewSectionType.EmailAndPhone:
            // eslint-disable-next-line no-case-declarations
            const sections = [
                {
                    button: t('dyn_login.email_or_phone.use_phone'),
                    buttonCopyKey: 'dyn_login.email_or_phone.use_phone',
                    component: (jsx(LoginEmailForm, { onSubmit: () => setIsLoading(true), onSubmitError: () => setIsLoading(false), isLoading: isLoading })),
                    label: t('dyn_login.email_or_phone.prefer_phone'),
                    labelCopyKey: 'dyn_login.email_or_phone.prefer_phone',
                },
                {
                    button: t('dyn_login.email_or_phone.use_email'),
                    buttonCopyKey: 'dyn_login.email_or_phone.use_email',
                    component: (jsx(PhoneNumberSignInSection, { onSubmit: () => setIsLoading(true), onSubmitError: () => setIsLoading(false), isLoading: isLoading })),
                    label: t('dyn_login.email_or_phone.prefer_email'),
                    labelCopyKey: 'dyn_login.email_or_phone.prefer_email',
                },
            ];
            if (viewSection.defaultItem === 'phone')
                sections.reverse();
            return jsx(ToggleableSection, { sections: sections });
        case SdkViewSectionType.Wallet:
            return (jsx(WalletSignInSection, { numberOfItemsToShow: viewSection.numOfItemsToDisplay || 0, onSubmit: gotToWalletList, isLoading: isLoading }));
        case SdkViewSectionType.Social:
            return (jsx(SocialSignInSection, { collapsedLayout: walletCount > 1, sectionData: viewSection }));
        case SdkViewSectionType.Passkey:
            return (jsx(PasskeySignInSection, { onSubmit: () => setIsLoading(true), onSubmitError: () => setIsLoading(false), isLoading: isLoading }));
        case SdkViewSectionType.Text:
            return viewSection.label ? (jsx(Typography, { variant: 'body_normal', color: 'secondary', align: viewSection.alignment, className: 'login-view__text', "data-testid": 'login-view-section__text', children: viewSection.label })) : null;
    }
};

export { LoginViewSection };
