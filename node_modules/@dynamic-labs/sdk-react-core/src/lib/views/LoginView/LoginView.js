'use client'
import { jsx, jsxs, Fragment } from 'react/jsx-runtime';
import { useMemo } from 'react';
import { SdkViewSectionType } from '@dynamic-labs/sdk-api-core';
import { isMobile } from '@dynamic-labs/utils';
import { ErrorContainer } from '../../components/ErrorContainer/ErrorContainer.js';
import { useErrorText } from '../../context/ErrorContext/hooks/useErrorText/useErrorText.js';
import { useSocialRedirectContext } from '../../context/SocialRedirectContext/SocialRedirectContext.js';
import { useViewContext } from '../../context/ViewContext/ViewContext.js';
import { DefaultFooter } from '../../layout/DynamicAuthLayout/DefaultFooter/DefaultFooter.js';
import { classNames } from '../../utils/functions/classNames/classNames.js';
import { useAuthLayoutChecks } from '../../utils/hooks/useAuthLayoutChecks/useAuthLayoutChecks.js';
import { useWalletItemActions } from '../../utils/hooks/useWalletItemActions/useWalletItemActions.js';
import { FarcasterQrCodeView } from '../FarcasterQrCodeView/FarcasterQrCodeView.js';
import { WalletList } from '../WalletList/WalletList.js';
import { LoginViewSection } from './LoginViewSection/LoginViewSection.js';
import { useLoginView } from './useLoginView/useLoginView.js';
import { showFarcasterQrCodeView } from './utils/showFarcasterQrCodeView/showFarcasterQrCodeView.js';

const LoginView = () => {
    var _a;
    const { errorText } = useErrorText();
    const { pushView } = useViewContext();
    const { isWalletOnly, loginViewSections } = useLoginView();
    const { enabledSocialProviders } = useSocialRedirectContext();
    const { showDefaultFooter } = useAuthLayoutChecks();
    const { handleWalletItemClick } = useWalletItemActions();
    const numOfWallets = ((_a = loginViewSections.find((section) => section.type === SdkViewSectionType.Wallet)) === null || _a === void 0 ? void 0 : _a.numOfItemsToDisplay) || 0;
    const renderViewSections = useMemo(() => loginViewSections.map((viewSection, index) => (jsx("div", { className: classNames('login-view__scroll__section', `login-view__scroll__section--${viewSection.type}`), children: jsx(LoginViewSection, { gotToWalletList: () => pushView('login-with-email-or-wallet-full-wallet-list'), index: index, viewSection: viewSection, walletCount: numOfWallets }) }, `${viewSection.type}__${index}`))), [loginViewSections, numOfWallets, pushView]);
    const errorElement = errorText && (jsx(ErrorContainer, { className: 'login-view__error-container', withIcon: false, children: errorText }));
    if (showFarcasterQrCodeView(loginViewSections, enabledSocialProviders)) {
        return (jsxs(Fragment, { children: [errorElement, jsx(FarcasterQrCodeView, {})] }));
    }
    if (isWalletOnly) {
        return (jsx(WalletList, { onSelectWallet: handleWalletItemClick, showDefaultFooter: showDefaultFooter }));
    }
    const shouldShowFooter = isMobile() && showDefaultFooter;
    return (jsxs(Fragment, { children: [errorElement, jsx("div", { className: classNames('login-view__container', {
                    'login-view__container--error': Boolean(errorText),
                }), children: jsx("div", { className: 'login-view__scroll', "data-testid": 'login-view-scroll', children: renderViewSections }) }), shouldShowFooter && jsx(DefaultFooter, { hideBorder: true })] }));
};

export { LoginView };
