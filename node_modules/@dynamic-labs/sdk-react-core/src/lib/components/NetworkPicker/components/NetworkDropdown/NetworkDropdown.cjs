'use client'
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _tslib = require('../../../../../../_virtual/_tslib.cjs');
var jsxRuntime = require('react/jsx-runtime');
var React = require('react');
var walletConnectorCore = require('@dynamic-labs/wallet-connector-core');
require('@dynamic-labs/sdk-api-core');
var logger = require('../../../../shared/logger.cjs');
require('@dynamic-labs/iconic');
require('../../../../context/ViewContext/ViewContext.cjs');
require('@dynamic-labs/wallet-book');
require('@dynamic-labs/utils');
require('../../../../utils/constants/colors.cjs');
require('../../../../utils/constants/values.cjs');
require('../../../../shared/consts/index.cjs');
var isNetworkUnsupported = require('../../../../utils/functions/isNetworkUnsupported/isNetworkUnsupported.cjs');
var usePromise = require('../../../../utils/hooks/usePromise/usePromise.cjs');
require('../../../MenuList/Dropdown/Dropdown.cjs');
var MenuList = require('../../../MenuList/MenuList/MenuList.cjs');
var NetworkAction = require('../NetworkAction/NetworkAction.cjs');

const NetworkDropdown = ({ anchorRef, connector, customCallbackOnSuccess, setIsNetworkPickerOpen, isNetworkPickerOpen, currentNetwork, className, checkboxClassName, }) => {
    const [newNetworkId, setNewNetworkId] = React.useState(undefined);
    const { data: wcSupportedWalletNetworks } = usePromise.usePromise(() => walletConnectorCore.isWalletConnectConnector(connector)
        ? connector === null || connector === void 0 ? void 0 : connector.getSupportedNetworks()
        : Promise.resolve(undefined), {
        deps: [connector, isNetworkPickerOpen],
        enabled: connector.isWalletConnect,
        initialData: undefined,
    });
    if (!connector) {
        return null;
    }
    const enabledNetworks = connector.getEnabledNetworks();
    const shouldAllowOpenDropdown = isNetworkUnsupported.isNetworkUnsupported(currentNetwork, enabledNetworks) ||
        enabledNetworks.length > 1;
    if (!shouldAllowOpenDropdown) {
        return null;
    }
    const handleNetworkChange = (networkId) => _tslib.__awaiter(void 0, void 0, void 0, function* () {
        setNewNetworkId(networkId);
        try {
            yield connector.switchNetwork({
                networkChainId: networkId,
            });
            customCallbackOnSuccess === null || customCallbackOnSuccess === void 0 ? void 0 : customCallbackOnSuccess();
        }
        catch (error) {
            /* istanbul ignore next */
            logger.logger.debug(error);
        }
        finally {
            setNewNetworkId(undefined);
            setIsNetworkPickerOpen(false);
        }
    });
    return (jsxRuntime.jsx(MenuList.MenuList, { className: className, isOpen: isNetworkPickerOpen, onClickClose: () => setIsNetworkPickerOpen(false), popperProps: {
            anchorOrigin: 'bottom-left',
            anchorRef,
        }, mobileTitle: 'Select network', children: enabledNetworks.map(({ name, networkId, vanityName, iconUrls }) => (jsxRuntime.jsx(NetworkAction.NetworkAction, { iconUrl: iconUrls === null || iconUrls === void 0 ? void 0 : iconUrls[0], networkId: networkId, networkName: vanityName || name, network: currentNetwork, onClick: handleNetworkChange, checkboxClassName: checkboxClassName, newNetworkId: newNetworkId, notSupported: wcSupportedWalletNetworks &&
                !wcSupportedWalletNetworks.includes(`${networkId}`) }, networkId))) }));
};

exports.NetworkDropdown = NetworkDropdown;
