'use client'
import { __awaiter } from '../../../../../../_virtual/_tslib.js';
import { jsx } from 'react/jsx-runtime';
import { useState } from 'react';
import { isWalletConnectConnector } from '@dynamic-labs/wallet-connector-core';
import '@dynamic-labs/sdk-api-core';
import { logger } from '../../../../shared/logger.js';
import '@dynamic-labs/iconic';
import '../../../../context/ViewContext/ViewContext.js';
import '@dynamic-labs/wallet-book';
import '@dynamic-labs/utils';
import '../../../../utils/constants/colors.js';
import '../../../../utils/constants/values.js';
import '../../../../shared/consts/index.js';
import { isNetworkUnsupported } from '../../../../utils/functions/isNetworkUnsupported/isNetworkUnsupported.js';
import { usePromise } from '../../../../utils/hooks/usePromise/usePromise.js';
import '../../../MenuList/Dropdown/Dropdown.js';
import { MenuList } from '../../../MenuList/MenuList/MenuList.js';
import { NetworkAction } from '../NetworkAction/NetworkAction.js';

const NetworkDropdown = ({ anchorRef, connector, customCallbackOnSuccess, setIsNetworkPickerOpen, isNetworkPickerOpen, currentNetwork, className, checkboxClassName, }) => {
    const [newNetworkId, setNewNetworkId] = useState(undefined);
    const { data: wcSupportedWalletNetworks } = usePromise(() => isWalletConnectConnector(connector)
        ? connector === null || connector === void 0 ? void 0 : connector.getSupportedNetworks()
        : Promise.resolve(undefined), {
        deps: [connector, isNetworkPickerOpen],
        enabled: connector.isWalletConnect,
        initialData: undefined,
    });
    if (!connector) {
        return null;
    }
    const enabledNetworks = connector.getEnabledNetworks();
    const shouldAllowOpenDropdown = isNetworkUnsupported(currentNetwork, enabledNetworks) ||
        enabledNetworks.length > 1;
    if (!shouldAllowOpenDropdown) {
        return null;
    }
    const handleNetworkChange = (networkId) => __awaiter(void 0, void 0, void 0, function* () {
        setNewNetworkId(networkId);
        try {
            yield connector.switchNetwork({
                networkChainId: networkId,
            });
            customCallbackOnSuccess === null || customCallbackOnSuccess === void 0 ? void 0 : customCallbackOnSuccess();
        }
        catch (error) {
            /* istanbul ignore next */
            logger.debug(error);
        }
        finally {
            setNewNetworkId(undefined);
            setIsNetworkPickerOpen(false);
        }
    });
    return (jsx(MenuList, { className: className, isOpen: isNetworkPickerOpen, onClickClose: () => setIsNetworkPickerOpen(false), popperProps: {
            anchorOrigin: 'bottom-left',
            anchorRef,
        }, mobileTitle: 'Select network', children: enabledNetworks.map(({ name, networkId, vanityName, iconUrls }) => (jsx(NetworkAction, { iconUrl: iconUrls === null || iconUrls === void 0 ? void 0 : iconUrls[0], networkId: networkId, networkName: vanityName || name, network: currentNetwork, onClick: handleNetworkChange, checkboxClassName: checkboxClassName, newNetworkId: newNetworkId, notSupported: wcSupportedWalletNetworks &&
                !wcSupportedWalletNetworks.includes(`${networkId}`) }, networkId))) }));
};

export { NetworkDropdown };
