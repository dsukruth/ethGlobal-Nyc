'use client'
import { jsx, jsxs } from 'react/jsx-runtime';
import '@dynamic-labs/sdk-api-core';
import '../../../shared/logger.js';
import '@dynamic-labs/iconic';
import '@dynamic-labs/wallet-connector-core';
import 'react';
import '../../../context/ViewContext/ViewContext.js';
import '@dynamic-labs/wallet-book';
import '@dynamic-labs/utils';
import '../../../utils/constants/colors.js';
import '../../../utils/constants/values.js';
import { tooltipZIndex } from '../../../shared/consts/index.js';
import { Badge } from '../../Badge/Badge.js';
import { Icon } from '../../Icon/Icon.js';
import { Typography } from '../../Typography/Typography.js';

const DropdownMenu = ({ options, setShowMenu, }) => (jsx("div", { className: 'dots-menu-dropdown__container', style: { zIndex: tooltipZIndex }, children: options.map((option) => option.hide ? null : (jsxs("div", { className: 'dots-menu-dropdown__item', onClick: () => {
            option.callback();
            setShowMenu(false);
        }, children: [option.Icon && jsx(Icon, { color: 'text-tertiary', children: option.Icon }), jsxs(Typography, { copykey: option.copykey, className: 'dots-menu-dropdown__item-text', color: option.fontColor ? option.fontColor : 'secondary', weight: option.fontWeight, children: [option.text, " ", option.badge ? jsx(Badge, { text: option.badge }) : null] }), option.endSlot && (jsx("div", { className: 'dots-menu-dropdown__item__end-slot', children: option.endSlot }))] }, option.text))) }));

export { DropdownMenu };
