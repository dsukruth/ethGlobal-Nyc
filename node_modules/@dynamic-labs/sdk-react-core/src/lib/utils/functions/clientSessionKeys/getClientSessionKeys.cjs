'use client'
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _tslib = require('../../../../../_virtual/_tslib.cjs');
var utils = require('@dynamic-labs/utils');
var sessionStorage = require('../../constants/sessionStorage.cjs');
var keyService = require('../keyService/keyService.cjs');
var constants = require('./constants.cjs');

const getClientSessionKeys = () => {
    const sessionKeysSS = utils.StorageService.getItem(sessionStorage.CLIENT_SESSION_KEYS, sessionStorage.CLIENT_SESSION_KEYS_STORAGE_OPTIONS);
    const decodedSessionKeys = sessionKeysSS
        ? JSON.parse(Buffer.from(sessionKeysSS, 'base64').toString())
        : undefined;
    return decodedSessionKeys;
};
const generateKeyPair = () => _tslib.__awaiter(void 0, void 0, void 0, function* () {
    const { private: privateKey, public: publicKey, privateJwk, } = yield keyService.p256Keygen();
    // convert to base64 and store the session keys in session storage
    utils.StorageService.setItem(sessionStorage.CLIENT_SESSION_KEYS, keyService.toEncodedFormat(publicKey, privateKey, privateJwk, false), sessionStorage.CLIENT_SESSION_KEYS_STORAGE_OPTIONS);
    utils.tracing.logEvent(constants.clientSessionKeyLogScope, 'Generated new session key pair', utils.tracing.formatObject({
        publicKey,
    }));
    return { privateKey, privateKeyJwk: privateJwk, publicKey };
});
const generateSessionSignature = (_a) => _tslib.__awaiter(void 0, [_a], void 0, function* ({ privateKeyJwk, sessionId, }) { return keyService.p256Sign(privateKeyJwk, sessionId); });
const generateClientSessionKeys = () => _tslib.__awaiter(void 0, void 0, void 0, function* () {
    // check if session keys are already stored in session storage
    const clientSessionKeysSS = getClientSessionKeys();
    utils.tracing.logEvent(constants.clientSessionKeyLogScope, 'getClientSessionKeys', utils.tracing.formatObject({
        hasDecodedSessionKeys: Boolean(clientSessionKeysSS),
        publicKey: clientSessionKeysSS === null || clientSessionKeysSS === void 0 ? void 0 : clientSessionKeysSS.publicKey,
    }));
    let publicKey;
    if (clientSessionKeysSS) {
        ({ publicKey } = clientSessionKeysSS);
    }
    else {
        ({ publicKey } = yield generateKeyPair());
    }
    return { publicKey };
});
const getClientSessionPublicKey = () => {
    const clientSessionKeys = getClientSessionKeys();
    return clientSessionKeys === null || clientSessionKeys === void 0 ? void 0 : clientSessionKeys.publicKey;
};
const getClientSessionSignature = (_b) => _tslib.__awaiter(void 0, [_b], void 0, function* ({ sessionId, }) {
    const clientSessionKeys = getClientSessionKeys();
    if (!clientSessionKeys) {
        throw new Error('Client session keys not found');
    }
    const { publicKey, privateKeyJwk } = clientSessionKeys;
    const sessionSignature = yield generateSessionSignature({
        privateKeyJwk,
        sessionId,
    });
    return { publicKey, sessionSignature };
});

exports.generateClientSessionKeys = generateClientSessionKeys;
exports.generateKeyPair = generateKeyPair;
exports.generateSessionSignature = generateSessionSignature;
exports.getClientSessionKeys = getClientSessionKeys;
exports.getClientSessionPublicKey = getClientSessionPublicKey;
exports.getClientSessionSignature = getClientSessionSignature;
