'use client'
import { __awaiter } from '../../../../../../_virtual/_tslib.js';
import { FetchService } from '@dynamic-labs/utils';
import { dynamicEvents } from '../../../../events/dynamicEvents.js';
import '@dynamic-labs/sdk-api-core';
import { logger } from '../../../../shared/logger.js';
import '@dynamic-labs/iconic';
import '@dynamic-labs/wallet-connector-core';
import 'react';
import 'react/jsx-runtime';
import '../../../../context/ViewContext/ViewContext.js';
import '@dynamic-labs/wallet-book';
import '../../../constants/colors.js';
import '../../../constants/values.js';
import '../../../../shared/consts/index.js';

const CONNECT_URL = 'https://relay.farcaster.xyz/v1/channel';
const STATUS_URL = 'https://relay.farcaster.xyz/v1/channel/status';
const STATUS_TIMEOUT = 180000;
const STATUS_INTERVAL = 1000;
const connect = (connectRequest) => __awaiter(void 0, void 0, void 0, function* () {
    try {
        const response = yield FetchService.fetch(CONNECT_URL, {
            body: JSON.stringify(connectRequest),
            headers: {
                'Content-Type': 'application/json',
            },
            method: 'POST',
        });
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        return yield response.json();
    }
    catch (error) {
        logger.error('Error connecting with farcaster:', error);
        return;
    }
});
const status = (connectStatusRequest_1, ...args_1) => __awaiter(void 0, [connectStatusRequest_1, ...args_1], void 0, function* (connectStatusRequest, count = 1) {
    try {
        const response = yield FetchService.fetch(STATUS_URL, {
            headers: {
                Authorization: `Bearer ${connectStatusRequest.channelToken}`,
                'Content-Type': 'application/json',
            },
            method: 'GET',
        });
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        return yield response.json();
    }
    catch (error) {
        logger.warn(`Error fetching farcaster connect status, trying again. Attempt: ${count}`, error);
        return { error: JSON.stringify(error), state: 'retry' };
    }
});
const watchStatus = (connectStatusRequest_2, ...args_2) => __awaiter(void 0, [connectStatusRequest_2, ...args_2], void 0, function* (connectStatusRequest, { timeout = STATUS_TIMEOUT, interval = STATUS_INTERVAL } = {}) {
    const deadline = Date.now() + timeout;
    let shouldPoll = true;
    let storedResolve = undefined;
    // When we cancel, immediately resolve the current timeout promise and abort status watch
    dynamicEvents.on('farcasterConnectCancelled', () => {
        shouldPoll = false;
        storedResolve === null || storedResolve === void 0 ? void 0 : storedResolve();
        storedResolve = undefined;
    });
    // Declaring the promise callback outside of loop to avoid unnecessary garbage generation
    const timeoutCallback = (resolve) => {
        storedResolve = resolve;
        setTimeout(resolve, interval);
    };
    let count = 0;
    let timeoutError = 'Unknown error';
    while (shouldPoll && Date.now() < deadline) {
        count++;
        const response = yield status(connectStatusRequest, count);
        if (response.state === 'completed') {
            return { data: response, type: 'success' };
        }
        else if (response.state === 'retry') {
            timeoutError = response.error;
        }
        // response.state === 'pending'
        else
            timeoutError = 'Timed out: Farcaster connection status still pending';
        yield new Promise(timeoutCallback);
    }
    if (!shouldPoll) {
        return { type: 'cancelled' };
    }
    logger.error(`Polling farcaster connect status timed out after ${timeout}ms`);
    return { error: timeoutError, type: 'timeout' };
});

export { connect, status, watchStatus };
