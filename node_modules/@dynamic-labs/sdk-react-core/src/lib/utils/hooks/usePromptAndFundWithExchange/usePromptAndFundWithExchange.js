'use client'
import { __awaiter } from '../../../../../_virtual/_tslib.js';
import { useCallback } from 'react';
import '../../../context/DynamicContext/DynamicContext.js';
import '../../../store/state/loadingAndLifecycle/loadingAndLifecycle.js';
import '@dynamic-labs/sdk-api-core';
import '../../../shared/logger.js';
import '@dynamic-labs/iconic';
import '@dynamic-labs/wallet-connector-core';
import 'react/jsx-runtime';
import { useViewContext } from '../../../context/ViewContext/ViewContext.js';
import '@dynamic-labs/wallet-book';
import '@dynamic-labs/utils';
import '../../constants/colors.js';
import '../../constants/values.js';
import '../../../shared/consts/index.js';
import '../../../events/dynamicEvents.js';
import '../../../context/CaptchaContext/CaptchaContext.js';
import '../../../context/ErrorContext/ErrorContext.js';
import '@dynamic-labs/multi-wallet';
import 'react-international-phone';
import '../../../store/state/nonce/nonce.js';
import '@dynamic-labs-sdk/client/core';
import '../../../client/client.js';
import '@dynamic-labs-sdk/client';
import '../../../store/state/projectSettings/projectSettings.js';
import '../../../config/ApiEndpoint.js';
import '../../../locale/locale.js';
import '../../../store/state/dynamicContextProps/dynamicContextProps.js';
import '../../../store/state/primaryWalletId/primaryWalletId.js';
import '../../../store/state/connectedWalletsInfo/connectedWalletsInfo.js';
import '../../../context/AccessDeniedContext/AccessDeniedContext.js';
import '../../../context/AccountExistsContext/AccountExistsContext.js';
import '../../../context/UserWalletsContext/UserWalletsContext.js';
import '../../../store/state/authMode/authMode.js';
import '../../../context/VerificationContext/VerificationContext.js';
import 'react-dom';
import '../../functions/compareChains/compareChains.js';
import '../../../views/Passkey/utils/findPrimaryEmbeddedChain/findPrimaryEmbeddedChain.js';
import '../../../context/ThemeContext/ThemeContext.js';
import '../useUserUpdateRequest/useUpdateUser/userFieldsSchema.js';
import 'bs58';
import '@dynamic-labs/types';
import '../../../context/SocialRedirectContext/SocialRedirectContext.js';
import '../../../context/LoadingContext/LoadingContext.js';
import '../../../context/WalletContext/WalletContext.js';
import '../useEmbeddedWallet/useSecureEnclaveEmbeddedWallet/constants.js';
import 'yup';
import '../../../context/MockContext/MockContext.js';
import '../../../views/CollectUserDataView/useFields.js';
import '../../../context/FieldsStateContext/FieldsStateContext.js';
import '../../../context/UserFieldEditorContext/UserFieldEditorContext.js';
import '@dynamic-labs/rpc-providers';
import '../../../store/state/walletOptions/walletOptions.js';
import 'react-i18next';
import '../../../components/Accordion/components/AccordionItem/AccordionItem.js';
import '../../../components/Alert/Alert.js';
import '../../../components/ShadowDOM/ShadowDOM.js';
import '../../../components/IconButton/IconButton.js';
import '../../../components/InlineWidget/InlineWidget.js';
import '../../../components/Input/Input.js';
import '../../../components/IsBrowser/IsBrowser.js';
import '../../../components/MenuList/Dropdown/Dropdown.js';
import '../../../components/OverlayCard/OverlayCard.js';
import '../../../components/Transition/ZoomTransition/ZoomTransition.js';
import '../../../components/Transition/SlideInUpTransition/SlideInUpTransition.js';
import '../../../components/Transition/OpacityTransition/OpacityTransition.js';
import '../../../components/PasskeyCreatedSuccessBanner/PasskeyCreatedSuccessBanner.js';
import '../../../components/Popper/Popper/Popper.js';
import '../../../components/Popper/PopperContext/PopperContext.js';
import 'react-focus-lock';
import 'qrcode';
import 'formik';
import '../useSubdomainCheck/useSubdomainCheck.js';
import '../../../context/WalletGroupContext/WalletGroupContext.js';
import '../../../context/IpConfigurationContext/IpConfigurationContext.js';
import '../../../context/ConnectWithOtpContext/ConnectWithOtpContext.js';
import '../../../widgets/DynamicBridgeWidget/views/WalletsView/components/SecondaryWallets/SecondaryWallets.js';
import '@hcaptcha/react-hcaptcha';
import { useWidgetContext } from '../../../widgets/DynamicWidget/context/DynamicWidgetContext.js';
import '../../../widgets/DynamicWidget/helpers/convertExchangeKeyAndProviderEnum.js';
import '../../../views/ExchangeWhitelistWarning/ExchangeWhitelistWarning.js';
import '../../../context/ErrorContext/hooks/useErrorText/useErrorText.js';
import '../../../context/FooterAnimationContext/index.js';
import '../../../views/MfaChooseDeviceView/getMfaOptions/getMfaOptions.js';
import '../../../context/PasskeyContext/PasskeyContext.js';
import '../../../context/OnrampContext/OnrampContext.js';
import '../../../store/state/sendBalances.js';
import '../../../store/state/connectorsInitializing/connectorsInitializing.js';
import '../../../components/OverlayCardBase/OverlayCardTarget/OverlayCardTarget.js';
import '../../../widgets/DynamicWidget/components/DynamicWidgetHeader/DynamicWidgetHeader.js';
import '../../../views/TransactionConfirmationView/TransactionConfirmationView.js';
import '../../../widgets/DynamicWidget/components/PasskeyCard/PasskeyCard.js';
import '../../../../index.js';
import '../../../widgets/DynamicWidget/views/ReceiveWalletFunds/ReceiveWalletFunds.js';
import '../../../store/state/tokenBalances.js';
import '../../../store/state/multichainBalances.js';
import '../../../shared/utils/functions/getInitialUrl/getInitialUrl.js';
import { useExchangeAccounts } from '../useExchangeAccounts/useExchangeAccounts.js';
import { useInternalDynamicContext } from '../../../context/DynamicContext/useDynamicContext/useInternalDynamicContext/useInternalDynamicContext.js';

const usePromptAmountAndFundWithExchange = () => {
    const { setDynamicWidgetView, goToInitialDynamicWidgetView } = useWidgetContext();
    const { setShowDynamicUserProfile, primaryWallet, setShowAuthFlow } = useInternalDynamicContext();
    const { getExchangeUserAccounts, getExchangeWhitelistedDestinations } = useExchangeAccounts();
    const { clearStackAndPush } = useViewContext();
    return useCallback((_a) => __awaiter(void 0, [_a], void 0, function* ({ exchange, payingWithDynamic, onBack, hideBackButton, }) {
        var _b, _c;
        let preferredToken;
        let accounts;
        if (payingWithDynamic) {
            preferredToken = payingWithDynamic.tokenSymbol;
            accounts = yield getExchangeUserAccounts({
                chainName: payingWithDynamic.chainName,
                exchange,
                includeChainName: true,
                networkId: typeof payingWithDynamic.network === 'string'
                    ? parseInt(payingWithDynamic.network, 10)
                    : payingWithDynamic.network,
            });
        }
        else {
            accounts = yield getExchangeUserAccounts({ exchange });
            preferredToken = accounts.some((account) => account.balances.some((balance) => balance.currency === 'USDC'))
                ? 'USDC'
                : (_c = (_b = accounts[0]) === null || _b === void 0 ? void 0 : _b.balances[0]) === null || _c === void 0 ? void 0 : _c.currency;
        }
        const whitelistedDestinations = yield getExchangeWhitelistedDestinations({
            exchange,
        });
        const receiveFundView = () => {
            if (payingWithDynamic) {
                setDynamicWidgetView('receive-wallet-funds', {
                    accounts,
                    amount: {
                        rule: 'exact',
                        value: payingWithDynamic.tokenAmount,
                    },
                    destinationAddress: payingWithDynamic.destinationAddress,
                    exchange,
                    fundingWithExchange: true,
                    hideBackButton,
                    onBack,
                    token: { rule: 'exact-with-amount', value: preferredToken },
                });
            }
            else {
                setDynamicWidgetView('receive-wallet-funds', {
                    accounts,
                    exchange,
                    fundingWithExchange: true,
                    hideBackButton,
                    onBack,
                    token: { rule: 'recommended', value: preferredToken },
                });
            }
            setShowDynamicUserProfile(true);
        };
        const addressToCheck = payingWithDynamic
            ? payingWithDynamic.destinationAddress
            : primaryWallet === null || primaryWallet === void 0 ? void 0 : primaryWallet.address;
        if (whitelistedDestinations.enforcesAddressWhitelist &&
            !whitelistedDestinations.destinations.some((d) => d.address.trim().toLowerCase() ===
                (addressToCheck === null || addressToCheck === void 0 ? void 0 : addressToCheck.trim().toLowerCase()))) {
            setShowAuthFlow(true);
            clearStackAndPush('exchange-whitelist-warning', {
                exchange: exchange,
                onClose: () => {
                    setShowAuthFlow(false);
                    goToInitialDynamicWidgetView();
                },
                onContinue: () => {
                    setShowAuthFlow(false);
                    receiveFundView();
                },
            });
        }
        else {
            receiveFundView();
        }
    }), [
        getExchangeUserAccounts,
        getExchangeWhitelistedDestinations,
        setDynamicWidgetView,
        setShowDynamicUserProfile,
        primaryWallet === null || primaryWallet === void 0 ? void 0 : primaryWallet.address,
        setShowAuthFlow,
        clearStackAndPush,
        goToInitialDynamicWidgetView,
    ]);
};

export { usePromptAmountAndFundWithExchange };
