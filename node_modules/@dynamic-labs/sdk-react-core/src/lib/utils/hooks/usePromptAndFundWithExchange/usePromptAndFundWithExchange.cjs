'use client'
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _tslib = require('../../../../../_virtual/_tslib.cjs');
var React = require('react');
require('../../../context/DynamicContext/DynamicContext.cjs');
require('../../../store/state/loadingAndLifecycle/loadingAndLifecycle.cjs');
require('@dynamic-labs/sdk-api-core');
require('../../../shared/logger.cjs');
require('@dynamic-labs/iconic');
require('@dynamic-labs/wallet-connector-core');
require('react/jsx-runtime');
var ViewContext = require('../../../context/ViewContext/ViewContext.cjs');
require('@dynamic-labs/wallet-book');
require('@dynamic-labs/utils');
require('../../constants/colors.cjs');
require('../../constants/values.cjs');
require('../../../shared/consts/index.cjs');
require('../../../events/dynamicEvents.cjs');
require('../../../context/CaptchaContext/CaptchaContext.cjs');
require('../../../context/ErrorContext/ErrorContext.cjs');
require('@dynamic-labs/multi-wallet');
require('react-international-phone');
require('../../../store/state/nonce/nonce.cjs');
require('@dynamic-labs-sdk/client/core');
require('../../../client/client.cjs');
require('@dynamic-labs-sdk/client');
require('../../../store/state/projectSettings/projectSettings.cjs');
require('../../../config/ApiEndpoint.cjs');
require('../../../locale/locale.cjs');
require('../../../store/state/dynamicContextProps/dynamicContextProps.cjs');
require('../../../store/state/primaryWalletId/primaryWalletId.cjs');
require('../../../store/state/connectedWalletsInfo/connectedWalletsInfo.cjs');
require('../../../context/AccessDeniedContext/AccessDeniedContext.cjs');
require('../../../context/AccountExistsContext/AccountExistsContext.cjs');
require('../../../context/UserWalletsContext/UserWalletsContext.cjs');
require('../../../store/state/authMode/authMode.cjs');
require('../../../context/VerificationContext/VerificationContext.cjs');
require('react-dom');
require('../../functions/compareChains/compareChains.cjs');
require('../../../views/Passkey/utils/findPrimaryEmbeddedChain/findPrimaryEmbeddedChain.cjs');
require('../../../context/ThemeContext/ThemeContext.cjs');
require('../useUserUpdateRequest/useUpdateUser/userFieldsSchema.cjs');
require('bs58');
require('@dynamic-labs/types');
require('../../../context/SocialRedirectContext/SocialRedirectContext.cjs');
require('../../../context/LoadingContext/LoadingContext.cjs');
require('../../../context/WalletContext/WalletContext.cjs');
require('../useEmbeddedWallet/useSecureEnclaveEmbeddedWallet/constants.cjs');
require('yup');
require('../../../context/MockContext/MockContext.cjs');
require('../../../views/CollectUserDataView/useFields.cjs');
require('../../../context/FieldsStateContext/FieldsStateContext.cjs');
require('../../../context/UserFieldEditorContext/UserFieldEditorContext.cjs');
require('@dynamic-labs/rpc-providers');
require('../../../store/state/walletOptions/walletOptions.cjs');
require('react-i18next');
require('../../../components/Accordion/components/AccordionItem/AccordionItem.cjs');
require('../../../components/Alert/Alert.cjs');
require('../../../components/ShadowDOM/ShadowDOM.cjs');
require('../../../components/IconButton/IconButton.cjs');
require('../../../components/InlineWidget/InlineWidget.cjs');
require('../../../components/Input/Input.cjs');
require('../../../components/IsBrowser/IsBrowser.cjs');
require('../../../components/MenuList/Dropdown/Dropdown.cjs');
require('../../../components/OverlayCard/OverlayCard.cjs');
require('../../../components/Transition/ZoomTransition/ZoomTransition.cjs');
require('../../../components/Transition/SlideInUpTransition/SlideInUpTransition.cjs');
require('../../../components/Transition/OpacityTransition/OpacityTransition.cjs');
require('../../../components/PasskeyCreatedSuccessBanner/PasskeyCreatedSuccessBanner.cjs');
require('../../../components/Popper/Popper/Popper.cjs');
require('../../../components/Popper/PopperContext/PopperContext.cjs');
require('react-focus-lock');
require('qrcode');
require('formik');
require('../useSubdomainCheck/useSubdomainCheck.cjs');
require('../../../context/WalletGroupContext/WalletGroupContext.cjs');
require('../../../context/IpConfigurationContext/IpConfigurationContext.cjs');
require('../../../context/ConnectWithOtpContext/ConnectWithOtpContext.cjs');
require('../../../widgets/DynamicBridgeWidget/views/WalletsView/components/SecondaryWallets/SecondaryWallets.cjs');
require('@hcaptcha/react-hcaptcha');
var DynamicWidgetContext = require('../../../widgets/DynamicWidget/context/DynamicWidgetContext.cjs');
require('../../../widgets/DynamicWidget/helpers/convertExchangeKeyAndProviderEnum.cjs');
require('../../../views/ExchangeWhitelistWarning/ExchangeWhitelistWarning.cjs');
require('../../../context/ErrorContext/hooks/useErrorText/useErrorText.cjs');
require('../../../context/FooterAnimationContext/index.cjs');
require('../../../views/MfaChooseDeviceView/getMfaOptions/getMfaOptions.cjs');
require('../../../context/PasskeyContext/PasskeyContext.cjs');
require('../../../context/OnrampContext/OnrampContext.cjs');
require('../../../store/state/sendBalances.cjs');
require('../../../store/state/connectorsInitializing/connectorsInitializing.cjs');
require('../../../components/OverlayCardBase/OverlayCardTarget/OverlayCardTarget.cjs');
require('../../../widgets/DynamicWidget/components/DynamicWidgetHeader/DynamicWidgetHeader.cjs');
require('../../../views/TransactionConfirmationView/TransactionConfirmationView.cjs');
require('../../../widgets/DynamicWidget/components/PasskeyCard/PasskeyCard.cjs');
require('../../../../index.cjs');
require('../../../widgets/DynamicWidget/views/ReceiveWalletFunds/ReceiveWalletFunds.cjs');
require('../../../store/state/tokenBalances.cjs');
require('../../../store/state/multichainBalances.cjs');
require('../../../shared/utils/functions/getInitialUrl/getInitialUrl.cjs');
var useExchangeAccounts = require('../useExchangeAccounts/useExchangeAccounts.cjs');
var useInternalDynamicContext = require('../../../context/DynamicContext/useDynamicContext/useInternalDynamicContext/useInternalDynamicContext.cjs');

const usePromptAmountAndFundWithExchange = () => {
    const { setDynamicWidgetView, goToInitialDynamicWidgetView } = DynamicWidgetContext.useWidgetContext();
    const { setShowDynamicUserProfile, primaryWallet, setShowAuthFlow } = useInternalDynamicContext.useInternalDynamicContext();
    const { getExchangeUserAccounts, getExchangeWhitelistedDestinations } = useExchangeAccounts.useExchangeAccounts();
    const { clearStackAndPush } = ViewContext.useViewContext();
    return React.useCallback((_a) => _tslib.__awaiter(void 0, [_a], void 0, function* ({ exchange, payingWithDynamic, onBack, hideBackButton, }) {
        var _b, _c;
        let preferredToken;
        let accounts;
        if (payingWithDynamic) {
            preferredToken = payingWithDynamic.tokenSymbol;
            accounts = yield getExchangeUserAccounts({
                chainName: payingWithDynamic.chainName,
                exchange,
                includeChainName: true,
                networkId: typeof payingWithDynamic.network === 'string'
                    ? parseInt(payingWithDynamic.network, 10)
                    : payingWithDynamic.network,
            });
        }
        else {
            accounts = yield getExchangeUserAccounts({ exchange });
            preferredToken = accounts.some((account) => account.balances.some((balance) => balance.currency === 'USDC'))
                ? 'USDC'
                : (_c = (_b = accounts[0]) === null || _b === void 0 ? void 0 : _b.balances[0]) === null || _c === void 0 ? void 0 : _c.currency;
        }
        const whitelistedDestinations = yield getExchangeWhitelistedDestinations({
            exchange,
        });
        const receiveFundView = () => {
            if (payingWithDynamic) {
                setDynamicWidgetView('receive-wallet-funds', {
                    accounts,
                    amount: {
                        rule: 'exact',
                        value: payingWithDynamic.tokenAmount,
                    },
                    destinationAddress: payingWithDynamic.destinationAddress,
                    exchange,
                    fundingWithExchange: true,
                    hideBackButton,
                    onBack,
                    token: { rule: 'exact-with-amount', value: preferredToken },
                });
            }
            else {
                setDynamicWidgetView('receive-wallet-funds', {
                    accounts,
                    exchange,
                    fundingWithExchange: true,
                    hideBackButton,
                    onBack,
                    token: { rule: 'recommended', value: preferredToken },
                });
            }
            setShowDynamicUserProfile(true);
        };
        const addressToCheck = payingWithDynamic
            ? payingWithDynamic.destinationAddress
            : primaryWallet === null || primaryWallet === void 0 ? void 0 : primaryWallet.address;
        if (whitelistedDestinations.enforcesAddressWhitelist &&
            !whitelistedDestinations.destinations.some((d) => d.address.trim().toLowerCase() ===
                (addressToCheck === null || addressToCheck === void 0 ? void 0 : addressToCheck.trim().toLowerCase()))) {
            setShowAuthFlow(true);
            clearStackAndPush('exchange-whitelist-warning', {
                exchange: exchange,
                onClose: () => {
                    setShowAuthFlow(false);
                    goToInitialDynamicWidgetView();
                },
                onContinue: () => {
                    setShowAuthFlow(false);
                    receiveFundView();
                },
            });
        }
        else {
            receiveFundView();
        }
    }), [
        getExchangeUserAccounts,
        getExchangeWhitelistedDestinations,
        setDynamicWidgetView,
        setShowDynamicUserProfile,
        primaryWallet === null || primaryWallet === void 0 ? void 0 : primaryWallet.address,
        setShowAuthFlow,
        clearStackAndPush,
        goToInitialDynamicWidgetView,
    ]);
};

exports.usePromptAmountAndFundWithExchange = usePromptAmountAndFundWithExchange;
