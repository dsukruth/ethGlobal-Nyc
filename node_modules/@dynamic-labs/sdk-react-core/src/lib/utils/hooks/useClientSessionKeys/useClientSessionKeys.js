'use client'
import { __awaiter } from '../../../../../_virtual/_tslib.js';
import { useCallback } from 'react';
import '@dynamic-labs-sdk/client/core';
import '@dynamic-labs/sdk-api-core';
import '../../../client/client.js';
import '@dynamic-labs-sdk/client';
import '@dynamic-labs/utils';
import '../../constants/values.js';
import '@dynamic-labs/multi-wallet';
import '../../../shared/logger.js';
import '../../constants/colors.js';
import 'react-international-phone';
import '@dynamic-labs/iconic';
import '@dynamic-labs/wallet-connector-core';
import 'react/jsx-runtime';
import '../../../context/ViewContext/ViewContext.js';
import '@dynamic-labs/wallet-book';
import '../../../shared/consts/index.js';
import '../../../store/state/nonce/nonce.js';
import '../../../config/ApiEndpoint.js';
import '../../../store/state/projectSettings/projectSettings.js';
import '../../../locale/locale.js';
import '../../../store/state/dynamicContextProps/dynamicContextProps.js';
import '../../../store/state/primaryWalletId/primaryWalletId.js';
import '../../../store/state/connectedWalletsInfo/connectedWalletsInfo.js';
import { getClientSessionPublicKey, getClientSessionSignature, generateClientSessionKeys } from '../../functions/clientSessionKeys/getClientSessionKeys.js';
import '../../../events/dynamicEvents.js';
import { useOnboardingCompleteUser } from '../../../client/extension/user/useOnboardingCompleteUser/useOnboardingCompleteUser.js';
import { usePromise } from '../usePromise/usePromise.js';

const useClientSessionKeys = () => {
    const user = useOnboardingCompleteUser();
    const sessionPublicKey = getClientSessionPublicKey();
    usePromise(generateClientSessionKeys, {
        deps: [sessionPublicKey],
        enabled: !sessionPublicKey,
        initialData: undefined,
        retries: 2,
    });
    const getSignedSessionId = useCallback(() => __awaiter(void 0, void 0, void 0, function* () {
        if (!(user === null || user === void 0 ? void 0 : user.sessionId) || !sessionPublicKey) {
            throw new Error('Session ID and public key are required');
        }
        const result = yield getClientSessionSignature({
            sessionId: user === null || user === void 0 ? void 0 : user.sessionId,
        });
        return result.sessionSignature;
    }), [user === null || user === void 0 ? void 0 : user.sessionId, sessionPublicKey]);
    const { data: sessionSignatureResult } = usePromise(getSignedSessionId, {
        deps: [user === null || user === void 0 ? void 0 : user.sessionId, sessionPublicKey],
        enabled: Boolean(user === null || user === void 0 ? void 0 : user.sessionId) && Boolean(sessionPublicKey),
        initialData: undefined,
        retries: 2,
    });
    return {
        getSignedSessionId,
        sessionPublicKey,
        sessionSignature: sessionSignatureResult,
    };
};

export { useClientSessionKeys };
