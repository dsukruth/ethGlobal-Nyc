'use client'
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _tslib = require('../../../../../_virtual/_tslib.cjs');
var React = require('react');
require('@dynamic-labs-sdk/client/core');
require('@dynamic-labs/sdk-api-core');
require('../../../client/client.cjs');
require('@dynamic-labs-sdk/client');
require('@dynamic-labs/utils');
require('../../constants/values.cjs');
require('@dynamic-labs/multi-wallet');
require('../../../shared/logger.cjs');
require('../../constants/colors.cjs');
require('react-international-phone');
require('@dynamic-labs/iconic');
require('@dynamic-labs/wallet-connector-core');
require('react/jsx-runtime');
require('../../../context/ViewContext/ViewContext.cjs');
require('@dynamic-labs/wallet-book');
require('../../../shared/consts/index.cjs');
require('../../../store/state/nonce/nonce.cjs');
require('../../../config/ApiEndpoint.cjs');
require('../../../store/state/projectSettings/projectSettings.cjs');
require('../../../locale/locale.cjs');
require('../../../store/state/dynamicContextProps/dynamicContextProps.cjs');
require('../../../store/state/primaryWalletId/primaryWalletId.cjs');
require('../../../store/state/connectedWalletsInfo/connectedWalletsInfo.cjs');
var getClientSessionKeys = require('../../functions/clientSessionKeys/getClientSessionKeys.cjs');
require('../../../events/dynamicEvents.cjs');
var useOnboardingCompleteUser = require('../../../client/extension/user/useOnboardingCompleteUser/useOnboardingCompleteUser.cjs');
var usePromise = require('../usePromise/usePromise.cjs');

const useClientSessionKeys = () => {
    const user = useOnboardingCompleteUser.useOnboardingCompleteUser();
    const sessionPublicKey = getClientSessionKeys.getClientSessionPublicKey();
    usePromise.usePromise(getClientSessionKeys.generateClientSessionKeys, {
        deps: [sessionPublicKey],
        enabled: !sessionPublicKey,
        initialData: undefined,
        retries: 2,
    });
    const getSignedSessionId = React.useCallback(() => _tslib.__awaiter(void 0, void 0, void 0, function* () {
        if (!(user === null || user === void 0 ? void 0 : user.sessionId) || !sessionPublicKey) {
            throw new Error('Session ID and public key are required');
        }
        const result = yield getClientSessionKeys.getClientSessionSignature({
            sessionId: user === null || user === void 0 ? void 0 : user.sessionId,
        });
        return result.sessionSignature;
    }), [user === null || user === void 0 ? void 0 : user.sessionId, sessionPublicKey]);
    const { data: sessionSignatureResult } = usePromise.usePromise(getSignedSessionId, {
        deps: [user === null || user === void 0 ? void 0 : user.sessionId, sessionPublicKey],
        enabled: Boolean(user === null || user === void 0 ? void 0 : user.sessionId) && Boolean(sessionPublicKey),
        initialData: undefined,
        retries: 2,
    });
    return {
        getSignedSessionId,
        sessionPublicKey,
        sessionSignature: sessionSignatureResult,
    };
};

exports.useClientSessionKeys = useClientSessionKeys;
