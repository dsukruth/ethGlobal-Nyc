'use client'
import { __awaiter } from '../../../../../_virtual/_tslib.js';
import { useCallback } from 'react';
import { EmbeddedWalletVersionEnum, ChainEnum } from '@dynamic-labs/sdk-api-core';
import { DynamicError } from '@dynamic-labs/utils';
import '@dynamic-labs-sdk/client/core';
import '../../../client/client.js';
import '@dynamic-labs-sdk/client';
import { findEmbeddedWalletFromVerifiedCredentials } from '../../functions/findEmbeddedWalletFromVerifiedCredentials/findEmbeddedWalletFromVerifiedCredentials.js';
import '../../constants/values.js';
import { USER_NOT_LOGGED_IN, USER_HAS_V2_EMBEDDED_WALLET, INCOMPATIBLE_SDK_VERSION } from '../../constants/errors.js';
import '@dynamic-labs/multi-wallet';
import '../../../shared/logger.js';
import '../../constants/colors.js';
import 'react-international-phone';
import '@dynamic-labs/iconic';
import '@dynamic-labs/wallet-connector-core';
import 'react/jsx-runtime';
import '../../../context/ViewContext/ViewContext.js';
import '@dynamic-labs/wallet-book';
import '../../../shared/consts/index.js';
import '../../../store/state/nonce/nonce.js';
import { updatePrimaryWalletId } from '../../functions/updatePrimaryWalletId/updatePrimaryWalletId.js';
import '../../../store/state/connectedWalletsInfo/connectedWalletsInfo.js';
import '../../../store/state/dynamicContextProps/dynamicContextProps.js';
import { getPrimaryWalletId } from '../../../store/state/primaryWalletId/primaryWalletId.js';
import '../../../events/dynamicEvents.js';
import '../../../store/state/projectSettings/projectSettings.js';
import { storeTokenAndUser } from '../../../client/extension/storeTokenAndUser/storeTokenAndUser.js';
import { convertSdkUserToUserProfile } from '../../../client/extension/user/convertSdkUserToUserProfile/convertSdkUserToUserProfile.js';
import '../../../context/DynamicContext/DynamicContext.js';
import '../../../store/state/loadingAndLifecycle/loadingAndLifecycle.js';
import '../../../context/CaptchaContext/CaptchaContext.js';
import '../../../context/ErrorContext/ErrorContext.js';
import '../../../context/AccessDeniedContext/AccessDeniedContext.js';
import '../../../context/AccountExistsContext/AccountExistsContext.js';
import '../../../context/UserWalletsContext/UserWalletsContext.js';
import '../../../config/ApiEndpoint.js';
import '../../../locale/locale.js';
import { upgradeEmbeddedWalletToV2 } from '../../../data/api/wallets/wallets.js';
import '../../../store/state/authMode/authMode.js';
import '../../../context/VerificationContext/VerificationContext.js';
import 'react-dom';
import '../../functions/compareChains/compareChains.js';
import { findPrimaryEmbeddedChain } from '../../../views/Passkey/utils/findPrimaryEmbeddedChain/findPrimaryEmbeddedChain.js';
import { useEmbeddedWalletSessionKeys } from '../useEmbeddedWalletSessionKeys/useEmbeddedWalletSessionKeys.js';
import '../../../context/ThemeContext/ThemeContext.js';
import '../useUserUpdateRequest/useUpdateUser/userFieldsSchema.js';
import 'bs58';
import '@dynamic-labs/types';
import '../../../context/SocialRedirectContext/SocialRedirectContext.js';
import '../../../context/LoadingContext/LoadingContext.js';
import '../../../context/WalletContext/WalletContext.js';
import '../useEmbeddedWallet/useSecureEnclaveEmbeddedWallet/constants.js';
import 'yup';
import '../../../context/MockContext/MockContext.js';
import '../../../views/CollectUserDataView/useFields.js';
import '../../../context/FieldsStateContext/FieldsStateContext.js';
import '../../../context/UserFieldEditorContext/UserFieldEditorContext.js';
import '@dynamic-labs/rpc-providers';
import '../../../store/state/walletOptions/walletOptions.js';
import 'react-i18next';
import '../../../components/Accordion/components/AccordionItem/AccordionItem.js';
import '../../../components/Alert/Alert.js';
import '../../../components/ShadowDOM/ShadowDOM.js';
import '../../../components/IconButton/IconButton.js';
import '../../../components/InlineWidget/InlineWidget.js';
import '../../../components/Input/Input.js';
import '../../../components/IsBrowser/IsBrowser.js';
import '../../../components/MenuList/Dropdown/Dropdown.js';
import '../../../components/OverlayCard/OverlayCard.js';
import '../../../components/Transition/ZoomTransition/ZoomTransition.js';
import '../../../components/Transition/SlideInUpTransition/SlideInUpTransition.js';
import '../../../components/Transition/OpacityTransition/OpacityTransition.js';
import '../../../components/PasskeyCreatedSuccessBanner/PasskeyCreatedSuccessBanner.js';
import '../../../components/Popper/Popper/Popper.js';
import '../../../components/Popper/PopperContext/PopperContext.js';
import 'react-focus-lock';
import 'qrcode';
import 'formik';
import '../useSubdomainCheck/useSubdomainCheck.js';
import '../../../context/WalletGroupContext/WalletGroupContext.js';
import '../../../context/IpConfigurationContext/IpConfigurationContext.js';
import '../../../context/ConnectWithOtpContext/ConnectWithOtpContext.js';
import '../../../widgets/DynamicBridgeWidget/views/WalletsView/components/SecondaryWallets/SecondaryWallets.js';
import '@hcaptcha/react-hcaptcha';
import '../../../widgets/DynamicWidget/context/DynamicWidgetContext.js';
import '../../../widgets/DynamicWidget/helpers/convertExchangeKeyAndProviderEnum.js';
import '../../../views/ExchangeWhitelistWarning/ExchangeWhitelistWarning.js';
import '../../../context/ErrorContext/hooks/useErrorText/useErrorText.js';
import '../../../context/FooterAnimationContext/index.js';
import '../../../views/MfaChooseDeviceView/getMfaOptions/getMfaOptions.js';
import '../../../context/PasskeyContext/PasskeyContext.js';
import '../../../context/OnrampContext/OnrampContext.js';
import '../../../store/state/sendBalances.js';
import '../../../store/state/connectorsInitializing/connectorsInitializing.js';
import '../../../components/OverlayCardBase/OverlayCardTarget/OverlayCardTarget.js';
import '../../../widgets/DynamicWidget/components/DynamicWidgetHeader/DynamicWidgetHeader.js';
import '../../../views/TransactionConfirmationView/TransactionConfirmationView.js';
import '../../../widgets/DynamicWidget/components/PasskeyCard/PasskeyCard.js';
import '../../../../index.js';
import '../../../widgets/DynamicWidget/views/ReceiveWalletFunds/ReceiveWalletFunds.js';
import '../../../store/state/tokenBalances.js';
import '../../../store/state/multichainBalances.js';
import '../../../shared/utils/functions/getInitialUrl/getInitialUrl.js';
import { useInternalDynamicContext } from '../../../context/DynamicContext/useDynamicContext/useInternalDynamicContext/useInternalDynamicContext.js';

/**
 * Hook to upgrade embedded wallets
 * @returns An object containing the `upgradeEmbeddedWallet` function
 */
const useUpgradeEmbeddedWallet = () => {
    const { user, environmentId, projectSettings } = useInternalDynamicContext();
    const { getSessionPublicKey, shouldRegisterSessionKeysOnSignin } = useEmbeddedWalletSessionKeys({
        environmentId,
        projectSettings,
    });
    /**
     * callback to upgrade a v1 embedded wallet to v2
     * If the upgrade is successful, user is refreshed and primary wallet is updated if applicable
     *
     * @returns {Promise<void>} Resolves to void if the upgrade is successful.
     *
     * @throws {DynamicError} Throws an error if the upgrade process fails.
     *
     */
    const upgradeEmbeddedWallet = useCallback(() => __awaiter(void 0, void 0, void 0, function* () {
        var _a, _b, _c, _d;
        if (!user)
            throw new DynamicError(USER_NOT_LOGGED_IN);
        const userHasV2EmbeddedWallet = user.verifiedCredentials.some((credential) => { var _a; return ((_a = credential.walletProperties) === null || _a === void 0 ? void 0 : _a.version) === EmbeddedWalletVersionEnum.V2; });
        if (userHasV2EmbeddedWallet) {
            throw new DynamicError(USER_HAS_V2_EMBEDDED_WALLET);
        }
        const requiredSessionKey = shouldRegisterSessionKeysOnSignin();
        if (!requiredSessionKey) {
            throw new DynamicError(INCOMPATIBLE_SDK_VERSION);
        }
        const sessionPublicKey = getSessionPublicKey();
        const verifyResponse = yield upgradeEmbeddedWalletToV2({
            environmentId,
            sessionPublicKey,
        });
        const newUser = verifyResponse === null || verifyResponse === void 0 ? void 0 : verifyResponse.user;
        const newUserProfile = convertSdkUserToUserProfile(newUser);
        const primaryWalletId = getPrimaryWalletId();
        const primaryWalletExistsAfterUpgrade = (_b = (_a = newUser.verifiedCredentials) === null || _a === void 0 ? void 0 : _a.find((vc) => vc.id === primaryWalletId)) === null || _b === void 0 ? void 0 : _b.id;
        if (!primaryWalletExistsAfterUpgrade) {
            const primaryEmbeddedChain = findPrimaryEmbeddedChain(projectSettings);
            let targetPrimaryWalletId = (_c = findEmbeddedWalletFromVerifiedCredentials(newUserProfile, [primaryEmbeddedChain])) === null || _c === void 0 ? void 0 : _c.id;
            if (!targetPrimaryWalletId) {
                // Try other chains if primary chain credential was deleted during v1 to v2 upgrade
                const otherChains = Object.values(ChainEnum).filter((chain) => chain !== primaryEmbeddedChain);
                targetPrimaryWalletId = (_d = findEmbeddedWalletFromVerifiedCredentials(newUserProfile, otherChains)) === null || _d === void 0 ? void 0 : _d.id;
            }
            if (targetPrimaryWalletId) {
                yield updatePrimaryWalletId(targetPrimaryWalletId);
            }
        }
        /**
         * `storeTokenAndUser()` is intentionally not called within `upgradeEmbeddedWalletToV2()`.
         * Doing so would create a race condition, as invoking `storeTokenAndUser()` prematurely logs the user out.
         * This could prevent `updatePrimaryWalletId()` from executing properly, leaving the user stuck in a verification
         * process that cannot be refreshed correctly.
         */
        storeTokenAndUser(verifyResponse);
    }), [
        user,
        environmentId,
        projectSettings,
        getSessionPublicKey,
        shouldRegisterSessionKeysOnSignin,
    ]);
    return upgradeEmbeddedWallet;
};

export { useUpgradeEmbeddedWallet };
