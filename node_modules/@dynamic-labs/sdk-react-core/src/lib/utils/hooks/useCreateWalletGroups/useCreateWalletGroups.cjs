'use client'
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var React = require('react');
require('@dynamic-labs/sdk-api-core');
var logger = require('../../../shared/logger.cjs');
require('@dynamic-labs/iconic');
require('@dynamic-labs/wallet-connector-core');
require('react/jsx-runtime');
require('../../../context/ViewContext/ViewContext.cjs');
require('@dynamic-labs/wallet-book');
require('@dynamic-labs/utils');
require('../../constants/colors.cjs');
require('../../constants/values.cjs');
require('../../../shared/consts/index.cjs');
var createWalletGroupFromWalletOption = require('../../../shared/utils/functions/createWalletGroupFromWalletOption/createWalletGroupFromWalletOption.cjs');
var walletOptions = require('../../../store/state/walletOptions/walletOptions.cjs');

const useCreateWalletGroups = ({ walletConnectorOptions, }) => {
    // Dynamically populate groups based on wallet options
    React.useEffect(() => {
        if (!walletConnectorOptions.length)
            return;
        const groups = {};
        walletConnectorOptions.forEach((option) => {
            const group = createWalletGroupFromWalletOption.createWalletGroupFromWalletOption(option);
            // we don't need to override the group if it already exists
            // and it will particularly cause issues with MM, because the starknet snap icon
            // is different group than the default MM icon
            if (!groups[group.key]) {
                groups[group.key] = group;
            }
            option.chainGroup = group.key;
            option.group = group.key;
        });
        logger.logger.logVerboseTroubleshootingMessage('[DynamicContext] mergeWalletGroups', {
            groups,
        });
        walletOptions.mergeWalletGroups(groups);
    }, [walletConnectorOptions]);
};

exports.useCreateWalletGroups = useCreateWalletGroups;
