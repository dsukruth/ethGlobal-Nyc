'use client'
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _tslib = require('../../../../../_virtual/_tslib.cjs');
var React = require('react');
var client = require('@dynamic-labs-sdk/client');

/**
 * Get multichain token balances
 *
 * @returns Function to get multichain token balances for the current user
 *
 * @example
 * ```tsx
 * const App = () => {
 *   const { primaryWallet } = useDynamicContext();
 *   const getMultichainTokenBalances = useGetMultichainTokenBalances();
 *   const [multichainTokenBalances, setMultichainTokenBalances] =
 *       useState<MultichainAccountBalanceResponse['chainBalances']>();
 *
 *   return (
 *     <button
 *       onClick={async () => {
 *         const balanceRequests = {
 *           filterSpamTokens: true, // defaults to true
 *           balanceRequests: [
 *             {
 *               address: primaryWallet?.address ?? '',
 *               chain: ChainEnum.Evm,
 *               networkIds: [1],
 *             },
 *           ],
 *         };
 *         const multichainTokenBalances = await getMultichainTokenBalances(balanceRequests);
 *         setMultichainTokenBalances(multichainTokenBalances);
 *       }}
 *     >
 *       Get multichain token balances
 *     </button>
 *  );
 * }
 */
const useGetMultichainTokenBalances = () => React.useCallback((props) => _tslib.__awaiter(void 0, void 0, void 0, function* () { return client.getMultichainBalances({ balanceRequest: props }); }), []);

exports.useGetMultichainTokenBalances = useGetMultichainTokenBalances;
