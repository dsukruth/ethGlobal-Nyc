'use client'
import { __awaiter } from '../../../../../../_virtual/_tslib.js';
import { CookieInvalidError } from '@dynamic-labs/utils';
import '@dynamic-labs-sdk/client/core';
import '@dynamic-labs/sdk-api-core';
import '../../../../client/client.js';
import 'react';
import '@dynamic-labs-sdk/client';
import '../../../constants/values.js';
import '@dynamic-labs/multi-wallet';
import { getAuthToken } from '../../../functions/getAuthToken/getAuthToken.js';
import '../../../../shared/logger.js';
import '../../../constants/colors.js';
import 'react-international-phone';
import '@dynamic-labs/iconic';
import '@dynamic-labs/wallet-connector-core';
import 'react/jsx-runtime';
import '../../../../context/ViewContext/ViewContext.js';
import '@dynamic-labs/wallet-book';
import '../../../../shared/consts/index.js';
import '../../../../store/state/nonce/nonce.js';
import { isCookieEnabled } from '../../../functions/isCookieEnabled/isCookieEnabled.js';
import '../../../../config/ApiEndpoint.js';
import '../../../../store/state/projectSettings/projectSettings.js';
import '../../../../locale/locale.js';
import { getAuthenticatedUser } from '../../../../data/api/user/user.js';
import '../../../../store/state/dynamicContextProps/dynamicContextProps.js';
import '../../../../store/state/primaryWalletId/primaryWalletId.js';
import '../../../../store/state/connectedWalletsInfo/connectedWalletsInfo.js';
import '../../../../events/dynamicEvents.js';
import { getUserProfile } from '../../../../client/extension/user/getUserProfile/getUserProfile.js';

/**
 * Detects mismatch between user and auth token.
 */
const handleUserDataOutOfSync = (_a) => __awaiter(void 0, [_a], void 0, function* ({ environmentId, logout, projectSettings, }) {
    const cookieEnabled = isCookieEnabled(projectSettings);
    const authToken = getAuthToken();
    const user = getUserProfile();
    if (authToken || !user) {
        return;
    }
    if (user && !authToken && cookieEnabled) {
        try {
            yield getAuthenticatedUser({ environmentId });
        }
        catch (e) {
            if (e instanceof CookieInvalidError) {
                yield logout('user auth cookie invalid', {
                    authToken,
                    user,
                });
                return;
            }
        }
        return;
    }
    yield logout('user data out of sync', {
        authToken,
        user,
    });
});

export { handleUserDataOutOfSync };
