'use client'
import { useCallback, useMemo } from 'react';
import { DynamicError } from '@dynamic-labs/utils';
import { isHardwareWalletConnector } from '@dynamic-labs/wallet-connector-core';
import '../../../context/DynamicContext/DynamicContext.js';
import '../../../store/state/loadingAndLifecycle/loadingAndLifecycle.js';
import '@dynamic-labs/sdk-api-core';
import { logger } from '../../../shared/logger.js';
import '@dynamic-labs/iconic';
import 'react/jsx-runtime';
import { useViewContext } from '../../../context/ViewContext/ViewContext.js';
import '@dynamic-labs/wallet-book';
import '../../constants/colors.js';
import '../../constants/values.js';
import { isWalletGroup } from '../../functions/walletListBuilder/utils/isWalletGroup/isWalletGroup.js';
import '../../../shared/consts/index.js';
import { dynamicEvents } from '../../../events/dynamicEvents.js';
import '../../../../../_virtual/_tslib.js';
import '../../../context/CaptchaContext/CaptchaContext.js';
import '../../../context/ErrorContext/ErrorContext.js';
import '@dynamic-labs/multi-wallet';
import 'react-international-phone';
import '../../../store/state/nonce/nonce.js';
import '@dynamic-labs-sdk/client/core';
import '../../../client/client.js';
import '@dynamic-labs-sdk/client';
import '../../../store/state/projectSettings/projectSettings.js';
import '../../../config/ApiEndpoint.js';
import '../../../locale/locale.js';
import '../../../store/state/dynamicContextProps/dynamicContextProps.js';
import '../../../store/state/primaryWalletId/primaryWalletId.js';
import '../../../store/state/connectedWalletsInfo/connectedWalletsInfo.js';
import '../../../context/AccessDeniedContext/AccessDeniedContext.js';
import '../../../context/AccountExistsContext/AccountExistsContext.js';
import '../../../context/UserWalletsContext/UserWalletsContext.js';
import '../../../store/state/authMode/authMode.js';
import '../../../context/VerificationContext/VerificationContext.js';
import 'react-dom';
import '../../functions/compareChains/compareChains.js';
import '../../../views/Passkey/utils/findPrimaryEmbeddedChain/findPrimaryEmbeddedChain.js';
import '../../../context/ThemeContext/ThemeContext.js';
import '../useUserUpdateRequest/useUpdateUser/userFieldsSchema.js';
import 'bs58';
import '@dynamic-labs/types';
import '../../../context/SocialRedirectContext/SocialRedirectContext.js';
import '../../../context/LoadingContext/LoadingContext.js';
import '../../../context/WalletContext/WalletContext.js';
import '../useEmbeddedWallet/useSecureEnclaveEmbeddedWallet/constants.js';
import 'yup';
import '../../../context/MockContext/MockContext.js';
import '../../../views/CollectUserDataView/useFields.js';
import '../../../context/FieldsStateContext/FieldsStateContext.js';
import '../../../context/UserFieldEditorContext/UserFieldEditorContext.js';
import '@dynamic-labs/rpc-providers';
import { useWalletGroups } from '../../../store/state/walletOptions/walletOptions.js';
import { useWalletItemActions } from '../useWalletItemActions/useWalletItemActions.js';
import 'react-i18next';
import '../../../components/Accordion/components/AccordionItem/AccordionItem.js';
import '../../../components/Alert/Alert.js';
import '../../../components/ShadowDOM/ShadowDOM.js';
import '../../../components/IconButton/IconButton.js';
import '../../../components/InlineWidget/InlineWidget.js';
import '../../../components/Input/Input.js';
import '../../../components/IsBrowser/IsBrowser.js';
import '../../../components/MenuList/Dropdown/Dropdown.js';
import '../../../components/OverlayCard/OverlayCard.js';
import '../../../components/Transition/ZoomTransition/ZoomTransition.js';
import '../../../components/Transition/SlideInUpTransition/SlideInUpTransition.js';
import '../../../components/Transition/OpacityTransition/OpacityTransition.js';
import '../../../components/PasskeyCreatedSuccessBanner/PasskeyCreatedSuccessBanner.js';
import '../../../components/Popper/Popper/Popper.js';
import '../../../components/Popper/PopperContext/PopperContext.js';
import 'react-focus-lock';
import 'qrcode';
import 'formik';
import '../useSubdomainCheck/useSubdomainCheck.js';
import { groupWalletOptions } from '../../functions/walletListBuilder/utils/groupWalletOptions/groupWalletOptions.js';
import { useWalletGroupContext } from '../../../context/WalletGroupContext/WalletGroupContext.js';
import '../../../context/IpConfigurationContext/IpConfigurationContext.js';
import '../../../context/ConnectWithOtpContext/ConnectWithOtpContext.js';
import '../../../widgets/DynamicBridgeWidget/views/WalletsView/components/SecondaryWallets/SecondaryWallets.js';
import '@hcaptcha/react-hcaptcha';
import '../../../widgets/DynamicWidget/context/DynamicWidgetContext.js';
import '../../../widgets/DynamicWidget/helpers/convertExchangeKeyAndProviderEnum.js';
import '../../../views/ExchangeWhitelistWarning/ExchangeWhitelistWarning.js';
import '../../../context/ErrorContext/hooks/useErrorText/useErrorText.js';
import '../../../context/FooterAnimationContext/index.js';
import '../../../views/MfaChooseDeviceView/getMfaOptions/getMfaOptions.js';
import '../../../context/PasskeyContext/PasskeyContext.js';
import '../../../context/OnrampContext/OnrampContext.js';
import '../../../store/state/sendBalances.js';
import '../../../store/state/connectorsInitializing/connectorsInitializing.js';
import '../../../components/OverlayCardBase/OverlayCardTarget/OverlayCardTarget.js';
import '../../../widgets/DynamicWidget/components/DynamicWidgetHeader/DynamicWidgetHeader.js';
import '../../../views/TransactionConfirmationView/TransactionConfirmationView.js';
import '../../../widgets/DynamicWidget/components/PasskeyCard/PasskeyCard.js';
import '../../../../index.js';
import '../../../widgets/DynamicWidget/views/ReceiveWalletFunds/ReceiveWalletFunds.js';
import '../../../store/state/tokenBalances.js';
import '../../../store/state/multichainBalances.js';
import '../../../shared/utils/functions/getInitialUrl/getInitialUrl.js';
import { useInternalDynamicContext } from '../../../context/DynamicContext/useDynamicContext/useInternalDynamicContext/useInternalDynamicContext.js';

const embeddedWalletsKeys = [
    'magicemailotp',
    'magiclink',
    'magicsocial',
    'turnkey',
    'turnkeyhd',
    'zerodev',
];
const useWalletOptions = () => {
    const { walletConnectorOptions, setShowAuthFlow } = useInternalDynamicContext();
    const walletGroups = useWalletGroups();
    const { pushView } = useViewContext();
    const { navigateToWalletGroup } = useWalletGroupContext();
    const { handleWalletItemClick } = useWalletItemActions();
    const getFilteredWalletOptions = useCallback((filter) => {
        const nonEmbeddedOptions = walletConnectorOptions.filter((option) => !embeddedWalletsKeys.includes(option.walletConnector.key));
        return filter(nonEmbeddedOptions).map((option) => {
            var _a;
            const groupName = option.group && ((_a = walletGroups[option.group]) === null || _a === void 0 ? void 0 : _a.name);
            return {
                chain: option.walletConnector.connectedChain,
                group: option.group,
                groupName,
                isInstalledOnBrowser: option.isInstalledOnBrowser,
                isWalletConnect: option.walletConnector.isWalletConnect,
                key: option.walletConnector.key,
                name: option.name,
            };
        });
    }, [walletConnectorOptions, walletGroups]);
    const allWalletOptions = useMemo(() => getFilteredWalletOptions((options) => options), [getFilteredWalletOptions]);
    const selectWalletOption = useCallback((walletKey, selectGroupIfAvailable = true) => new Promise((resolve, reject) => {
        const group = groupWalletOptions(walletGroups, walletConnectorOptions);
        const walletGroup = group.find((wallet) => wallet.key === walletKey);
        const walletOption = walletConnectorOptions === null || walletConnectorOptions === void 0 ? void 0 : walletConnectorOptions.find((wallet) => wallet.key === walletKey);
        logger.logVerboseTroubleshootingMessage('[useWalletOptions] selectWalletOption', {
            selectGroupIfAvailable,
            walletGroup: walletGroup === null || walletGroup === void 0 ? void 0 : walletGroup.key,
            walletKey,
            walletOption: walletOption === null || walletOption === void 0 ? void 0 : walletOption.key,
        });
        if (!walletOption) {
            reject(new DynamicError('Invalid wallet option key provided.'));
            return;
        }
        if (selectGroupIfAvailable &&
            walletGroup &&
            isWalletGroup(walletGroup)) {
            navigateToWalletGroup(walletGroup);
        }
        else if (isHardwareWalletConnector(walletOption.walletConnector) &&
            walletOption.walletConnector.canConnectWithHardwareWallet()) {
            pushView('select-hardware-wallet', {
                onSelectWallet: handleWalletItemClick,
                wallet: walletOption,
            });
        }
        else {
            handleWalletItemClick(walletOption);
        }
        setShowAuthFlow(true);
        const walletAdded = (wallet) => {
            if (wallet.key !== walletKey) {
                return;
            }
            resolve(wallet);
            setShowAuthFlow(false);
            cleanup();
        };
        const walletConnectionFailed = (walletConnector, error) => {
            if (walletConnector.key !== walletKey) {
                return;
            }
            reject(error);
            setShowAuthFlow(false);
            cleanup();
        };
        const authFailure = (method, reason) => {
            if (method.type !== 'wallet' ||
                method.connectorName !== walletOption.walletConnector.name) {
                return;
            }
            const error = typeof reason === 'object' ? reason.error : reason;
            reject(error);
            setShowAuthFlow(false);
            cleanup();
        };
        const cleanup = () => {
            dynamicEvents.off('walletConnectionFailed', walletConnectionFailed);
            dynamicEvents.off('authFailure', authFailure);
            dynamicEvents.off('walletAdded', walletAdded);
        };
        dynamicEvents.on('walletAdded', walletAdded);
        dynamicEvents.on('walletConnectionFailed', walletConnectionFailed);
        dynamicEvents.on('authFailure', authFailure);
    }), [
        handleWalletItemClick,
        navigateToWalletGroup,
        setShowAuthFlow,
        pushView,
        walletConnectorOptions,
        walletGroups,
    ]);
    return {
        getFilteredWalletOptions,
        selectWalletOption,
        walletOptions: allWalletOptions,
    };
};

export { useWalletOptions };
