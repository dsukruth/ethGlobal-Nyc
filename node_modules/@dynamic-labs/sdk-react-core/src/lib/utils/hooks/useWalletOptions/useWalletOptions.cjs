'use client'
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var React = require('react');
var utils = require('@dynamic-labs/utils');
var walletConnectorCore = require('@dynamic-labs/wallet-connector-core');
require('../../../context/DynamicContext/DynamicContext.cjs');
require('../../../store/state/loadingAndLifecycle/loadingAndLifecycle.cjs');
require('@dynamic-labs/sdk-api-core');
var logger = require('../../../shared/logger.cjs');
require('@dynamic-labs/iconic');
require('react/jsx-runtime');
var ViewContext = require('../../../context/ViewContext/ViewContext.cjs');
require('@dynamic-labs/wallet-book');
require('../../constants/colors.cjs');
require('../../constants/values.cjs');
var isWalletGroup = require('../../functions/walletListBuilder/utils/isWalletGroup/isWalletGroup.cjs');
require('../../../shared/consts/index.cjs');
var dynamicEvents = require('../../../events/dynamicEvents.cjs');
require('../../../../../_virtual/_tslib.cjs');
require('../../../context/CaptchaContext/CaptchaContext.cjs');
require('../../../context/ErrorContext/ErrorContext.cjs');
require('@dynamic-labs/multi-wallet');
require('react-international-phone');
require('../../../store/state/nonce/nonce.cjs');
require('@dynamic-labs-sdk/client/core');
require('../../../client/client.cjs');
require('@dynamic-labs-sdk/client');
require('../../../store/state/projectSettings/projectSettings.cjs');
require('../../../config/ApiEndpoint.cjs');
require('../../../locale/locale.cjs');
require('../../../store/state/dynamicContextProps/dynamicContextProps.cjs');
require('../../../store/state/primaryWalletId/primaryWalletId.cjs');
require('../../../store/state/connectedWalletsInfo/connectedWalletsInfo.cjs');
require('../../../context/AccessDeniedContext/AccessDeniedContext.cjs');
require('../../../context/AccountExistsContext/AccountExistsContext.cjs');
require('../../../context/UserWalletsContext/UserWalletsContext.cjs');
require('../../../store/state/authMode/authMode.cjs');
require('../../../context/VerificationContext/VerificationContext.cjs');
require('react-dom');
require('../../functions/compareChains/compareChains.cjs');
require('../../../views/Passkey/utils/findPrimaryEmbeddedChain/findPrimaryEmbeddedChain.cjs');
require('../../../context/ThemeContext/ThemeContext.cjs');
require('../useUserUpdateRequest/useUpdateUser/userFieldsSchema.cjs');
require('bs58');
require('@dynamic-labs/types');
require('../../../context/SocialRedirectContext/SocialRedirectContext.cjs');
require('../../../context/LoadingContext/LoadingContext.cjs');
require('../../../context/WalletContext/WalletContext.cjs');
require('../useEmbeddedWallet/useSecureEnclaveEmbeddedWallet/constants.cjs');
require('yup');
require('../../../context/MockContext/MockContext.cjs');
require('../../../views/CollectUserDataView/useFields.cjs');
require('../../../context/FieldsStateContext/FieldsStateContext.cjs');
require('../../../context/UserFieldEditorContext/UserFieldEditorContext.cjs');
require('@dynamic-labs/rpc-providers');
var walletOptions = require('../../../store/state/walletOptions/walletOptions.cjs');
var useWalletItemActions = require('../useWalletItemActions/useWalletItemActions.cjs');
require('react-i18next');
require('../../../components/Accordion/components/AccordionItem/AccordionItem.cjs');
require('../../../components/Alert/Alert.cjs');
require('../../../components/ShadowDOM/ShadowDOM.cjs');
require('../../../components/IconButton/IconButton.cjs');
require('../../../components/InlineWidget/InlineWidget.cjs');
require('../../../components/Input/Input.cjs');
require('../../../components/IsBrowser/IsBrowser.cjs');
require('../../../components/MenuList/Dropdown/Dropdown.cjs');
require('../../../components/OverlayCard/OverlayCard.cjs');
require('../../../components/Transition/ZoomTransition/ZoomTransition.cjs');
require('../../../components/Transition/SlideInUpTransition/SlideInUpTransition.cjs');
require('../../../components/Transition/OpacityTransition/OpacityTransition.cjs');
require('../../../components/PasskeyCreatedSuccessBanner/PasskeyCreatedSuccessBanner.cjs');
require('../../../components/Popper/Popper/Popper.cjs');
require('../../../components/Popper/PopperContext/PopperContext.cjs');
require('react-focus-lock');
require('qrcode');
require('formik');
require('../useSubdomainCheck/useSubdomainCheck.cjs');
var groupWalletOptions = require('../../functions/walletListBuilder/utils/groupWalletOptions/groupWalletOptions.cjs');
var WalletGroupContext = require('../../../context/WalletGroupContext/WalletGroupContext.cjs');
require('../../../context/IpConfigurationContext/IpConfigurationContext.cjs');
require('../../../context/ConnectWithOtpContext/ConnectWithOtpContext.cjs');
require('../../../widgets/DynamicBridgeWidget/views/WalletsView/components/SecondaryWallets/SecondaryWallets.cjs');
require('@hcaptcha/react-hcaptcha');
require('../../../widgets/DynamicWidget/context/DynamicWidgetContext.cjs');
require('../../../widgets/DynamicWidget/helpers/convertExchangeKeyAndProviderEnum.cjs');
require('../../../views/ExchangeWhitelistWarning/ExchangeWhitelistWarning.cjs');
require('../../../context/ErrorContext/hooks/useErrorText/useErrorText.cjs');
require('../../../context/FooterAnimationContext/index.cjs');
require('../../../views/MfaChooseDeviceView/getMfaOptions/getMfaOptions.cjs');
require('../../../context/PasskeyContext/PasskeyContext.cjs');
require('../../../context/OnrampContext/OnrampContext.cjs');
require('../../../store/state/sendBalances.cjs');
require('../../../store/state/connectorsInitializing/connectorsInitializing.cjs');
require('../../../components/OverlayCardBase/OverlayCardTarget/OverlayCardTarget.cjs');
require('../../../widgets/DynamicWidget/components/DynamicWidgetHeader/DynamicWidgetHeader.cjs');
require('../../../views/TransactionConfirmationView/TransactionConfirmationView.cjs');
require('../../../widgets/DynamicWidget/components/PasskeyCard/PasskeyCard.cjs');
require('../../../../index.cjs');
require('../../../widgets/DynamicWidget/views/ReceiveWalletFunds/ReceiveWalletFunds.cjs');
require('../../../store/state/tokenBalances.cjs');
require('../../../store/state/multichainBalances.cjs');
require('../../../shared/utils/functions/getInitialUrl/getInitialUrl.cjs');
var useInternalDynamicContext = require('../../../context/DynamicContext/useDynamicContext/useInternalDynamicContext/useInternalDynamicContext.cjs');

const embeddedWalletsKeys = [
    'magicemailotp',
    'magiclink',
    'magicsocial',
    'turnkey',
    'turnkeyhd',
    'zerodev',
];
const useWalletOptions = () => {
    const { walletConnectorOptions, setShowAuthFlow } = useInternalDynamicContext.useInternalDynamicContext();
    const walletGroups = walletOptions.useWalletGroups();
    const { pushView } = ViewContext.useViewContext();
    const { navigateToWalletGroup } = WalletGroupContext.useWalletGroupContext();
    const { handleWalletItemClick } = useWalletItemActions.useWalletItemActions();
    const getFilteredWalletOptions = React.useCallback((filter) => {
        const nonEmbeddedOptions = walletConnectorOptions.filter((option) => !embeddedWalletsKeys.includes(option.walletConnector.key));
        return filter(nonEmbeddedOptions).map((option) => {
            var _a;
            const groupName = option.group && ((_a = walletGroups[option.group]) === null || _a === void 0 ? void 0 : _a.name);
            return {
                chain: option.walletConnector.connectedChain,
                group: option.group,
                groupName,
                isInstalledOnBrowser: option.isInstalledOnBrowser,
                isWalletConnect: option.walletConnector.isWalletConnect,
                key: option.walletConnector.key,
                name: option.name,
            };
        });
    }, [walletConnectorOptions, walletGroups]);
    const allWalletOptions = React.useMemo(() => getFilteredWalletOptions((options) => options), [getFilteredWalletOptions]);
    const selectWalletOption = React.useCallback((walletKey, selectGroupIfAvailable = true) => new Promise((resolve, reject) => {
        const group = groupWalletOptions.groupWalletOptions(walletGroups, walletConnectorOptions);
        const walletGroup = group.find((wallet) => wallet.key === walletKey);
        const walletOption = walletConnectorOptions === null || walletConnectorOptions === void 0 ? void 0 : walletConnectorOptions.find((wallet) => wallet.key === walletKey);
        logger.logger.logVerboseTroubleshootingMessage('[useWalletOptions] selectWalletOption', {
            selectGroupIfAvailable,
            walletGroup: walletGroup === null || walletGroup === void 0 ? void 0 : walletGroup.key,
            walletKey,
            walletOption: walletOption === null || walletOption === void 0 ? void 0 : walletOption.key,
        });
        if (!walletOption) {
            reject(new utils.DynamicError('Invalid wallet option key provided.'));
            return;
        }
        if (selectGroupIfAvailable &&
            walletGroup &&
            isWalletGroup.isWalletGroup(walletGroup)) {
            navigateToWalletGroup(walletGroup);
        }
        else if (walletConnectorCore.isHardwareWalletConnector(walletOption.walletConnector) &&
            walletOption.walletConnector.canConnectWithHardwareWallet()) {
            pushView('select-hardware-wallet', {
                onSelectWallet: handleWalletItemClick,
                wallet: walletOption,
            });
        }
        else {
            handleWalletItemClick(walletOption);
        }
        setShowAuthFlow(true);
        const walletAdded = (wallet) => {
            if (wallet.key !== walletKey) {
                return;
            }
            resolve(wallet);
            setShowAuthFlow(false);
            cleanup();
        };
        const walletConnectionFailed = (walletConnector, error) => {
            if (walletConnector.key !== walletKey) {
                return;
            }
            reject(error);
            setShowAuthFlow(false);
            cleanup();
        };
        const authFailure = (method, reason) => {
            if (method.type !== 'wallet' ||
                method.connectorName !== walletOption.walletConnector.name) {
                return;
            }
            const error = typeof reason === 'object' ? reason.error : reason;
            reject(error);
            setShowAuthFlow(false);
            cleanup();
        };
        const cleanup = () => {
            dynamicEvents.dynamicEvents.off('walletConnectionFailed', walletConnectionFailed);
            dynamicEvents.dynamicEvents.off('authFailure', authFailure);
            dynamicEvents.dynamicEvents.off('walletAdded', walletAdded);
        };
        dynamicEvents.dynamicEvents.on('walletAdded', walletAdded);
        dynamicEvents.dynamicEvents.on('walletConnectionFailed', walletConnectionFailed);
        dynamicEvents.dynamicEvents.on('authFailure', authFailure);
    }), [
        handleWalletItemClick,
        navigateToWalletGroup,
        setShowAuthFlow,
        pushView,
        walletConnectorOptions,
        walletGroups,
    ]);
    return {
        getFilteredWalletOptions,
        selectWalletOption,
        walletOptions: allWalletOptions,
    };
};

exports.useWalletOptions = useWalletOptions;
