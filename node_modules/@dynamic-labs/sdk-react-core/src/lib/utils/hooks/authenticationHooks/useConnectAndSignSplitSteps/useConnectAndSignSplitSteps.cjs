'use client'
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _tslib = require('../../../../../../_virtual/_tslib.cjs');
var utils = require('@dynamic-labs/utils');
var CaptchaContext = require('../../../../context/CaptchaContext/CaptchaContext.cjs');
require('react');
require('../../../../context/DynamicContext/DynamicContext.cjs');
require('../../../../store/state/loadingAndLifecycle/loadingAndLifecycle.cjs');
require('@dynamic-labs/sdk-api-core');
var logger = require('../../../../shared/logger.cjs');
require('@dynamic-labs/iconic');
require('@dynamic-labs/wallet-connector-core');
require('react/jsx-runtime');
var ViewContext = require('../../../../context/ViewContext/ViewContext.cjs');
require('@dynamic-labs/wallet-book');
var localStorage = require('../../../constants/localStorage.cjs');
require('../../../constants/colors.cjs');
require('../../../constants/values.cjs');
require('../../../../shared/consts/index.cjs');
require('../../../../events/dynamicEvents.cjs');
var ErrorContext = require('../../../../context/ErrorContext/ErrorContext.cjs');
require('@dynamic-labs/multi-wallet');
require('react-international-phone');
require('../../../../store/state/nonce/nonce.cjs');
var isProgrammableNetworkSwitchSupported = require('../../../functions/isProgrammableNetworkSwitchSupported/isProgrammableNetworkSwitchSupported.cjs');
var isSupportedNetwork = require('../../../functions/isSupportedNetwork/isSupportedNetwork.cjs');
require('@dynamic-labs-sdk/client/core');
require('../../../../client/client.cjs');
require('@dynamic-labs-sdk/client');
require('../../../../store/state/projectSettings/projectSettings.cjs');
require('../../../../config/ApiEndpoint.cjs');
require('../../../../locale/locale.cjs');
require('../../../../store/state/dynamicContextProps/dynamicContextProps.cjs');
require('../../../../store/state/primaryWalletId/primaryWalletId.cjs');
require('../../../../store/state/connectedWalletsInfo/connectedWalletsInfo.cjs');
var useHandleWalletsToConnect = require('../../useHandleWalletsToConnect/useHandleWalletsToConnect.cjs');
var useVerifyWallet = require('../../useVerifyWallet/useVerifyWallet.cjs');
var showPendingConnectView = require('../helpers/showPendingConnectView.cjs');
var isConnectOnly = require('../helpers/isConnectOnly.cjs');
require('../../../../context/VerificationContext/VerificationContext.cjs');
require('react-dom');
require('../../../functions/compareChains/compareChains.cjs');
require('../../../../views/Passkey/utils/findPrimaryEmbeddedChain/findPrimaryEmbeddedChain.cjs');
require('../../../../context/ThemeContext/ThemeContext.cjs');
require('../../../../store/state/authMode/authMode.cjs');
require('../../useUserUpdateRequest/useUpdateUser/userFieldsSchema.cjs');
require('bs58');
require('@dynamic-labs/types');
require('../../../../context/SocialRedirectContext/SocialRedirectContext.cjs');
require('../../../../context/AccessDeniedContext/AccessDeniedContext.cjs');
require('../../../../context/AccountExistsContext/AccountExistsContext.cjs');
require('../../../../context/LoadingContext/LoadingContext.cjs');
require('../../../../context/WalletContext/WalletContext.cjs');
require('../../../../context/UserWalletsContext/UserWalletsContext.cjs');
require('../../useEmbeddedWallet/useSecureEnclaveEmbeddedWallet/constants.cjs');
require('yup');
require('../../../../context/MockContext/MockContext.cjs');
require('../../../../views/CollectUserDataView/useFields.cjs');
require('../../../../context/FieldsStateContext/FieldsStateContext.cjs');
require('../../../../context/UserFieldEditorContext/UserFieldEditorContext.cjs');
require('@dynamic-labs/rpc-providers');
require('../../../../store/state/walletOptions/walletOptions.cjs');
require('react-i18next');
require('../../../../components/Accordion/components/AccordionItem/AccordionItem.cjs');
require('../../../../components/Alert/Alert.cjs');
require('../../../../components/ShadowDOM/ShadowDOM.cjs');
require('../../../../components/IconButton/IconButton.cjs');
require('../../../../components/InlineWidget/InlineWidget.cjs');
require('../../../../components/Input/Input.cjs');
require('../../../../components/IsBrowser/IsBrowser.cjs');
require('../../../../components/MenuList/Dropdown/Dropdown.cjs');
require('../../../../components/OverlayCard/OverlayCard.cjs');
require('../../../../components/Transition/ZoomTransition/ZoomTransition.cjs');
require('../../../../components/Transition/SlideInUpTransition/SlideInUpTransition.cjs');
require('../../../../components/Transition/OpacityTransition/OpacityTransition.cjs');
require('../../../../components/PasskeyCreatedSuccessBanner/PasskeyCreatedSuccessBanner.cjs');
require('../../../../components/Popper/Popper/Popper.cjs');
require('../../../../components/Popper/PopperContext/PopperContext.cjs');
require('react-focus-lock');
require('qrcode');
require('formik');
require('../../useSubdomainCheck/useSubdomainCheck.cjs');
require('../../../../context/WalletGroupContext/WalletGroupContext.cjs');
require('../../../../context/IpConfigurationContext/IpConfigurationContext.cjs');
require('../../../../context/ConnectWithOtpContext/ConnectWithOtpContext.cjs');
require('../../../../widgets/DynamicBridgeWidget/views/WalletsView/components/SecondaryWallets/SecondaryWallets.cjs');
require('@hcaptcha/react-hcaptcha');
require('../../../../widgets/DynamicWidget/context/DynamicWidgetContext.cjs');
require('../../../../widgets/DynamicWidget/helpers/convertExchangeKeyAndProviderEnum.cjs');
require('../../../../views/ExchangeWhitelistWarning/ExchangeWhitelistWarning.cjs');
require('../../../../context/ErrorContext/hooks/useErrorText/useErrorText.cjs');
require('../../../../context/FooterAnimationContext/index.cjs');
require('../../../../views/MfaChooseDeviceView/getMfaOptions/getMfaOptions.cjs');
require('../../../../context/PasskeyContext/PasskeyContext.cjs');
require('../../../../context/OnrampContext/OnrampContext.cjs');
require('../../../../store/state/sendBalances.cjs');
require('../../../../store/state/connectorsInitializing/connectorsInitializing.cjs');
require('../../../../components/OverlayCardBase/OverlayCardTarget/OverlayCardTarget.cjs');
require('../../../../widgets/DynamicWidget/components/DynamicWidgetHeader/DynamicWidgetHeader.cjs');
require('../../../../views/TransactionConfirmationView/TransactionConfirmationView.cjs');
require('../../../../widgets/DynamicWidget/components/PasskeyCard/PasskeyCard.cjs');
require('../../../../../index.cjs');
require('../../../../widgets/DynamicWidget/views/ReceiveWalletFunds/ReceiveWalletFunds.cjs');
require('../../../../store/state/tokenBalances.cjs');
require('../../../../store/state/multichainBalances.cjs');
require('../../../../shared/utils/functions/getInitialUrl/getInitialUrl.cjs');
var useInternalDynamicContext = require('../../../../context/DynamicContext/useDynamicContext/useInternalDynamicContext/useInternalDynamicContext.cjs');

const useConnectAndSignSplitSteps = () => {
    const { pushView, clearStackAndPushInitialView } = ViewContext.useViewContext();
    const { setErrorMessage } = ErrorContext.useErrorContext();
    const { getCaptchaToken, engageCaptcha } = CaptchaContext.useCaptchaContext();
    const { connectWallet, displaySiweStatement, projectSettings, environmentId, networkValidationMode, setIsSingleWalletAccount, setShowAuthFlow, } = useInternalDynamicContext.useInternalDynamicContext();
    const { handleWalletsToConnect } = useHandleWalletsToConnect.useHandleWalletsToConnect();
    const verifyWallet = useVerifyWallet.useVerifyWallet({
        displaySiweStatement,
        environmentId,
        projectSettings,
        setIsSingleWalletAccount,
    });
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    const onErrorHandler = (err) => {
        var _a;
        logger.logger.debug(err);
        /**
         * On mobile, when the user is redirected to the wallet mobile app, this error is thrown.
         * We want to stay in whichever view we currently are, most likely mobile-wallet-redirect-view
         */
        if (err instanceof utils.MissingPublicAddressError && utils.isMobile())
            return;
        clearStackAndPushInitialView();
        setErrorMessage((_a = err.code) !== null && _a !== void 0 ? _a : err.toString());
    };
    // This method is similar to useConnectAndSign, but it skips signing for now
    // It's used when we want to connect and sign in two separate steps
    // For example on mobile when we want to sign on button click
    // or in Dapper
    const onlyConnectUser = (_a) => _tslib.__awaiter(void 0, [_a], void 0, function* ({ walletConnector, getAddressOpts = undefined, shouldShowPendingConnectView = true, }) {
        var _b;
        if (shouldShowPendingConnectView)
            yield showPendingConnectView.showPendingConnectView(walletConnector, pushView);
        try {
            yield connectWallet(walletConnector, getAddressOpts);
            if (isConnectOnly.isConnectOnly()) {
                utils.StorageService.setItem(localStorage.LAST_USED_WALLET, walletConnector.key);
                handleWalletsToConnect({ walletConnector });
                return;
            }
            if ((_b = projectSettings === null || projectSettings === void 0 ? void 0 : projectSettings.security.hCaptcha) === null || _b === void 0 ? void 0 : _b.enabled) {
                engageCaptcha({
                    authMethod: 'wallet',
                    onCaptchaSuccess: (_captchaToken) => _tslib.__awaiter(void 0, void 0, void 0, function* () {
                        setShowAuthFlow(true);
                        pushView('pending-signature');
                    }),
                });
                return;
            }
            setShowAuthFlow(true);
            pushView('pending-signature');
        }
        catch (err) {
            onErrorHandler(err);
            return;
        }
    });
    // This method is similar to useConnectAndSign, but it does not call showPendingConnectView
    // This is because we already called it in onlyConnectUser and now we just want to sign
    const signAlreadyConnectedUser = (_c) => _tslib.__awaiter(void 0, [_c], void 0, function* ({ walletConnector, getAddressOpts = undefined, }) {
        try {
            const connectionResult = yield connectWallet(walletConnector, getAddressOpts);
            if (!(connectionResult === null || connectionResult === void 0 ? void 0 : connectionResult.address)) {
                return;
            }
            const walletNetwork = yield walletConnector.getNetwork(true);
            const usesSupportedNetwork = isSupportedNetwork.isSupportedNetwork({
                network: walletNetwork,
                walletConnector,
            });
            const isNetworkValidationEnabledForSignIn = networkValidationMode === 'always' ||
                networkValidationMode === 'sign-in';
            if (!usesSupportedNetwork && isNetworkValidationEnabledForSignIn) {
                if (!isProgrammableNetworkSwitchSupported.isProgrammableNetworkSwitchSupported(walletConnector)) {
                    return pushView('network-not-supported-manual');
                }
                return pushView('network-not-supported');
            }
            yield verifyWallet({
                captchaToken: getCaptchaToken(),
                publicWalletAddress: connectionResult.address,
                walletConnector,
            });
        }
        catch (err) {
            onErrorHandler(err);
            return;
        }
    });
    return {
        onlyConnectUser,
        signAlreadyConnectedUser,
    };
};

exports.useConnectAndSignSplitSteps = useConnectAndSignSplitSteps;
