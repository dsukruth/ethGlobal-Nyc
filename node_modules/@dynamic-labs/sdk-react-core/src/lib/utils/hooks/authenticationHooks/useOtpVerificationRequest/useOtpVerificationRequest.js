'use client'
import { __awaiter } from '../../../../../../_virtual/_tslib.js';
import { useMemo, useCallback } from 'react';
import { DynamicError } from '@dynamic-labs/utils';
import '../../../../events/dynamicEvents.js';
import '../../../../context/DynamicContext/DynamicContext.js';
import '../../../../store/state/loadingAndLifecycle/loadingAndLifecycle.js';
import '@dynamic-labs/sdk-api-core';
import '../../../../shared/logger.js';
import '@dynamic-labs/iconic';
import '@dynamic-labs/wallet-connector-core';
import 'react/jsx-runtime';
import '../../../../context/ViewContext/ViewContext.js';
import '@dynamic-labs/wallet-book';
import '../../../constants/colors.js';
import '../../../constants/values.js';
import '../../../../shared/consts/index.js';
import '../../../../store/state/authMode/authMode.js';
import { useInternalDynamicContext } from '../../../../context/DynamicContext/useDynamicContext/useInternalDynamicContext/useInternalDynamicContext.js';
import '../../../../context/CaptchaContext/CaptchaContext.js';
import '../../../../context/ErrorContext/ErrorContext.js';
import { USER_NOT_LOGGED_IN } from '../../../constants/errors.js';
import '@dynamic-labs/multi-wallet';
import 'react-international-phone';
import '../../../../store/state/nonce/nonce.js';
import '@dynamic-labs-sdk/client/core';
import '../../../../client/client.js';
import '@dynamic-labs-sdk/client';
import '../../../../store/state/projectSettings/projectSettings.js';
import { storeTokenAndUser } from '../../../../client/extension/storeTokenAndUser/storeTokenAndUser.js';
import { verifyEmail } from '../../../../data/api/email/email.js';
import '../../../../config/ApiEndpoint.js';
import { verifySms } from '../../../../data/api/sms/sms.js';
import '../../../../store/state/dynamicContextProps/dynamicContextProps.js';
import '../../../../store/state/primaryWalletId/primaryWalletId.js';
import '../../../../store/state/connectedWalletsInfo/connectedWalletsInfo.js';
import '../../../../context/AccessDeniedContext/AccessDeniedContext.js';
import '../../../../context/AccountExistsContext/AccountExistsContext.js';
import '../../../../context/UserWalletsContext/UserWalletsContext.js';
import { useVerification } from '../../../../context/VerificationContext/VerificationContext.js';
import { getVerificationDestinationFromNextView } from '../../../functions/getVerificationDestinationFromNextView/getVerificationDestinationFromNextView.js';
import 'react-dom';
import '../../../functions/compareChains/compareChains.js';
import '../../../../views/Passkey/utils/findPrimaryEmbeddedChain/findPrimaryEmbeddedChain.js';
import '../../../../context/ThemeContext/ThemeContext.js';
import { useHandleVerificationRequired } from '../../useHandleVerificationRequired/useHandleVerificationRequired.js';
import 'bs58';
import '@dynamic-labs/types';
import '../../../../context/SocialRedirectContext/SocialRedirectContext.js';
import '../../../../context/LoadingContext/LoadingContext.js';
import '../../../../context/WalletContext/WalletContext.js';
import '../../useEmbeddedWallet/useSecureEnclaveEmbeddedWallet/constants.js';
import 'yup';
import '../../../../context/MockContext/MockContext.js';
import '../../../../views/CollectUserDataView/useFields.js';
import '../../../../context/FieldsStateContext/FieldsStateContext.js';
import '../../useUserUpdateRequest/useUpdateUser/userFieldsSchema.js';
import '../../../../context/UserFieldEditorContext/UserFieldEditorContext.js';
import '@dynamic-labs/rpc-providers';
import '../../../../store/state/walletOptions/walletOptions.js';
import 'react-i18next';
import '../../../../components/Accordion/components/AccordionItem/AccordionItem.js';
import '../../../../components/Alert/Alert.js';
import '../../../../components/ShadowDOM/ShadowDOM.js';
import '../../../../components/IconButton/IconButton.js';
import '../../../../components/InlineWidget/InlineWidget.js';
import '../../../../components/Input/Input.js';
import '../../../../components/IsBrowser/IsBrowser.js';
import '../../../../components/MenuList/Dropdown/Dropdown.js';
import '../../../../components/OverlayCard/OverlayCard.js';
import '../../../../components/Transition/ZoomTransition/ZoomTransition.js';
import '../../../../components/Transition/SlideInUpTransition/SlideInUpTransition.js';
import '../../../../components/Transition/OpacityTransition/OpacityTransition.js';
import '../../../../components/PasskeyCreatedSuccessBanner/PasskeyCreatedSuccessBanner.js';
import '../../../../components/Popper/Popper/Popper.js';
import '../../../../components/Popper/PopperContext/PopperContext.js';
import 'react-focus-lock';
import 'qrcode';
import 'formik';
import '../../useSubdomainCheck/useSubdomainCheck.js';
import '../../../../context/WalletGroupContext/WalletGroupContext.js';
import '../../../../context/IpConfigurationContext/IpConfigurationContext.js';
import '../../../../context/ConnectWithOtpContext/ConnectWithOtpContext.js';
import '../../../../widgets/DynamicBridgeWidget/views/WalletsView/components/SecondaryWallets/SecondaryWallets.js';
import '@hcaptcha/react-hcaptcha';
import '../../../../widgets/DynamicWidget/context/DynamicWidgetContext.js';
import '../../../../widgets/DynamicWidget/helpers/convertExchangeKeyAndProviderEnum.js';
import '../../../../views/ExchangeWhitelistWarning/ExchangeWhitelistWarning.js';
import '../../../../context/ErrorContext/hooks/useErrorText/useErrorText.js';
import '../../../../context/FooterAnimationContext/index.js';
import '../../../../locale/locale.js';
import '../../../../views/MfaChooseDeviceView/getMfaOptions/getMfaOptions.js';
import '../../../../context/PasskeyContext/PasskeyContext.js';
import '../../../../context/OnrampContext/OnrampContext.js';
import '../../../../store/state/sendBalances.js';
import '../../../../store/state/connectorsInitializing/connectorsInitializing.js';
import '../../../../components/OverlayCardBase/OverlayCardTarget/OverlayCardTarget.js';
import '../../../../widgets/DynamicWidget/components/DynamicWidgetHeader/DynamicWidgetHeader.js';
import '../../../../views/TransactionConfirmationView/TransactionConfirmationView.js';
import '../../../../widgets/DynamicWidget/components/PasskeyCard/PasskeyCard.js';
import '../../../../../index.js';
import '../../../../widgets/DynamicWidget/views/ReceiveWalletFunds/ReceiveWalletFunds.js';
import '../../../../store/state/tokenBalances.js';
import '../../../../store/state/multichainBalances.js';
import '../../../../shared/utils/functions/getInitialUrl/getInitialUrl.js';

/**
 * Same as useOtpVerificationRequest, but requires you to pass it a handleVerificationRequired method as param.
 * This is to avoid a circular logic issue, as handleVerificationRequired needs to use the logic in this file as well.
 */
const useOtpVerificationRequestRaw = () => {
    const { environmentId, user, userWithMissingInfo } = useInternalDynamicContext();
    const { verificationUUID: contextVerificationUUID } = useVerification();
    const verifyOtp = useCallback((handleVerificationRequired, verificationToken, destination, localVerificationUUID) => __awaiter(void 0, void 0, void 0, function* () {
        var _a;
        if (!user && !userWithMissingInfo)
            throw new DynamicError(USER_NOT_LOGGED_IN);
        // VerificationUUID is saved in the context in case the view changes
        // after a profile update (changing the view from edit profile to verify email)
        if (!localVerificationUUID && !contextVerificationUUID)
            throw new DynamicError('No verification UUID is available');
        const verificationUUID = (localVerificationUUID !== null && localVerificationUUID !== void 0 ? localVerificationUUID : contextVerificationUUID);
        const verify = destination === 'email' ? verifyEmail : verifySms;
        const updateSelfResponse = yield verify({
            environmentId,
            verificationToken,
            verificationUUID,
        });
        const updatedUser = updateSelfResponse.user;
        const missingFields = (_a = updatedUser === null || updatedUser === void 0 ? void 0 : updatedUser.missingFields) !== null && _a !== void 0 ? _a : [];
        const requiredVerificationDestination = getVerificationDestinationFromNextView(updateSelfResponse.nextView);
        // If verification is not needed then we can update the user profile immediately.
        storeTokenAndUser(updateSelfResponse);
        if (requiredVerificationDestination)
            return handleVerificationRequired({
                destination: requiredVerificationDestination,
                missingFields,
                updateUserProfileResponse: updateSelfResponse,
            });
        return {
            isEmailVerificationRequired: false,
            isSmsVerificationRequired: false,
            missingFields,
            updateUserProfileResponse: updateSelfResponse,
        };
    }), [contextVerificationUUID, environmentId, user, userWithMissingInfo]);
    return { verifyOtp };
};
/**
 * Hook to make verifications and already handle nuances like handling additional verifications
 * and setting the user jwt on success
 */
// ATTENTION: THIS IS EXPOSED TO THE PUBLIC!
const useOtpVerificationRequest = () => {
    const handleVerificationRequired = useHandleVerificationRequired();
    const { verifyOtp } = useOtpVerificationRequestRaw();
    return useMemo(() => ({
        verifyOtp: (token, destination, verificationUUID) => verifyOtp(handleVerificationRequired, token, destination, verificationUUID),
    }), [handleVerificationRequired, verifyOtp]);
};

export { useOtpVerificationRequest, useOtpVerificationRequestRaw };
