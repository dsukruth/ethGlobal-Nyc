'use client'
import { __awaiter } from '../../../../../../_virtual/_tslib.js';
import { StorageService, CustomError, GetAddressCancelledError } from '@dynamic-labs/utils';
import { isEmailWalletConnector, isEmailOTPWalletConnector, isBloctoConnector } from '@dynamic-labs/wallet-connector-core';
import { useCaptchaContext } from '../../../../context/CaptchaContext/CaptchaContext.js';
import 'react';
import '../../../../context/DynamicContext/DynamicContext.js';
import { setIsInitialWalletVerificationInProgress } from '../../../../store/state/loadingAndLifecycle/loadingAndLifecycle.js';
import '@dynamic-labs/sdk-api-core';
import { logger } from '../../../../shared/logger.js';
import '@dynamic-labs/iconic';
import 'react/jsx-runtime';
import { useViewContext } from '../../../../context/ViewContext/ViewContext.js';
import '@dynamic-labs/wallet-book';
import { LAST_USED_WALLET } from '../../../constants/localStorage.js';
import '../../../constants/colors.js';
import '../../../constants/values.js';
import '../../../../shared/consts/index.js';
import { dynamicEvents } from '../../../../events/dynamicEvents.js';
import { useErrorContext } from '../../../../context/ErrorContext/ErrorContext.js';
import '@dynamic-labs/multi-wallet';
import 'react-international-phone';
import '../../../../store/state/nonce/nonce.js';
import { isProgrammableNetworkSwitchSupported } from '../../../functions/isProgrammableNetworkSwitchSupported/isProgrammableNetworkSwitchSupported.js';
import { isSupportedNetwork } from '../../../functions/isSupportedNetwork/isSupportedNetwork.js';
import '@dynamic-labs-sdk/client/core';
import '../../../../client/client.js';
import '@dynamic-labs-sdk/client';
import '../../../../store/state/projectSettings/projectSettings.js';
import '../../../../config/ApiEndpoint.js';
import '../../../../locale/locale.js';
import '../../../../store/state/dynamicContextProps/dynamicContextProps.js';
import '../../../../store/state/primaryWalletId/primaryWalletId.js';
import '../../../../store/state/connectedWalletsInfo/connectedWalletsInfo.js';
import { useHandleWalletsToConnect } from '../../useHandleWalletsToConnect/useHandleWalletsToConnect.js';
import { useVerifyWallet } from '../../useVerifyWallet/useVerifyWallet.js';
import { showPendingConnectView } from '../helpers/showPendingConnectView.js';
import { isConnectOnly } from '../helpers/isConnectOnly.js';
import { unsetInitialWalletVerificationFlag, unsetInitialWalletVerificationFlagWithTimeout } from './unsetInitialWalletVerificationFlag/unsetInitialWalletVerificationFlag.js';
import '../../../../context/VerificationContext/VerificationContext.js';
import 'react-dom';
import '../../../functions/compareChains/compareChains.js';
import '../../../../views/Passkey/utils/findPrimaryEmbeddedChain/findPrimaryEmbeddedChain.js';
import '../../../../context/ThemeContext/ThemeContext.js';
import '../../../../store/state/authMode/authMode.js';
import '../../useUserUpdateRequest/useUpdateUser/userFieldsSchema.js';
import 'bs58';
import '@dynamic-labs/types';
import '../../../../context/SocialRedirectContext/SocialRedirectContext.js';
import '../../../../context/AccessDeniedContext/AccessDeniedContext.js';
import '../../../../context/AccountExistsContext/AccountExistsContext.js';
import '../../../../context/LoadingContext/LoadingContext.js';
import '../../../../context/WalletContext/WalletContext.js';
import '../../../../context/UserWalletsContext/UserWalletsContext.js';
import '../../useEmbeddedWallet/useSecureEnclaveEmbeddedWallet/constants.js';
import 'yup';
import '../../../../context/MockContext/MockContext.js';
import '../../../../views/CollectUserDataView/useFields.js';
import '../../../../context/FieldsStateContext/FieldsStateContext.js';
import '../../../../context/UserFieldEditorContext/UserFieldEditorContext.js';
import '@dynamic-labs/rpc-providers';
import '../../../../store/state/walletOptions/walletOptions.js';
import 'react-i18next';
import '../../../../components/Accordion/components/AccordionItem/AccordionItem.js';
import '../../../../components/Alert/Alert.js';
import '../../../../components/ShadowDOM/ShadowDOM.js';
import '../../../../components/IconButton/IconButton.js';
import '../../../../components/InlineWidget/InlineWidget.js';
import '../../../../components/Input/Input.js';
import '../../../../components/IsBrowser/IsBrowser.js';
import '../../../../components/MenuList/Dropdown/Dropdown.js';
import '../../../../components/OverlayCard/OverlayCard.js';
import '../../../../components/Transition/ZoomTransition/ZoomTransition.js';
import '../../../../components/Transition/SlideInUpTransition/SlideInUpTransition.js';
import '../../../../components/Transition/OpacityTransition/OpacityTransition.js';
import '../../../../components/PasskeyCreatedSuccessBanner/PasskeyCreatedSuccessBanner.js';
import '../../../../components/Popper/Popper/Popper.js';
import '../../../../components/Popper/PopperContext/PopperContext.js';
import 'react-focus-lock';
import 'qrcode';
import 'formik';
import '../../useSubdomainCheck/useSubdomainCheck.js';
import '../../../../context/WalletGroupContext/WalletGroupContext.js';
import '../../../../context/IpConfigurationContext/IpConfigurationContext.js';
import '../../../../context/ConnectWithOtpContext/ConnectWithOtpContext.js';
import '../../../../widgets/DynamicBridgeWidget/views/WalletsView/components/SecondaryWallets/SecondaryWallets.js';
import '@hcaptcha/react-hcaptcha';
import '../../../../widgets/DynamicWidget/context/DynamicWidgetContext.js';
import '../../../../widgets/DynamicWidget/helpers/convertExchangeKeyAndProviderEnum.js';
import '../../../../views/ExchangeWhitelistWarning/ExchangeWhitelistWarning.js';
import '../../../../context/ErrorContext/hooks/useErrorText/useErrorText.js';
import '../../../../context/FooterAnimationContext/index.js';
import '../../../../views/MfaChooseDeviceView/getMfaOptions/getMfaOptions.js';
import '../../../../context/PasskeyContext/PasskeyContext.js';
import '../../../../context/OnrampContext/OnrampContext.js';
import '../../../../store/state/sendBalances.js';
import '../../../../store/state/connectorsInitializing/connectorsInitializing.js';
import '../../../../components/OverlayCardBase/OverlayCardTarget/OverlayCardTarget.js';
import '../../../../widgets/DynamicWidget/components/DynamicWidgetHeader/DynamicWidgetHeader.js';
import '../../../../views/TransactionConfirmationView/TransactionConfirmationView.js';
import '../../../../widgets/DynamicWidget/components/PasskeyCard/PasskeyCard.js';
import '../../../../../index.js';
import '../../../../widgets/DynamicWidget/views/ReceiveWalletFunds/ReceiveWalletFunds.js';
import '../../../../store/state/tokenBalances.js';
import '../../../../store/state/multichainBalances.js';
import '../../../../shared/utils/functions/getInitialUrl/getInitialUrl.js';
import { useInternalDynamicContext } from '../../../../context/DynamicContext/useDynamicContext/useInternalDynamicContext/useInternalDynamicContext.js';

const useConnectAndSign = ({ shouldUpdateWallets = true, shouldCallCallback = true, } = {}) => {
    const { pushView, clearStackAndPushInitialView, replaceView } = useViewContext();
    const { engageCaptcha, getCaptchaToken } = useCaptchaContext();
    const { setErrorMessage, setError, setDefaultError } = useErrorContext();
    const { connectWallet, displaySiweStatement, environmentId, projectSettings, networkValidationMode, setIsSingleWalletAccount, walletUiUtils, } = useInternalDynamicContext();
    const { handleWalletsToConnect } = useHandleWalletsToConnect();
    const verifyWallet = useVerifyWallet({
        displaySiweStatement,
        environmentId,
        projectSettings,
        setIsSingleWalletAccount,
    });
    const handleWalletVerify = (walletConnector, publicWalletAddress, captchaToken) => __awaiter(void 0, void 0, void 0, function* () {
        if (!isEmailWalletConnector(walletConnector) ||
            isBloctoConnector(walletConnector)) {
            replaceView('pending-signature');
        }
        else {
            walletUiUtils.disabledConfirmationOnce();
        }
        yield verifyWallet({
            captchaToken,
            publicWalletAddress,
            walletConnector,
        });
    });
    const handleWalletVerifyError = (err) => {
        var _a;
        const userCancelled = (err === null || err === void 0 ? void 0 : err.code) === 'user-cancelled';
        if (!userCancelled)
            logger.debug(err);
        clearStackAndPushInitialView();
        if (err instanceof CustomError) {
            setError(err.message, err.code);
        }
        else {
            setErrorMessage((_a = err === null || err === void 0 ? void 0 : err.code) === null || _a === void 0 ? void 0 : _a.toString());
        }
    };
    const handleWalletConnectionError = (error) => {
        if (error instanceof GetAddressCancelledError) {
            return;
        }
        clearStackAndPushInitialView();
        if (error instanceof CustomError) {
            setError(error.message, error.code);
        }
        else {
            setDefaultError();
        }
    };
    return (_a) => __awaiter(void 0, [_a], void 0, function* ({ walletConnector, getAddressOpts = undefined, }) {
        var _b;
        try {
            // Lock the variable that indicates that the login wallet verification is in progress
            // Read UserWalletsContext.tsx explanation for more context
            setIsInitialWalletVerificationInProgress(true);
            dynamicEvents.once('walletAdded', unsetInitialWalletVerificationFlag);
            yield showPendingConnectView(walletConnector, pushView);
            if (isEmailWalletConnector(walletConnector)) {
                if (isEmailOTPWalletConnector(walletConnector)) {
                    pushView('email-wallet-otp-verification-view');
                }
                else if (!isBloctoConnector(walletConnector)) {
                    pushView('wait-for-email-confirmation-view');
                }
            }
            let connectionResult;
            try {
                connectionResult = yield connectWallet(walletConnector, getAddressOpts, {
                    applyHandleConnectedWallet: shouldCallCallback,
                });
            }
            catch (error) {
                handleWalletConnectionError(error);
                return;
            }
            // Fallback to catch any errors that were missed.
            if (!(connectionResult === null || connectionResult === void 0 ? void 0 : connectionResult.address)) {
                handleWalletConnectionError();
                return;
            }
            const { address } = connectionResult;
            const walletNetwork = yield walletConnector.getNetwork(true);
            const usesSupportedNetwork = isSupportedNetwork({
                network: walletNetwork,
                walletConnector,
            });
            const isNetworkValidationEnabledForSignIn = networkValidationMode === 'always' ||
                networkValidationMode === 'sign-in';
            if (!usesSupportedNetwork && isNetworkValidationEnabledForSignIn) {
                if (!isProgrammableNetworkSwitchSupported(walletConnector)) {
                    return pushView('network-not-supported-manual');
                }
                return pushView('network-not-supported');
            }
            if (isConnectOnly()) {
                StorageService.setItem(LAST_USED_WALLET, walletConnector.key);
                if (shouldUpdateWallets) {
                    handleWalletsToConnect({ walletConnector });
                }
                return;
            }
            if ((_b = projectSettings === null || projectSettings === void 0 ? void 0 : projectSettings.security.hCaptcha) === null || _b === void 0 ? void 0 : _b.enabled) {
                engageCaptcha({
                    authMethod: 'wallet',
                    onCaptchaSuccess: (captchaToken) => __awaiter(void 0, void 0, void 0, function* () {
                        try {
                            yield handleWalletVerify(walletConnector, address, captchaToken);
                        }
                        catch (e) {
                            handleWalletVerifyError(e);
                        }
                    }),
                });
                return;
            }
            yield handleWalletVerify(walletConnector, address, getCaptchaToken());
        }
        catch (err) {
            handleWalletVerifyError(err);
        }
        finally {
            // Read UserWalletsContext.tsx explanation for more context
            // This will unlock the variable that indicates "verification in progress"
            // by calling setIsInitialWalletVerificationInProgress(false).
            // However, we do not want to do so immediately, as some routines of wallet verification process
            // are still ongoing.
            // This method sets up a listener and a timeout to ensure the unlock will happen, but only after
            // verification is finally complete.
            // In order to debug why this is necessary, try:
            // 1. Remove the setIsInitialWalletVerificationInProgress calls
            // 2. Add a useEffect somewhere that does primaryWallet.switchNetwork() and depends on primaryWallet
            // 3. The SDK will enter a broken state. Try signing a message with wagmi.
            // You can also add a "pause on exception" breakpoint in the debugger and see what happens during verification.
            unsetInitialWalletVerificationFlagWithTimeout();
        }
    });
};

export { useConnectAndSign };
