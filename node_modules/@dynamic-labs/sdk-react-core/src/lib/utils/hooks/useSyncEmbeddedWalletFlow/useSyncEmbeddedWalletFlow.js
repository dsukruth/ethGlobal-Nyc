'use client'
import { __awaiter } from '../../../../../_virtual/_tslib.js';
import { useRef, useCallback, useEffect } from 'react';
import { EmbeddedWalletException } from '@dynamic-labs/utils';
import { getDynamicClient } from '../../../client/client.js';
import '../../../context/DynamicContext/DynamicContext.js';
import '../../../store/state/loadingAndLifecycle/loadingAndLifecycle.js';
import '@dynamic-labs/sdk-api-core';
import { logger } from '../../../shared/logger.js';
import '@dynamic-labs/iconic';
import '@dynamic-labs/wallet-connector-core';
import 'react/jsx-runtime';
import '../../../context/ViewContext/ViewContext.js';
import '@dynamic-labs/wallet-book';
import '../../constants/colors.js';
import '../../constants/values.js';
import { useLocalStorage } from '../../../shared/utils/hooks/useLocalStorage/useLocalStorage.js';
import '../../../shared/consts/index.js';
import { useInternalDynamicEvents } from '../events/useDynamicEvents/useDynamicEvents.js';
import '../../../context/CaptchaContext/CaptchaContext.js';
import '../../../context/ErrorContext/ErrorContext.js';
import { findEmbeddedWalletFromVerifiedCredentials } from '../../functions/findEmbeddedWalletFromVerifiedCredentials/findEmbeddedWalletFromVerifiedCredentials.js';
import '@dynamic-labs/multi-wallet';
import 'react-international-phone';
import '../../../store/state/nonce/nonce.js';
import '@dynamic-labs-sdk/client/core';
import '@dynamic-labs-sdk/client';
import '../../../events/dynamicEvents.js';
import '../../../store/state/projectSettings/projectSettings.js';
import '../../../config/ApiEndpoint.js';
import '../../../locale/locale.js';
import '../../../store/state/dynamicContextProps/dynamicContextProps.js';
import '../../../store/state/primaryWalletId/primaryWalletId.js';
import '../../../store/state/connectedWalletsInfo/connectedWalletsInfo.js';
import '../../../context/AccessDeniedContext/AccessDeniedContext.js';
import '../../../context/AccountExistsContext/AccountExistsContext.js';
import '../../../context/UserWalletsContext/UserWalletsContext.js';
import '../../../store/state/authMode/authMode.js';
import '../../../context/VerificationContext/VerificationContext.js';
import 'react-dom';
import '../../functions/compareChains/compareChains.js';
import '../../../views/Passkey/utils/findPrimaryEmbeddedChain/findPrimaryEmbeddedChain.js';
import '../../../context/ThemeContext/ThemeContext.js';
import '../useUserUpdateRequest/useUpdateUser/userFieldsSchema.js';
import 'bs58';
import '@dynamic-labs/types';
import '../../../context/SocialRedirectContext/SocialRedirectContext.js';
import { useLoadingContext } from '../../../context/LoadingContext/LoadingContext.js';
import { useEmbeddedWallet } from '../useEmbeddedWallet/useEmbeddedWallet.js';
import { useWalletContext } from '../../../context/WalletContext/WalletContext.js';
import '../useEmbeddedWallet/useSecureEnclaveEmbeddedWallet/constants.js';
import 'yup';
import '../../../context/MockContext/MockContext.js';
import '../../../views/CollectUserDataView/useFields.js';
import '../../../context/FieldsStateContext/FieldsStateContext.js';
import '../../../context/UserFieldEditorContext/UserFieldEditorContext.js';
import '@dynamic-labs/rpc-providers';
import '../../../store/state/walletOptions/walletOptions.js';
import 'react-i18next';
import '../../../components/Accordion/components/AccordionItem/AccordionItem.js';
import '../../../components/Alert/Alert.js';
import '../../../components/ShadowDOM/ShadowDOM.js';
import '../../../components/IconButton/IconButton.js';
import '../../../components/InlineWidget/InlineWidget.js';
import '../../../components/Input/Input.js';
import '../../../components/IsBrowser/IsBrowser.js';
import '../../../components/MenuList/Dropdown/Dropdown.js';
import '../../../components/OverlayCard/OverlayCard.js';
import '../../../components/Transition/ZoomTransition/ZoomTransition.js';
import '../../../components/Transition/SlideInUpTransition/SlideInUpTransition.js';
import '../../../components/Transition/OpacityTransition/OpacityTransition.js';
import '../../../components/PasskeyCreatedSuccessBanner/PasskeyCreatedSuccessBanner.js';
import '../../../components/Popper/Popper/Popper.js';
import '../../../components/Popper/PopperContext/PopperContext.js';
import 'react-focus-lock';
import 'qrcode';
import 'formik';
import '../useSubdomainCheck/useSubdomainCheck.js';
import '../../../context/WalletGroupContext/WalletGroupContext.js';
import '../../../context/IpConfigurationContext/IpConfigurationContext.js';
import '../../../context/ConnectWithOtpContext/ConnectWithOtpContext.js';
import '../../../widgets/DynamicBridgeWidget/views/WalletsView/components/SecondaryWallets/SecondaryWallets.js';
import '@hcaptcha/react-hcaptcha';
import '../../../widgets/DynamicWidget/context/DynamicWidgetContext.js';
import '../../../widgets/DynamicWidget/helpers/convertExchangeKeyAndProviderEnum.js';
import '../../../views/ExchangeWhitelistWarning/ExchangeWhitelistWarning.js';
import '../../../context/ErrorContext/hooks/useErrorText/useErrorText.js';
import '../../../context/FooterAnimationContext/index.js';
import '../../../views/MfaChooseDeviceView/getMfaOptions/getMfaOptions.js';
import '../../../context/PasskeyContext/PasskeyContext.js';
import '../../../context/OnrampContext/OnrampContext.js';
import '../../../store/state/sendBalances.js';
import '../../../store/state/connectorsInitializing/connectorsInitializing.js';
import '../../../components/OverlayCardBase/OverlayCardTarget/OverlayCardTarget.js';
import '../../../widgets/DynamicWidget/components/DynamicWidgetHeader/DynamicWidgetHeader.js';
import '../../../views/TransactionConfirmationView/TransactionConfirmationView.js';
import '../../../widgets/DynamicWidget/components/PasskeyCard/PasskeyCard.js';
import { useEmbeddedReveal } from '../useEmbeddedReveal/useEmbeddedReveal.js';
import '../../../../index.js';
import '../../../widgets/DynamicWidget/views/ReceiveWalletFunds/ReceiveWalletFunds.js';
import '../../../store/state/tokenBalances.js';
import '../../../store/state/multichainBalances.js';
import '../../../shared/utils/functions/getInitialUrl/getInitialUrl.js';
import { useInternalDynamicContext } from '../../../context/DynamicContext/useDynamicContext/useInternalDynamicContext/useInternalDynamicContext.js';

let acknowledgedExportPrompt = false;
const useSyncEmbeddedWalletFlow = () => {
    const { projectSettings, user: contextUser, primaryWalletId, walletConnectorOptions, primaryWallet, setShowAuthFlow, } = useInternalDynamicContext();
    const { isLoadingEmbeddedWallet } = useWalletContext();
    const { loading: globalLoading } = useLoadingContext();
    const { initExportProcess } = useEmbeddedReveal();
    const [wasShownExportPrompt, setWasShownExportPrompt] = useLocalStorage(`dynamic_export_prompt-${contextUser === null || contextUser === void 0 ? void 0 : contextUser.userId}`, false, (data) => Boolean(data));
    const { createEmbeddedWallet, shouldAutoCreateEmbeddedWallet, shouldPromptForKeyExport, } = useEmbeddedWallet();
    const triggeredCreate = useRef(false);
    const handleAcknowledgeExportPrompt = useCallback((value = true) => {
        acknowledgedExportPrompt = value;
        setWasShownExportPrompt(value);
    }, [setWasShownExportPrompt]);
    useInternalDynamicEvents('logout', () => {
        triggeredCreate.current = false;
        acknowledgedExportPrompt = false;
    });
    // this is used to trigger createEmbeddedWallet
    // when user didn't create a passkey after login,
    // we force them to created it before they can use the app
    // ** It must be an useEffect because some of the dependencies are async
    useEffect(() => {
        // Explanation: if the user just logged out, the user from the hook might still be set
        // but the client will be null.
        // And if the user is not onboarding complete yet, the hook won't be set even though the client.user is set.
        // This is why we check for the user AND the client.user.
        const user = contextUser && getDynamicClient().user;
        const syncEmbeddedWallet = () => __awaiter(void 0, void 0, void 0, function* () {
            const isNewUser = user === null || user === void 0 ? void 0 : user.newUser;
            if (shouldSyncCreateWallet) {
                triggeredCreate.current = true;
                try {
                    yield createEmbeddedWallet();
                }
                catch (error) {
                    if (error instanceof EmbeddedWalletException) {
                        logger.debug('[useSyncEmbeddedWalletFlow][EmbeddedWalletException] Error creating embedded wallet', error);
                    }
                    else {
                        logger.error('[useSyncEmbeddedWalletFlow] Error creating embedded wallet', error);
                    }
                    setShowAuthFlow(false);
                }
            }
            if (shouldSyncPromptKeyExport &&
                isNewUser &&
                findEmbeddedWalletFromVerifiedCredentials(user) &&
                primaryWallet) {
                try {
                    setShowAuthFlow(true);
                    yield initExportProcess(true, true);
                }
                catch (error) {
                    logger.error('Error initializing embedded wallet export', error);
                    setShowAuthFlow(false);
                }
            }
        });
        const shouldCreateWallet = shouldAutoCreateEmbeddedWallet();
        const shouldSyncCreateWallet = shouldCreateWallet && !triggeredCreate.current;
        if (wasShownExportPrompt && !acknowledgedExportPrompt)
            acknowledgedExportPrompt = true;
        const shouldPromptKeyExport = shouldPromptForKeyExport();
        const shouldSyncPromptKeyExport = shouldPromptKeyExport && !acknowledgedExportPrompt;
        const shouldSyncEmbeddedWallet = shouldSyncCreateWallet || shouldSyncPromptKeyExport;
        if (!shouldSyncEmbeddedWallet ||
            !user ||
            !projectSettings ||
            !walletConnectorOptions.length || // no connectors to use for the embedded wallet
            isLoadingEmbeddedWallet || // already has a wallet
            globalLoading // this will be true if auth is in progress
        ) {
            return;
        }
        syncEmbeddedWallet();
    }, [
        contextUser,
        projectSettings,
        primaryWalletId,
        createEmbeddedWallet,
        isLoadingEmbeddedWallet,
        walletConnectorOptions,
        globalLoading,
        shouldAutoCreateEmbeddedWallet,
        setShowAuthFlow,
        initExportProcess,
        primaryWallet,
        shouldPromptForKeyExport,
        setWasShownExportPrompt,
        handleAcknowledgeExportPrompt,
        wasShownExportPrompt,
    ]);
    return {
        acknowledgedExportPrompt,
        handleAcknowledgeExportPrompt,
    };
};

export { useSyncEmbeddedWalletFlow };
