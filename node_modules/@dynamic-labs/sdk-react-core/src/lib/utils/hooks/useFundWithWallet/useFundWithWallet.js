'use client'
import { __rest, __awaiter } from '../../../../../_virtual/_tslib.js';
import { useCallback, useMemo } from 'react';
import '../../../context/DynamicContext/DynamicContext.js';
import '../../../store/state/loadingAndLifecycle/loadingAndLifecycle.js';
import '@dynamic-labs/sdk-api-core';
import '../../../shared/logger.js';
import '@dynamic-labs/iconic';
import '@dynamic-labs/wallet-connector-core';
import 'react/jsx-runtime';
import '../../../context/ViewContext/ViewContext.js';
import '@dynamic-labs/wallet-book';
import '@dynamic-labs/utils';
import '../../constants/colors.js';
import '../../constants/values.js';
import '../../../shared/consts/index.js';
import '../../../events/dynamicEvents.js';
import '../../../context/CaptchaContext/CaptchaContext.js';
import '../../../context/ErrorContext/ErrorContext.js';
import '@dynamic-labs/multi-wallet';
import 'react-international-phone';
import '../../../store/state/nonce/nonce.js';
import '@dynamic-labs-sdk/client/core';
import '../../../client/client.js';
import '@dynamic-labs-sdk/client';
import { useProjectSettings } from '../../../store/state/projectSettings/projectSettings.js';
import '../../../config/ApiEndpoint.js';
import '../../../locale/locale.js';
import '../../../store/state/dynamicContextProps/dynamicContextProps.js';
import '../../../store/state/primaryWalletId/primaryWalletId.js';
import '../../../store/state/connectedWalletsInfo/connectedWalletsInfo.js';
import '../../../context/AccessDeniedContext/AccessDeniedContext.js';
import '../../../context/AccountExistsContext/AccountExistsContext.js';
import '../../../context/UserWalletsContext/UserWalletsContext.js';
import '../../../store/state/authMode/authMode.js';
import '../../../context/VerificationContext/VerificationContext.js';
import 'react-dom';
import '../../functions/compareChains/compareChains.js';
import '../../../views/Passkey/utils/findPrimaryEmbeddedChain/findPrimaryEmbeddedChain.js';
import '../../../context/ThemeContext/ThemeContext.js';
import '../useUserUpdateRequest/useUpdateUser/userFieldsSchema.js';
import 'bs58';
import '@dynamic-labs/types';
import '../../../context/SocialRedirectContext/SocialRedirectContext.js';
import '../../../context/LoadingContext/LoadingContext.js';
import '../../../context/WalletContext/WalletContext.js';
import '../useEmbeddedWallet/useSecureEnclaveEmbeddedWallet/constants.js';
import 'yup';
import '../../../context/MockContext/MockContext.js';
import '../../../views/CollectUserDataView/useFields.js';
import '../../../context/FieldsStateContext/FieldsStateContext.js';
import '../../../context/UserFieldEditorContext/UserFieldEditorContext.js';
import '@dynamic-labs/rpc-providers';
import '../../../store/state/walletOptions/walletOptions.js';
import 'react-i18next';
import '../../../components/Accordion/components/AccordionItem/AccordionItem.js';
import '../../../components/Alert/Alert.js';
import '../../../components/ShadowDOM/ShadowDOM.js';
import '../../../components/IconButton/IconButton.js';
import '../../../components/InlineWidget/InlineWidget.js';
import '../../../components/Input/Input.js';
import '../../../components/IsBrowser/IsBrowser.js';
import '../../../components/MenuList/Dropdown/Dropdown.js';
import '../../../components/OverlayCard/OverlayCard.js';
import '../../../components/Transition/ZoomTransition/ZoomTransition.js';
import '../../../components/Transition/SlideInUpTransition/SlideInUpTransition.js';
import '../../../components/Transition/OpacityTransition/OpacityTransition.js';
import '../../../components/PasskeyCreatedSuccessBanner/PasskeyCreatedSuccessBanner.js';
import '../../../components/Popper/Popper/Popper.js';
import '../../../components/Popper/PopperContext/PopperContext.js';
import 'react-focus-lock';
import 'qrcode';
import 'formik';
import '../useSubdomainCheck/useSubdomainCheck.js';
import '../../../context/WalletGroupContext/WalletGroupContext.js';
import '../../../context/IpConfigurationContext/IpConfigurationContext.js';
import '../../../context/ConnectWithOtpContext/ConnectWithOtpContext.js';
import '../../../widgets/DynamicBridgeWidget/views/WalletsView/components/SecondaryWallets/SecondaryWallets.js';
import '@hcaptcha/react-hcaptcha';
import '../../../widgets/DynamicWidget/context/DynamicWidgetContext.js';
import '../../../widgets/DynamicWidget/helpers/convertExchangeKeyAndProviderEnum.js';
import '../../../views/ExchangeWhitelistWarning/ExchangeWhitelistWarning.js';
import '../../../context/ErrorContext/hooks/useErrorText/useErrorText.js';
import '../../../context/FooterAnimationContext/index.js';
import '../../../views/MfaChooseDeviceView/getMfaOptions/getMfaOptions.js';
import '../../../context/PasskeyContext/PasskeyContext.js';
import '../../../context/OnrampContext/OnrampContext.js';
import '../../../store/state/sendBalances.js';
import '../../../store/state/connectorsInitializing/connectorsInitializing.js';
import '../../../components/OverlayCardBase/OverlayCardTarget/OverlayCardTarget.js';
import '../../../widgets/DynamicWidget/components/DynamicWidgetHeader/DynamicWidgetHeader.js';
import '../../../views/TransactionConfirmationView/TransactionConfirmationView.js';
import '../../../widgets/DynamicWidget/components/PasskeyCard/PasskeyCard.js';
import { useChooseLinkedWallet } from './useChooseLinkedWallet/useChooseLinkedWallet.js';
import { useConnectWalletForFunding } from './useConnectWalletForFunding/useConnectWalletForFunding.js';
import { useFund } from './useFund/useFund.js';
import { usePromptAmountAndFundWithWallet } from './usePromptAmountAndFundWithWallet/usePromptAmountAndFundWithWallet.js';
import '../../../widgets/DynamicWidget/views/ReceiveWalletFunds/ReceiveWalletFunds.js';
import '../../../../index.js';
import '../../../store/state/tokenBalances.js';
import '../../../store/state/multichainBalances.js';
import '../../../shared/utils/functions/getInitialUrl/getInitialUrl.js';
import { useInternalDynamicContext } from '../../../context/DynamicContext/useDynamicContext/useInternalDynamicContext/useInternalDynamicContext.js';

const useInternalFundWithWallet = () => {
    var _a, _b;
    const projectSettings = useProjectSettings();
    const fundWithWallet = useFund();
    const connectWalletForFunding = useConnectWalletForFunding();
    const promptAmountAndFundWithWallet = usePromptAmountAndFundWithWallet();
    const { chooseLinkedWallet, filteredWallets } = useChooseLinkedWallet();
    return useMemo(() => {
        var _a, _b;
        return ({
            /**
             * Shows a modal to pick a linked wallet and returns the picked wallet.
             */
            chooseLinkedWallet,
            /**
             * Connects an external wallet and returns the wallet.
             */
            connectWalletForFunding,
            /**
             * Whether external wallet funding is enabled.
             */
            externalWalletFundingEnabled: Boolean((_b = (_a = projectSettings === null || projectSettings === void 0 ? void 0 : projectSettings.sdk.funding) === null || _a === void 0 ? void 0 : _a.externalWallets) === null || _b === void 0 ? void 0 : _b.enabled),
            /**
             * The linked wallets available for funding the primary wallet.
             */
            filteredLinkedWallets: filteredWallets,
            /**
             * Triggers a funding transaction from the given wallet to the primary wallet.
             */
            fund: fundWithWallet,
            /**
             * Prompts the user for an amount and token and triggers a funding transaction
             * from the given wallet to the primary wallet.
             */
            promptAmountAndFund: promptAmountAndFundWithWallet,
        });
    }, [
        chooseLinkedWallet,
        connectWalletForFunding,
        (_b = (_a = projectSettings === null || projectSettings === void 0 ? void 0 : projectSettings.sdk.funding) === null || _a === void 0 ? void 0 : _a.externalWallets) === null || _b === void 0 ? void 0 : _b.enabled,
        filteredWallets,
        fundWithWallet,
        promptAmountAndFundWithWallet,
    ]);
};
const useFundWithWallet = () => {
    const { setShowDynamicUserProfile } = useInternalDynamicContext();
    const _a = useInternalFundWithWallet(), { connectWalletForFunding, chooseLinkedWallet: _chooseLinkedWallet } = _a, otherMethods = __rest(_a, ["connectWalletForFunding", "chooseLinkedWallet"]);
    // When called from headless mode, let's close the modal afterwards
    // Also ensure back button is not shown and prop is not passed
    const chooseLinkedWallet = useCallback(() => __awaiter(void 0, void 0, void 0, function* () {
        const wallet = yield _chooseLinkedWallet({ showBackButton: false });
        setShowDynamicUserProfile(false);
        return wallet;
    }), [_chooseLinkedWallet, setShowDynamicUserProfile]);
    return Object.assign(Object.assign({}, otherMethods), { 
        /**
         * Shows a modal to pick a linked wallet and returns the picked wallet.
         */
        chooseLinkedWallet, 
        /**
         * Connects an external wallet and returns the wallet.
         */
        connectWalletForFunding: () => connectWalletForFunding({ initiatedByWidget: false }) });
};

export { useFundWithWallet, useInternalFundWithWallet };
