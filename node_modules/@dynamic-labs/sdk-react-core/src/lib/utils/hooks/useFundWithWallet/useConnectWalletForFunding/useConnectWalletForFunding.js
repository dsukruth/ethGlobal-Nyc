'use client'
import { __awaiter } from '../../../../../../_virtual/_tslib.js';
import { useRef, useCallback } from 'react';
import { DynamicError, pipe, DeferredPromise } from '@dynamic-labs/utils';
import '../../../../../index.js';
import '../../../../context/DynamicContext/DynamicContext.js';
import '../../../../store/state/loadingAndLifecycle/loadingAndLifecycle.js';
import '@dynamic-labs/sdk-api-core';
import '../../../../shared/logger.js';
import '@dynamic-labs/iconic';
import '@dynamic-labs/wallet-connector-core';
import 'react/jsx-runtime';
import { useViewContext } from '../../../../context/ViewContext/ViewContext.js';
import '@dynamic-labs/wallet-book';
import '../../../constants/colors.js';
import '../../../constants/values.js';
import '../../../../shared/consts/index.js';
import { useInternalDynamicEvents } from '../../events/useDynamicEvents/useDynamicEvents.js';
import '../../../../context/CaptchaContext/CaptchaContext.js';
import '../../../../context/ErrorContext/ErrorContext.js';
import '@dynamic-labs/multi-wallet';
import 'react-international-phone';
import '../../../../store/state/nonce/nonce.js';
import '@dynamic-labs-sdk/client/core';
import '../../../../client/client.js';
import '@dynamic-labs-sdk/client';
import { publicDynamicEvents } from '../../../../events/dynamicEvents.js';
import '../../../../store/state/projectSettings/projectSettings.js';
import '../../../../config/ApiEndpoint.js';
import '../../../../locale/locale.js';
import '../../../../store/state/dynamicContextProps/dynamicContextProps.js';
import '../../../../store/state/primaryWalletId/primaryWalletId.js';
import '../../../../store/state/connectedWalletsInfo/connectedWalletsInfo.js';
import '../../../../context/AccessDeniedContext/AccessDeniedContext.js';
import '../../../../context/AccountExistsContext/AccountExistsContext.js';
import '../../../../context/UserWalletsContext/UserWalletsContext.js';
import '../../../../store/state/authMode/authMode.js';
import '../../../../context/VerificationContext/VerificationContext.js';
import 'react-dom';
import '../../../functions/compareChains/compareChains.js';
import '../../../../views/Passkey/utils/findPrimaryEmbeddedChain/findPrimaryEmbeddedChain.js';
import '../../../../context/ThemeContext/ThemeContext.js';
import '../../useUserUpdateRequest/useUpdateUser/userFieldsSchema.js';
import 'bs58';
import '@dynamic-labs/types';
import '../../../../context/SocialRedirectContext/SocialRedirectContext.js';
import '../../../../context/LoadingContext/LoadingContext.js';
import '../../../../context/WalletContext/WalletContext.js';
import '../../useEmbeddedWallet/useSecureEnclaveEmbeddedWallet/constants.js';
import 'yup';
import '../../../../context/MockContext/MockContext.js';
import '../../../../views/CollectUserDataView/useFields.js';
import '../../../../context/FieldsStateContext/FieldsStateContext.js';
import '../../../../context/UserFieldEditorContext/UserFieldEditorContext.js';
import '@dynamic-labs/rpc-providers';
import '../../../../store/state/walletOptions/walletOptions.js';
import 'react-i18next';
import '../../../../components/Accordion/components/AccordionItem/AccordionItem.js';
import '../../../../components/Alert/Alert.js';
import '../../../../components/ShadowDOM/ShadowDOM.js';
import '../../../../components/IconButton/IconButton.js';
import '../../../../components/InlineWidget/InlineWidget.js';
import '../../../../components/Input/Input.js';
import '../../../../components/IsBrowser/IsBrowser.js';
import '../../../../components/MenuList/Dropdown/Dropdown.js';
import '../../../../components/OverlayCard/OverlayCard.js';
import '../../../../components/Transition/ZoomTransition/ZoomTransition.js';
import '../../../../components/Transition/SlideInUpTransition/SlideInUpTransition.js';
import '../../../../components/Transition/OpacityTransition/OpacityTransition.js';
import '../../../../components/PasskeyCreatedSuccessBanner/PasskeyCreatedSuccessBanner.js';
import '../../../../components/Popper/Popper/Popper.js';
import '../../../../components/Popper/PopperContext/PopperContext.js';
import 'react-focus-lock';
import 'qrcode';
import 'formik';
import '../../useSubdomainCheck/useSubdomainCheck.js';
import { FilterChain } from '../../../functions/walletFilters/index.js';
import '../../../../context/WalletGroupContext/WalletGroupContext.js';
import '../../../../context/IpConfigurationContext/IpConfigurationContext.js';
import '../../../../context/ConnectWithOtpContext/ConnectWithOtpContext.js';
import '../../../../widgets/DynamicBridgeWidget/views/WalletsView/components/SecondaryWallets/SecondaryWallets.js';
import '@hcaptcha/react-hcaptcha';
import '../../../../widgets/DynamicWidget/context/DynamicWidgetContext.js';
import '../../../../widgets/DynamicWidget/helpers/convertExchangeKeyAndProviderEnum.js';
import '../../../../views/ExchangeWhitelistWarning/ExchangeWhitelistWarning.js';
import '../../../../context/ErrorContext/hooks/useErrorText/useErrorText.js';
import '../../../../context/FooterAnimationContext/index.js';
import '../../../../views/MfaChooseDeviceView/getMfaOptions/getMfaOptions.js';
import '../../../../context/PasskeyContext/PasskeyContext.js';
import '../../../../context/OnrampContext/OnrampContext.js';
import '../../../../store/state/sendBalances.js';
import '../../../../store/state/connectorsInitializing/connectorsInitializing.js';
import '../../../../components/OverlayCardBase/OverlayCardTarget/OverlayCardTarget.js';
import '../../../../widgets/DynamicWidget/components/DynamicWidgetHeader/DynamicWidgetHeader.js';
import '../../../../views/TransactionConfirmationView/TransactionConfirmationView.js';
import '../../../../widgets/DynamicWidget/components/PasskeyCard/PasskeyCard.js';
import { resolvePromiseRef } from '../../../functions/resolvePromiseRef/resolvePromiseRef.js';
import { rejectPromiseRef } from '../../../functions/rejectPromiseRef/rejectPromiseRef.js';
import { useFundingHelpers } from '../../useFundingHelpers/useFundingHelpers.js';
import { FilterWalletsForExternalFunding } from '../utils/FilterWalletsForExternalFunding.js';
import '../../../../widgets/DynamicWidget/views/ReceiveWalletFunds/ReceiveWalletFunds.js';
import '../../../../store/state/tokenBalances.js';
import '../../../../store/state/multichainBalances.js';
import '../../../../shared/utils/functions/getInitialUrl/getInitialUrl.js';
import { useInternalDynamicContext } from '../../../../context/DynamicContext/useDynamicContext/useInternalDynamicContext/useInternalDynamicContext.js';

const useConnectWalletForFunding = () => {
    const { primaryWallet, setShowAuthFlow } = useInternalDynamicContext();
    const { clearStackAndPush } = useViewContext();
    const { initiatedByWidgetRef, getWalletAddress, resetWalletConnectSession } = useFundingHelpers();
    const connectWalletPromiseRef = useRef(null);
    useInternalDynamicEvents('authFlowClose', () => {
        rejectPromiseRef(connectWalletPromiseRef, new DynamicError('User cancelled'));
    });
    const openWalletList = useCallback((initiatedByWidget) => {
        const onSelectWallet = (_a) => __awaiter(void 0, [_a], void 0, function* ({ walletConnector, }) {
            if (!connectWalletPromiseRef.current)
                return;
            let isDuplicate = false;
            try {
                initiatedByWidgetRef.current = initiatedByWidget;
                const walletAddress = yield getWalletAddress(walletConnector);
                if (!walletAddress) {
                    rejectPromiseRef(connectWalletPromiseRef, new DynamicError('No wallet address found'));
                    return;
                }
                if (walletAddress === (primaryWallet === null || primaryWallet === void 0 ? void 0 : primaryWallet.address)) {
                    isDuplicate = true;
                    clearStackAndPush('duplicate-wallet', {
                        initiatedByWidget,
                        onReturn: openWalletList,
                    });
                    return;
                }
                const wallet = walletConnector.createWallet({
                    address: walletAddress,
                    chain: walletConnector.connectedChain,
                    connector: walletConnector,
                    id: 'external-funding-wallet',
                    isAuthenticated: false,
                    key: walletConnector.key,
                });
                resolvePromiseRef(connectWalletPromiseRef, wallet);
                publicDynamicEvents.emit('walletConnectedForFunding', {
                    initiatedByWidget,
                    isPhantomRedirect: false,
                    wallet,
                });
            }
            catch (error) {
                rejectPromiseRef(connectWalletPromiseRef, error);
            }
            finally {
                if (!isDuplicate)
                    setShowAuthFlow(false);
            }
        });
        clearStackAndPush('external-funding-wallet-list', {
            onSelectWallet,
            showDefaultFooter: true,
            viewWalletsFilter: pipe(FilterWalletsForExternalFunding).pipe(FilterChain(primaryWallet === null || primaryWallet === void 0 ? void 0 : primaryWallet.chain)),
        });
    }, [
        clearStackAndPush,
        getWalletAddress,
        initiatedByWidgetRef,
        primaryWallet === null || primaryWallet === void 0 ? void 0 : primaryWallet.address,
        primaryWallet === null || primaryWallet === void 0 ? void 0 : primaryWallet.chain,
        setShowAuthFlow,
    ]);
    return useCallback((_a) => __awaiter(void 0, [_a], void 0, function* ({ initiatedByWidget, }) {
        if (connectWalletPromiseRef.current) {
            return connectWalletPromiseRef.current.promise;
        }
        resetWalletConnectSession();
        connectWalletPromiseRef.current = new DeferredPromise();
        openWalletList(initiatedByWidget);
        setShowAuthFlow(true, {
            emitCancelAuth: false,
            ignoreIfIsEmbeddedWidget: true,
            initializeWalletConnect: true,
            performMultiWalletChecks: false,
        });
        return connectWalletPromiseRef.current.promise;
    }), [openWalletList, resetWalletConnectSession, setShowAuthFlow]);
};

export { useConnectWalletForFunding };
