'use client'
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _tslib = require('../../../../../_virtual/_tslib.cjs');
var React = require('react');
require('../../../context/DynamicContext/DynamicContext.cjs');
require('../../../store/state/loadingAndLifecycle/loadingAndLifecycle.cjs');
require('@dynamic-labs/sdk-api-core');
require('../../../shared/logger.cjs');
require('@dynamic-labs/iconic');
require('@dynamic-labs/wallet-connector-core');
require('react/jsx-runtime');
require('../../../context/ViewContext/ViewContext.cjs');
require('@dynamic-labs/wallet-book');
require('@dynamic-labs/utils');
require('../../constants/colors.cjs');
require('../../constants/values.cjs');
require('../../../shared/consts/index.cjs');
require('../../../events/dynamicEvents.cjs');
require('../../../context/CaptchaContext/CaptchaContext.cjs');
require('../../../context/ErrorContext/ErrorContext.cjs');
require('@dynamic-labs/multi-wallet');
require('react-international-phone');
require('../../../store/state/nonce/nonce.cjs');
require('@dynamic-labs-sdk/client/core');
require('../../../client/client.cjs');
require('@dynamic-labs-sdk/client');
var projectSettings = require('../../../store/state/projectSettings/projectSettings.cjs');
require('../../../config/ApiEndpoint.cjs');
require('../../../locale/locale.cjs');
require('../../../store/state/dynamicContextProps/dynamicContextProps.cjs');
require('../../../store/state/primaryWalletId/primaryWalletId.cjs');
require('../../../store/state/connectedWalletsInfo/connectedWalletsInfo.cjs');
require('../../../context/AccessDeniedContext/AccessDeniedContext.cjs');
require('../../../context/AccountExistsContext/AccountExistsContext.cjs');
require('../../../context/UserWalletsContext/UserWalletsContext.cjs');
require('../../../store/state/authMode/authMode.cjs');
require('../../../context/VerificationContext/VerificationContext.cjs');
require('react-dom');
require('../../functions/compareChains/compareChains.cjs');
require('../../../views/Passkey/utils/findPrimaryEmbeddedChain/findPrimaryEmbeddedChain.cjs');
require('../../../context/ThemeContext/ThemeContext.cjs');
require('../useUserUpdateRequest/useUpdateUser/userFieldsSchema.cjs');
require('bs58');
require('@dynamic-labs/types');
require('../../../context/SocialRedirectContext/SocialRedirectContext.cjs');
require('../../../context/LoadingContext/LoadingContext.cjs');
require('../../../context/WalletContext/WalletContext.cjs');
require('../useEmbeddedWallet/useSecureEnclaveEmbeddedWallet/constants.cjs');
require('yup');
require('../../../context/MockContext/MockContext.cjs');
require('../../../views/CollectUserDataView/useFields.cjs');
require('../../../context/FieldsStateContext/FieldsStateContext.cjs');
require('../../../context/UserFieldEditorContext/UserFieldEditorContext.cjs');
require('@dynamic-labs/rpc-providers');
require('../../../store/state/walletOptions/walletOptions.cjs');
require('react-i18next');
require('../../../components/Accordion/components/AccordionItem/AccordionItem.cjs');
require('../../../components/Alert/Alert.cjs');
require('../../../components/ShadowDOM/ShadowDOM.cjs');
require('../../../components/IconButton/IconButton.cjs');
require('../../../components/InlineWidget/InlineWidget.cjs');
require('../../../components/Input/Input.cjs');
require('../../../components/IsBrowser/IsBrowser.cjs');
require('../../../components/MenuList/Dropdown/Dropdown.cjs');
require('../../../components/OverlayCard/OverlayCard.cjs');
require('../../../components/Transition/ZoomTransition/ZoomTransition.cjs');
require('../../../components/Transition/SlideInUpTransition/SlideInUpTransition.cjs');
require('../../../components/Transition/OpacityTransition/OpacityTransition.cjs');
require('../../../components/PasskeyCreatedSuccessBanner/PasskeyCreatedSuccessBanner.cjs');
require('../../../components/Popper/Popper/Popper.cjs');
require('../../../components/Popper/PopperContext/PopperContext.cjs');
require('react-focus-lock');
require('qrcode');
require('formik');
require('../useSubdomainCheck/useSubdomainCheck.cjs');
require('../../../context/WalletGroupContext/WalletGroupContext.cjs');
require('../../../context/IpConfigurationContext/IpConfigurationContext.cjs');
require('../../../context/ConnectWithOtpContext/ConnectWithOtpContext.cjs');
require('../../../widgets/DynamicBridgeWidget/views/WalletsView/components/SecondaryWallets/SecondaryWallets.cjs');
require('@hcaptcha/react-hcaptcha');
require('../../../widgets/DynamicWidget/context/DynamicWidgetContext.cjs');
require('../../../widgets/DynamicWidget/helpers/convertExchangeKeyAndProviderEnum.cjs');
require('../../../views/ExchangeWhitelistWarning/ExchangeWhitelistWarning.cjs');
require('../../../context/ErrorContext/hooks/useErrorText/useErrorText.cjs');
require('../../../context/FooterAnimationContext/index.cjs');
require('../../../views/MfaChooseDeviceView/getMfaOptions/getMfaOptions.cjs');
require('../../../context/PasskeyContext/PasskeyContext.cjs');
require('../../../context/OnrampContext/OnrampContext.cjs');
require('../../../store/state/sendBalances.cjs');
require('../../../store/state/connectorsInitializing/connectorsInitializing.cjs');
require('../../../components/OverlayCardBase/OverlayCardTarget/OverlayCardTarget.cjs');
require('../../../widgets/DynamicWidget/components/DynamicWidgetHeader/DynamicWidgetHeader.cjs');
require('../../../views/TransactionConfirmationView/TransactionConfirmationView.cjs');
require('../../../widgets/DynamicWidget/components/PasskeyCard/PasskeyCard.cjs');
var useChooseLinkedWallet = require('./useChooseLinkedWallet/useChooseLinkedWallet.cjs');
var useConnectWalletForFunding = require('./useConnectWalletForFunding/useConnectWalletForFunding.cjs');
var useFund = require('./useFund/useFund.cjs');
var usePromptAmountAndFundWithWallet = require('./usePromptAmountAndFundWithWallet/usePromptAmountAndFundWithWallet.cjs');
require('../../../widgets/DynamicWidget/views/ReceiveWalletFunds/ReceiveWalletFunds.cjs');
require('../../../../index.cjs');
require('../../../store/state/tokenBalances.cjs');
require('../../../store/state/multichainBalances.cjs');
require('../../../shared/utils/functions/getInitialUrl/getInitialUrl.cjs');
var useInternalDynamicContext = require('../../../context/DynamicContext/useDynamicContext/useInternalDynamicContext/useInternalDynamicContext.cjs');

const useInternalFundWithWallet = () => {
    var _a, _b;
    const projectSettings$1 = projectSettings.useProjectSettings();
    const fundWithWallet = useFund.useFund();
    const connectWalletForFunding = useConnectWalletForFunding.useConnectWalletForFunding();
    const promptAmountAndFundWithWallet = usePromptAmountAndFundWithWallet.usePromptAmountAndFundWithWallet();
    const { chooseLinkedWallet, filteredWallets } = useChooseLinkedWallet.useChooseLinkedWallet();
    return React.useMemo(() => {
        var _a, _b;
        return ({
            /**
             * Shows a modal to pick a linked wallet and returns the picked wallet.
             */
            chooseLinkedWallet,
            /**
             * Connects an external wallet and returns the wallet.
             */
            connectWalletForFunding,
            /**
             * Whether external wallet funding is enabled.
             */
            externalWalletFundingEnabled: Boolean((_b = (_a = projectSettings$1 === null || projectSettings$1 === void 0 ? void 0 : projectSettings$1.sdk.funding) === null || _a === void 0 ? void 0 : _a.externalWallets) === null || _b === void 0 ? void 0 : _b.enabled),
            /**
             * The linked wallets available for funding the primary wallet.
             */
            filteredLinkedWallets: filteredWallets,
            /**
             * Triggers a funding transaction from the given wallet to the primary wallet.
             */
            fund: fundWithWallet,
            /**
             * Prompts the user for an amount and token and triggers a funding transaction
             * from the given wallet to the primary wallet.
             */
            promptAmountAndFund: promptAmountAndFundWithWallet,
        });
    }, [
        chooseLinkedWallet,
        connectWalletForFunding,
        (_b = (_a = projectSettings$1 === null || projectSettings$1 === void 0 ? void 0 : projectSettings$1.sdk.funding) === null || _a === void 0 ? void 0 : _a.externalWallets) === null || _b === void 0 ? void 0 : _b.enabled,
        filteredWallets,
        fundWithWallet,
        promptAmountAndFundWithWallet,
    ]);
};
const useFundWithWallet = () => {
    const { setShowDynamicUserProfile } = useInternalDynamicContext.useInternalDynamicContext();
    const _a = useInternalFundWithWallet(), { connectWalletForFunding, chooseLinkedWallet: _chooseLinkedWallet } = _a, otherMethods = _tslib.__rest(_a, ["connectWalletForFunding", "chooseLinkedWallet"]);
    // When called from headless mode, let's close the modal afterwards
    // Also ensure back button is not shown and prop is not passed
    const chooseLinkedWallet = React.useCallback(() => _tslib.__awaiter(void 0, void 0, void 0, function* () {
        const wallet = yield _chooseLinkedWallet({ showBackButton: false });
        setShowDynamicUserProfile(false);
        return wallet;
    }), [_chooseLinkedWallet, setShowDynamicUserProfile]);
    return Object.assign(Object.assign({}, otherMethods), { 
        /**
         * Shows a modal to pick a linked wallet and returns the picked wallet.
         */
        chooseLinkedWallet, 
        /**
         * Connects an external wallet and returns the wallet.
         */
        connectWalletForFunding: () => connectWalletForFunding({ initiatedByWidget: false }) });
};

exports.useFundWithWallet = useFundWithWallet;
exports.useInternalFundWithWallet = useInternalFundWithWallet;
