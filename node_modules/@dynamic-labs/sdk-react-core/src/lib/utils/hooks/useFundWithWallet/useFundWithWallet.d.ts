export declare const useInternalFundWithWallet: () => {
    /**
     * Shows a modal to pick a linked wallet and returns the picked wallet.
     */
    chooseLinkedWallet: ({ showBackButton }?: {
        showBackButton?: boolean | undefined;
    }) => Promise<import("dist/packages/wallet-connector-core/src").Wallet<import("dist/packages/wallet-connector-core/src").WalletConnectorCore.WalletConnector> | undefined>;
    /**
     * Connects an external wallet and returns the wallet.
     */
    connectWalletForFunding: ({ initiatedByWidget, }: {
        initiatedByWidget: boolean;
    }) => Promise<import("dist/packages/wallet-connector-core/src").Wallet<import("dist/packages/wallet-connector-core/src").WalletConnectorCore.WalletConnector>>;
    /**
     * Whether external wallet funding is enabled.
     */
    externalWalletFundingEnabled: boolean;
    /**
     * The linked wallets available for funding the primary wallet.
     */
    filteredLinkedWallets: import("dist/packages/wallet-connector-core/src").Wallet<import("dist/packages/wallet-connector-core/src").WalletConnectorCore.WalletConnector>[];
    /**
     * Triggers a funding transaction from the given wallet to the primary wallet.
     */
    fund: ({ amount, fromWallet, token, toWallet }: import("./useFund").FundWithWalletParams) => Promise<string | undefined>;
    /**
     * Prompts the user for an amount and token and triggers a funding transaction
     * from the given wallet to the primary wallet.
     */
    promptAmountAndFund: (props: import("../../../widgets/DynamicWidget/views/ReceiveWalletFunds/types").ReceiveWalletFundsProps) => void;
};
export declare const useFundWithWallet: () => {
    /**
     * Shows a modal to pick a linked wallet and returns the picked wallet.
     */
    chooseLinkedWallet: () => Promise<import("dist/packages/wallet-connector-core/src").Wallet<import("dist/packages/wallet-connector-core/src").WalletConnectorCore.WalletConnector> | undefined>;
    /**
     * Connects an external wallet and returns the wallet.
     */
    connectWalletForFunding: () => Promise<import("dist/packages/wallet-connector-core/src").Wallet<import("dist/packages/wallet-connector-core/src").WalletConnectorCore.WalletConnector>>;
    /**
     * Whether external wallet funding is enabled.
     */
    externalWalletFundingEnabled: boolean;
    /**
     * The linked wallets available for funding the primary wallet.
     */
    filteredLinkedWallets: import("dist/packages/wallet-connector-core/src").Wallet<import("dist/packages/wallet-connector-core/src").WalletConnectorCore.WalletConnector>[];
    /**
     * Triggers a funding transaction from the given wallet to the primary wallet.
     */
    fund: ({ amount, fromWallet, token, toWallet }: import("./useFund").FundWithWalletParams) => Promise<string | undefined>;
    /**
     * Prompts the user for an amount and token and triggers a funding transaction
     * from the given wallet to the primary wallet.
     */
    promptAmountAndFund: (props: import("../../../widgets/DynamicWidget/views/ReceiveWalletFunds/types").ReceiveWalletFundsProps) => void;
};
