'use client'
import { __awaiter } from '../../../../../_virtual/_tslib.js';
import { useCallback } from 'react';
import { consumeMfaToken } from '@dynamic-labs-sdk/client';
import { DynamicError } from '@dynamic-labs/utils';
import '@dynamic-labs/sdk-api-core';
import { logger } from '../../../shared/logger.js';
import '@dynamic-labs/iconic';
import '@dynamic-labs/wallet-connector-core';
import 'react/jsx-runtime';
import '../../../context/ViewContext/ViewContext.js';
import '@dynamic-labs/wallet-book';
import '../../constants/colors.js';
import '../../constants/values.js';
import '../../../shared/consts/index.js';
import { getProjectSettings } from '../../../store/state/projectSettings/projectSettings.js';

/**
 * Get MFA token
 *
 * @returns Function to get MFA token
 *
 * @example
 * ```tsx
 * const App = () => {
 *   const getMfaToken = useGetMfaToken();
 *
 *   return (
 *     <button
 *       onClick={() => getMfaToken({ mfaAction: MFAAction.UpdateUser })}
 *     >
 *       Get MFA token
 *     </button>
 *  );
 * }
 */
const useGetMfaToken = () => useCallback((...args_1) => __awaiter(void 0, [...args_1], void 0, function* ({ mfaAction } = {}) {
    var _a, _b, _c;
    const projectSettings = getProjectSettings();
    const isMfaRequiredForAction = (_c = (_b = (_a = projectSettings === null || projectSettings === void 0 ? void 0 : projectSettings.security) === null || _a === void 0 ? void 0 : _a.mfa) === null || _b === void 0 ? void 0 : _b.actions) === null || _c === void 0 ? void 0 : _c.some((action) => action.action === mfaAction && action.required);
    if (mfaAction && !isMfaRequiredForAction) {
        // if mfa token is not required, return undefined
        return;
    }
    try {
        const mfaToken = consumeMfaToken();
        return mfaToken;
    }
    catch (error) {
        if (!mfaAction) {
            logger.warn('No MFA token found', error);
            return;
        }
        const errorMessage = `MFA Token required for this action: ${mfaAction}`;
        logger.error(errorMessage, error);
        throw new DynamicError(errorMessage);
    }
}), []);

export { useGetMfaToken };
