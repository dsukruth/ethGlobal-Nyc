'use client'
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _tslib = require('../../../../../_virtual/_tslib.cjs');
var React = require('react');
var client = require('@dynamic-labs-sdk/client');
var utils = require('@dynamic-labs/utils');
require('@dynamic-labs/sdk-api-core');
var logger = require('../../../shared/logger.cjs');
require('@dynamic-labs/iconic');
require('@dynamic-labs/wallet-connector-core');
require('react/jsx-runtime');
require('../../../context/ViewContext/ViewContext.cjs');
require('@dynamic-labs/wallet-book');
require('../../constants/colors.cjs');
require('../../constants/values.cjs');
require('../../../shared/consts/index.cjs');
var projectSettings = require('../../../store/state/projectSettings/projectSettings.cjs');

/**
 * Get MFA token
 *
 * @returns Function to get MFA token
 *
 * @example
 * ```tsx
 * const App = () => {
 *   const getMfaToken = useGetMfaToken();
 *
 *   return (
 *     <button
 *       onClick={() => getMfaToken({ mfaAction: MFAAction.UpdateUser })}
 *     >
 *       Get MFA token
 *     </button>
 *  );
 * }
 */
const useGetMfaToken = () => React.useCallback((...args_1) => _tslib.__awaiter(void 0, [...args_1], void 0, function* ({ mfaAction } = {}) {
    var _a, _b, _c;
    const projectSettings$1 = projectSettings.getProjectSettings();
    const isMfaRequiredForAction = (_c = (_b = (_a = projectSettings$1 === null || projectSettings$1 === void 0 ? void 0 : projectSettings$1.security) === null || _a === void 0 ? void 0 : _a.mfa) === null || _b === void 0 ? void 0 : _b.actions) === null || _c === void 0 ? void 0 : _c.some((action) => action.action === mfaAction && action.required);
    if (mfaAction && !isMfaRequiredForAction) {
        // if mfa token is not required, return undefined
        return;
    }
    try {
        const mfaToken = client.consumeMfaToken();
        return mfaToken;
    }
    catch (error) {
        if (!mfaAction) {
            logger.logger.warn('No MFA token found', error);
            return;
        }
        const errorMessage = `MFA Token required for this action: ${mfaAction}`;
        logger.logger.error(errorMessage, error);
        throw new utils.DynamicError(errorMessage);
    }
}), []);

exports.useGetMfaToken = useGetMfaToken;
