'use client'
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _tslib = require('../../../../../_virtual/_tslib.cjs');
var React = require('react');
require('@dynamic-labs/utils');
require('@dynamic-labs/sdk-api-core');
require('@dynamic-labs-sdk/client/core');
require('../../../client/client.cjs');
require('@dynamic-labs-sdk/client');
require('../../constants/values.cjs');
require('@dynamic-labs/multi-wallet');
require('../../../shared/logger.cjs');
require('../../constants/colors.cjs');
require('react-international-phone');
require('@dynamic-labs/iconic');
require('@dynamic-labs/wallet-connector-core');
require('react/jsx-runtime');
require('../../../context/ViewContext/ViewContext.cjs');
require('@dynamic-labs/wallet-book');
require('../../../shared/consts/index.cjs');
require('../../../store/state/nonce/nonce.cjs');
var dynamicContextProps = require('../../../store/state/dynamicContextProps/dynamicContextProps.cjs');
var primaryWalletId = require('../../../store/state/primaryWalletId/primaryWalletId.cjs');
require('../../../store/state/connectedWalletsInfo/connectedWalletsInfo.cjs');
require('../../../events/dynamicEvents.cjs');
require('../../../store/state/projectSettings/projectSettings.cjs');
require('../../../config/ApiEndpoint.cjs');
require('../../../locale/locale.cjs');
var user = require('../../../data/api/user/user.cjs');

/**
 * Refresh user state
 * @returns A callback function that can be used to refresh the user state
 */
const useRefreshUser = () => React.useCallback(() => _tslib.__awaiter(void 0, void 0, void 0, function* () {
    var _a;
    const user$1 = yield user.refreshUserJwt({ environmentId: dynamicContextProps.getEnvironmentId() });
    if (!(user$1 === null || user$1 === void 0 ? void 0 : user$1.verifiedCredentials))
        throw new Error('useRefreshUser resulted in an invalid user: no verified credentials found');
    // Check if the primary wallet is still in this user's VCs
    const primaryWalletInUserVCs = user$1.verifiedCredentials.some(({ id }) => id === primaryWalletId.getPrimaryWalletId());
    if (primaryWalletInUserVCs)
        return user$1;
    // We need to switch primary wallet to the first wallet in the user's VCs
    const newPrimaryWalletId = (_a = user$1.verifiedCredentials.find(({ format }) => format === 'blockchain')) === null || _a === void 0 ? void 0 : _a.id;
    primaryWalletId.setPrimaryWalletId(newPrimaryWalletId);
    return user$1;
}), []);

exports.useRefreshUser = useRefreshUser;
