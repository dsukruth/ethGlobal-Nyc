'use client'
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _tslib = require('../../../../../_virtual/_tslib.cjs');
var React = require('react');
var client = require('../../../client/client.cjs');
require('@dynamic-labs-sdk/client/core');
require('@dynamic-labs/sdk-api-core');
require('@dynamic-labs-sdk/client');
require('@dynamic-labs/utils');
require('../../constants/values.cjs');
require('@dynamic-labs/multi-wallet');
var logger = require('../../../shared/logger.cjs');
require('../../constants/colors.cjs');
require('react-international-phone');
require('@dynamic-labs/iconic');
require('@dynamic-labs/wallet-connector-core');
require('react/jsx-runtime');
var ViewContext = require('../../../context/ViewContext/ViewContext.cjs');
require('@dynamic-labs/wallet-book');
require('../../../shared/consts/index.cjs');
require('../../../store/state/nonce/nonce.cjs');
require('../../../config/ApiEndpoint.cjs');
var projectSettings = require('../../../store/state/projectSettings/projectSettings.cjs');
require('../../../locale/locale.cjs');
require('../../../store/state/dynamicContextProps/dynamicContextProps.cjs');
require('../../../store/state/primaryWalletId/primaryWalletId.cjs');
require('../../../store/state/connectedWalletsInfo/connectedWalletsInfo.cjs');
require('../../../events/dynamicEvents.cjs');
var useOnboardingCompleteUser = require('../../../client/extension/user/useOnboardingCompleteUser/useOnboardingCompleteUser.cjs');
require('../../../context/DynamicContext/DynamicContext.cjs');
require('../../../store/state/loadingAndLifecycle/loadingAndLifecycle.cjs');
var useDynamicEvents = require('../events/useDynamicEvents/useDynamicEvents.cjs');
require('../../../context/CaptchaContext/CaptchaContext.cjs');
require('../../../context/ErrorContext/ErrorContext.cjs');
require('../../../context/AccessDeniedContext/AccessDeniedContext.cjs');
require('../../../context/AccountExistsContext/AccountExistsContext.cjs');
require('../../../context/UserWalletsContext/UserWalletsContext.cjs');
require('../../../store/state/authMode/authMode.cjs');
require('../../../context/VerificationContext/VerificationContext.cjs');
require('react-dom');
require('../../functions/compareChains/compareChains.cjs');
require('../../../views/Passkey/utils/findPrimaryEmbeddedChain/findPrimaryEmbeddedChain.cjs');
require('../../../context/ThemeContext/ThemeContext.cjs');
require('../useUserUpdateRequest/useUpdateUser/userFieldsSchema.cjs');
require('bs58');
require('@dynamic-labs/types');
require('../../../context/SocialRedirectContext/SocialRedirectContext.cjs');
var LoadingContext = require('../../../context/LoadingContext/LoadingContext.cjs');
require('../../../context/WalletContext/WalletContext.cjs');
require('../useEmbeddedWallet/useSecureEnclaveEmbeddedWallet/constants.cjs');
require('yup');
require('../../../context/MockContext/MockContext.cjs');
require('../../../views/CollectUserDataView/useFields.cjs');
require('../../../context/FieldsStateContext/FieldsStateContext.cjs');
require('../../../context/UserFieldEditorContext/UserFieldEditorContext.cjs');
require('@dynamic-labs/rpc-providers');
var walletOptions = require('../../../store/state/walletOptions/walletOptions.cjs');
require('react-i18next');
require('../../../components/Accordion/components/AccordionItem/AccordionItem.cjs');
require('../../../components/Alert/Alert.cjs');
require('../../../components/ShadowDOM/ShadowDOM.cjs');
require('../../../components/IconButton/IconButton.cjs');
require('../../../components/InlineWidget/InlineWidget.cjs');
require('../../../components/Input/Input.cjs');
require('../../../components/IsBrowser/IsBrowser.cjs');
require('../../../components/MenuList/Dropdown/Dropdown.cjs');
require('../../../components/OverlayCard/OverlayCard.cjs');
require('../../../components/Transition/ZoomTransition/ZoomTransition.cjs');
require('../../../components/Transition/SlideInUpTransition/SlideInUpTransition.cjs');
require('../../../components/Transition/OpacityTransition/OpacityTransition.cjs');
require('../../../components/PasskeyCreatedSuccessBanner/PasskeyCreatedSuccessBanner.cjs');
require('../../../components/Popper/Popper/Popper.cjs');
require('../../../components/Popper/PopperContext/PopperContext.cjs');
require('react-focus-lock');
require('qrcode');
require('formik');
require('../useSubdomainCheck/useSubdomainCheck.cjs');
require('../../../context/WalletGroupContext/WalletGroupContext.cjs');
require('../../../context/IpConfigurationContext/IpConfigurationContext.cjs');
require('../../../context/ConnectWithOtpContext/ConnectWithOtpContext.cjs');
require('../../../widgets/DynamicBridgeWidget/views/WalletsView/components/SecondaryWallets/SecondaryWallets.cjs');
require('@hcaptcha/react-hcaptcha');
require('../../../widgets/DynamicWidget/context/DynamicWidgetContext.cjs');
require('../../../widgets/DynamicWidget/helpers/convertExchangeKeyAndProviderEnum.cjs');
require('../../../views/ExchangeWhitelistWarning/ExchangeWhitelistWarning.cjs');
require('../../../context/ErrorContext/hooks/useErrorText/useErrorText.cjs');
require('../../../context/FooterAnimationContext/index.cjs');
require('../../../views/MfaChooseDeviceView/getMfaOptions/getMfaOptions.cjs');
require('../../../context/PasskeyContext/PasskeyContext.cjs');
require('../../../context/OnrampContext/OnrampContext.cjs');
require('../../../store/state/sendBalances.cjs');
require('../../../store/state/connectorsInitializing/connectorsInitializing.cjs');
require('../../../components/OverlayCardBase/OverlayCardTarget/OverlayCardTarget.cjs');
require('../../../widgets/DynamicWidget/components/DynamicWidgetHeader/DynamicWidgetHeader.cjs');
require('../../../views/TransactionConfirmationView/TransactionConfirmationView.cjs');
require('../../../widgets/DynamicWidget/components/PasskeyCard/PasskeyCard.cjs');
require('../../../../index.cjs');
require('../../../widgets/DynamicWidget/views/ReceiveWalletFunds/ReceiveWalletFunds.cjs');
var useDynamicWaas = require('../useDynamicWaas/useDynamicWaas.cjs');
require('../../../store/state/tokenBalances.cjs');
require('../../../store/state/multichainBalances.cjs');
require('../../../shared/utils/functions/getInitialUrl/getInitialUrl.cjs');
var useInternalDynamicContext = require('../../../context/DynamicContext/useDynamicContext/useInternalDynamicContext/useInternalDynamicContext.cjs');

const useSyncDynamicWaas = () => {
    const { primaryWallet, setShowAuthFlow } = useInternalDynamicContext.useInternalDynamicContext();
    const { loading: globalLoading } = LoadingContext.useLoadingContext();
    const { clearStackAndPush } = ViewContext.useViewContext();
    const user = useOnboardingCompleteUser.useOnboardingCompleteUserProfile();
    const projectSettings$1 = projectSettings.useProjectSettings();
    const walletConnectorOptions = walletOptions.useWalletConnectorOptions();
    const { createWalletAccount, needsAutoCreateWalletChains } = useDynamicWaas.useDynamicWaas();
    const triggeredCreate = React.useRef(false);
    useDynamicEvents.useInternalDynamicEvents('logout', () => {
        triggeredCreate.current = false;
    });
    // this is used to trigger createWalletAccount
    // ** It must be an useEffect because some of the dependencies are async
    React.useEffect(() => {
        // Explanation: if the user just logged out, the user from the hook might still be set
        // but the client will be null.
        // And if the user is not onboarding complete yet, the hook won't be set even though the client.user is set.
        // This is why we check for the user AND the client.user.
        const hasUser = Boolean(user && client.getDynamicClient().user);
        const syncDynamicWaas = () => _tslib.__awaiter(void 0, void 0, void 0, function* () {
            try {
                triggeredCreate.current = true;
                if (needsAutoCreateWalletChains &&
                    needsAutoCreateWalletChains.length > 0) {
                    yield createWalletAccount(needsAutoCreateWalletChains);
                }
            }
            catch (error) {
                logger.logger.error('Error creating dynamic waas wallet', error);
                setShowAuthFlow(true);
                clearStackAndPush('backup-unsuccessful');
            }
        });
        const shouldSyncCreateWallet = needsAutoCreateWalletChains &&
            needsAutoCreateWalletChains.length > 0 &&
            !triggeredCreate.current;
        if (!shouldSyncCreateWallet ||
            !hasUser ||
            !projectSettings$1 ||
            !walletConnectorOptions.length || // no connectors to use for the embedded wallet
            globalLoading // this will be true if auth is in progress
        ) {
            return;
        }
        syncDynamicWaas();
    }, [
        user,
        projectSettings$1,
        walletConnectorOptions,
        globalLoading,
        setShowAuthFlow,
        createWalletAccount,
        primaryWallet,
        needsAutoCreateWalletChains,
        clearStackAndPush,
    ]);
};

exports.useSyncDynamicWaas = useSyncDynamicWaas;
