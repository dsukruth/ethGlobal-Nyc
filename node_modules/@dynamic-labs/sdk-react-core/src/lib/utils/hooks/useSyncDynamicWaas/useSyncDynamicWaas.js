'use client'
import { __awaiter } from '../../../../../_virtual/_tslib.js';
import { useRef, useEffect } from 'react';
import { getDynamicClient } from '../../../client/client.js';
import '@dynamic-labs-sdk/client/core';
import '@dynamic-labs/sdk-api-core';
import '@dynamic-labs-sdk/client';
import '@dynamic-labs/utils';
import '../../constants/values.js';
import '@dynamic-labs/multi-wallet';
import { logger } from '../../../shared/logger.js';
import '../../constants/colors.js';
import 'react-international-phone';
import '@dynamic-labs/iconic';
import '@dynamic-labs/wallet-connector-core';
import 'react/jsx-runtime';
import { useViewContext } from '../../../context/ViewContext/ViewContext.js';
import '@dynamic-labs/wallet-book';
import '../../../shared/consts/index.js';
import '../../../store/state/nonce/nonce.js';
import '../../../config/ApiEndpoint.js';
import { useProjectSettings } from '../../../store/state/projectSettings/projectSettings.js';
import '../../../locale/locale.js';
import '../../../store/state/dynamicContextProps/dynamicContextProps.js';
import '../../../store/state/primaryWalletId/primaryWalletId.js';
import '../../../store/state/connectedWalletsInfo/connectedWalletsInfo.js';
import '../../../events/dynamicEvents.js';
import { useOnboardingCompleteUserProfile } from '../../../client/extension/user/useOnboardingCompleteUser/useOnboardingCompleteUser.js';
import '../../../context/DynamicContext/DynamicContext.js';
import '../../../store/state/loadingAndLifecycle/loadingAndLifecycle.js';
import { useInternalDynamicEvents } from '../events/useDynamicEvents/useDynamicEvents.js';
import '../../../context/CaptchaContext/CaptchaContext.js';
import '../../../context/ErrorContext/ErrorContext.js';
import '../../../context/AccessDeniedContext/AccessDeniedContext.js';
import '../../../context/AccountExistsContext/AccountExistsContext.js';
import '../../../context/UserWalletsContext/UserWalletsContext.js';
import '../../../store/state/authMode/authMode.js';
import '../../../context/VerificationContext/VerificationContext.js';
import 'react-dom';
import '../../functions/compareChains/compareChains.js';
import '../../../views/Passkey/utils/findPrimaryEmbeddedChain/findPrimaryEmbeddedChain.js';
import '../../../context/ThemeContext/ThemeContext.js';
import '../useUserUpdateRequest/useUpdateUser/userFieldsSchema.js';
import 'bs58';
import '@dynamic-labs/types';
import '../../../context/SocialRedirectContext/SocialRedirectContext.js';
import { useLoadingContext } from '../../../context/LoadingContext/LoadingContext.js';
import '../../../context/WalletContext/WalletContext.js';
import '../useEmbeddedWallet/useSecureEnclaveEmbeddedWallet/constants.js';
import 'yup';
import '../../../context/MockContext/MockContext.js';
import '../../../views/CollectUserDataView/useFields.js';
import '../../../context/FieldsStateContext/FieldsStateContext.js';
import '../../../context/UserFieldEditorContext/UserFieldEditorContext.js';
import '@dynamic-labs/rpc-providers';
import { useWalletConnectorOptions } from '../../../store/state/walletOptions/walletOptions.js';
import 'react-i18next';
import '../../../components/Accordion/components/AccordionItem/AccordionItem.js';
import '../../../components/Alert/Alert.js';
import '../../../components/ShadowDOM/ShadowDOM.js';
import '../../../components/IconButton/IconButton.js';
import '../../../components/InlineWidget/InlineWidget.js';
import '../../../components/Input/Input.js';
import '../../../components/IsBrowser/IsBrowser.js';
import '../../../components/MenuList/Dropdown/Dropdown.js';
import '../../../components/OverlayCard/OverlayCard.js';
import '../../../components/Transition/ZoomTransition/ZoomTransition.js';
import '../../../components/Transition/SlideInUpTransition/SlideInUpTransition.js';
import '../../../components/Transition/OpacityTransition/OpacityTransition.js';
import '../../../components/PasskeyCreatedSuccessBanner/PasskeyCreatedSuccessBanner.js';
import '../../../components/Popper/Popper/Popper.js';
import '../../../components/Popper/PopperContext/PopperContext.js';
import 'react-focus-lock';
import 'qrcode';
import 'formik';
import '../useSubdomainCheck/useSubdomainCheck.js';
import '../../../context/WalletGroupContext/WalletGroupContext.js';
import '../../../context/IpConfigurationContext/IpConfigurationContext.js';
import '../../../context/ConnectWithOtpContext/ConnectWithOtpContext.js';
import '../../../widgets/DynamicBridgeWidget/views/WalletsView/components/SecondaryWallets/SecondaryWallets.js';
import '@hcaptcha/react-hcaptcha';
import '../../../widgets/DynamicWidget/context/DynamicWidgetContext.js';
import '../../../widgets/DynamicWidget/helpers/convertExchangeKeyAndProviderEnum.js';
import '../../../views/ExchangeWhitelistWarning/ExchangeWhitelistWarning.js';
import '../../../context/ErrorContext/hooks/useErrorText/useErrorText.js';
import '../../../context/FooterAnimationContext/index.js';
import '../../../views/MfaChooseDeviceView/getMfaOptions/getMfaOptions.js';
import '../../../context/PasskeyContext/PasskeyContext.js';
import '../../../context/OnrampContext/OnrampContext.js';
import '../../../store/state/sendBalances.js';
import '../../../store/state/connectorsInitializing/connectorsInitializing.js';
import '../../../components/OverlayCardBase/OverlayCardTarget/OverlayCardTarget.js';
import '../../../widgets/DynamicWidget/components/DynamicWidgetHeader/DynamicWidgetHeader.js';
import '../../../views/TransactionConfirmationView/TransactionConfirmationView.js';
import '../../../widgets/DynamicWidget/components/PasskeyCard/PasskeyCard.js';
import '../../../../index.js';
import '../../../widgets/DynamicWidget/views/ReceiveWalletFunds/ReceiveWalletFunds.js';
import { useDynamicWaas } from '../useDynamicWaas/useDynamicWaas.js';
import '../../../store/state/tokenBalances.js';
import '../../../store/state/multichainBalances.js';
import '../../../shared/utils/functions/getInitialUrl/getInitialUrl.js';
import { useInternalDynamicContext } from '../../../context/DynamicContext/useDynamicContext/useInternalDynamicContext/useInternalDynamicContext.js';

const useSyncDynamicWaas = () => {
    const { primaryWallet, setShowAuthFlow } = useInternalDynamicContext();
    const { loading: globalLoading } = useLoadingContext();
    const { clearStackAndPush } = useViewContext();
    const user = useOnboardingCompleteUserProfile();
    const projectSettings = useProjectSettings();
    const walletConnectorOptions = useWalletConnectorOptions();
    const { createWalletAccount, needsAutoCreateWalletChains } = useDynamicWaas();
    const triggeredCreate = useRef(false);
    useInternalDynamicEvents('logout', () => {
        triggeredCreate.current = false;
    });
    // this is used to trigger createWalletAccount
    // ** It must be an useEffect because some of the dependencies are async
    useEffect(() => {
        // Explanation: if the user just logged out, the user from the hook might still be set
        // but the client will be null.
        // And if the user is not onboarding complete yet, the hook won't be set even though the client.user is set.
        // This is why we check for the user AND the client.user.
        const hasUser = Boolean(user && getDynamicClient().user);
        const syncDynamicWaas = () => __awaiter(void 0, void 0, void 0, function* () {
            try {
                triggeredCreate.current = true;
                if (needsAutoCreateWalletChains &&
                    needsAutoCreateWalletChains.length > 0) {
                    yield createWalletAccount(needsAutoCreateWalletChains);
                }
            }
            catch (error) {
                logger.error('Error creating dynamic waas wallet', error);
                setShowAuthFlow(true);
                clearStackAndPush('backup-unsuccessful');
            }
        });
        const shouldSyncCreateWallet = needsAutoCreateWalletChains &&
            needsAutoCreateWalletChains.length > 0 &&
            !triggeredCreate.current;
        if (!shouldSyncCreateWallet ||
            !hasUser ||
            !projectSettings ||
            !walletConnectorOptions.length || // no connectors to use for the embedded wallet
            globalLoading // this will be true if auth is in progress
        ) {
            return;
        }
        syncDynamicWaas();
    }, [
        user,
        projectSettings,
        walletConnectorOptions,
        globalLoading,
        setShowAuthFlow,
        createWalletAccount,
        primaryWallet,
        needsAutoCreateWalletChains,
        clearStackAndPush,
    ]);
};

export { useSyncDynamicWaas };
