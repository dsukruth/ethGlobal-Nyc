'use client'
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _tslib = require('../../../../../_virtual/_tslib.cjs');
var React = require('react');
require('@dynamic-labs-sdk/client/core');
require('@dynamic-labs/sdk-api-core');
require('../../../client/client.cjs');
require('@dynamic-labs-sdk/client');
require('@dynamic-labs/utils');
require('../../constants/values.cjs');
require('@dynamic-labs/multi-wallet');
require('../../../shared/logger.cjs');
require('../../constants/colors.cjs');
require('react-international-phone');
require('@dynamic-labs/iconic');
require('@dynamic-labs/wallet-connector-core');
require('react/jsx-runtime');
var ViewContext = require('../../../context/ViewContext/ViewContext.cjs');
require('@dynamic-labs/wallet-book');
require('../../../shared/consts/index.cjs');
require('../../../store/state/nonce/nonce.cjs');
require('../../../config/ApiEndpoint.cjs');
require('../../../store/state/projectSettings/projectSettings.cjs');
require('../../../locale/locale.cjs');
require('../../../store/state/dynamicContextProps/dynamicContextProps.cjs');
require('../../../store/state/primaryWalletId/primaryWalletId.cjs');
require('../../../store/state/connectedWalletsInfo/connectedWalletsInfo.cjs');
require('../../../events/dynamicEvents.cjs');
var getUserProfile = require('../../../client/extension/user/getUserProfile/getUserProfile.cjs');
require('../../../context/DynamicContext/DynamicContext.cjs');
require('../../../store/state/loadingAndLifecycle/loadingAndLifecycle.cjs');
require('../../../context/CaptchaContext/CaptchaContext.cjs');
require('../../../context/ErrorContext/ErrorContext.cjs');
require('../../../context/AccessDeniedContext/AccessDeniedContext.cjs');
require('../../../context/AccountExistsContext/AccountExistsContext.cjs');
require('../../../context/UserWalletsContext/UserWalletsContext.cjs');
require('../../../store/state/authMode/authMode.cjs');
require('../../../context/VerificationContext/VerificationContext.cjs');
require('react-dom');
require('../../functions/compareChains/compareChains.cjs');
require('../../../views/Passkey/utils/findPrimaryEmbeddedChain/findPrimaryEmbeddedChain.cjs');
require('../../../context/ThemeContext/ThemeContext.cjs');
require('../useUserUpdateRequest/useUpdateUser/userFieldsSchema.cjs');
require('bs58');
require('@dynamic-labs/types');
require('../../../context/SocialRedirectContext/SocialRedirectContext.cjs');
require('../../../context/LoadingContext/LoadingContext.cjs');
require('../../../context/WalletContext/WalletContext.cjs');
require('../useEmbeddedWallet/useSecureEnclaveEmbeddedWallet/constants.cjs');
require('yup');
require('../../../context/MockContext/MockContext.cjs');
require('../../../views/CollectUserDataView/useFields.cjs');
require('../../../context/FieldsStateContext/FieldsStateContext.cjs');
require('../../../context/UserFieldEditorContext/UserFieldEditorContext.cjs');
require('@dynamic-labs/rpc-providers');
require('../../../store/state/walletOptions/walletOptions.cjs');
require('react-i18next');
require('../../../components/Accordion/components/AccordionItem/AccordionItem.cjs');
require('../../../components/Alert/Alert.cjs');
require('../../../components/ShadowDOM/ShadowDOM.cjs');
require('../../../components/IconButton/IconButton.cjs');
require('../../../components/InlineWidget/InlineWidget.cjs');
require('../../../components/Input/Input.cjs');
require('../../../components/IsBrowser/IsBrowser.cjs');
require('../../../components/MenuList/Dropdown/Dropdown.cjs');
require('../../../components/OverlayCard/OverlayCard.cjs');
require('../../../components/Transition/ZoomTransition/ZoomTransition.cjs');
require('../../../components/Transition/SlideInUpTransition/SlideInUpTransition.cjs');
require('../../../components/Transition/OpacityTransition/OpacityTransition.cjs');
require('../../../components/PasskeyCreatedSuccessBanner/PasskeyCreatedSuccessBanner.cjs');
require('../../../components/Popper/Popper/Popper.cjs');
require('../../../components/Popper/PopperContext/PopperContext.cjs');
require('react-focus-lock');
require('qrcode');
require('formik');
require('../useSubdomainCheck/useSubdomainCheck.cjs');
require('../../../context/WalletGroupContext/WalletGroupContext.cjs');
require('../../../context/IpConfigurationContext/IpConfigurationContext.cjs');
require('../../../context/ConnectWithOtpContext/ConnectWithOtpContext.cjs');
require('../../../widgets/DynamicBridgeWidget/views/WalletsView/components/SecondaryWallets/SecondaryWallets.cjs');
require('@hcaptcha/react-hcaptcha');
var DynamicWidgetContext = require('../../../widgets/DynamicWidget/context/DynamicWidgetContext.cjs');
require('../../../widgets/DynamicWidget/helpers/convertExchangeKeyAndProviderEnum.cjs');
require('../../../views/ExchangeWhitelistWarning/ExchangeWhitelistWarning.cjs');
require('../../../context/ErrorContext/hooks/useErrorText/useErrorText.cjs');
require('../../../context/FooterAnimationContext/index.cjs');
require('../../../views/MfaChooseDeviceView/getMfaOptions/getMfaOptions.cjs');
require('../../../context/PasskeyContext/PasskeyContext.cjs');
require('../../../context/OnrampContext/OnrampContext.cjs');
require('../../../store/state/sendBalances.cjs');
require('../../../store/state/connectorsInitializing/connectorsInitializing.cjs');
require('../../../components/OverlayCardBase/OverlayCardTarget/OverlayCardTarget.cjs');
require('../../../widgets/DynamicWidget/components/DynamicWidgetHeader/DynamicWidgetHeader.cjs');
require('../../../views/TransactionConfirmationView/TransactionConfirmationView.cjs');
require('../../../widgets/DynamicWidget/components/PasskeyCard/PasskeyCard.cjs');
require('../../../../index.cjs');
require('../../../widgets/DynamicWidget/views/ReceiveWalletFunds/ReceiveWalletFunds.cjs');
var useIsMfaEnabled = require('../useIsMfaEnabled/useIsMfaEnabled.cjs');
var useIsTotpMfaEnabled = require('../useIsTotpMfaEnabled/useIsTotpMfaEnabled.cjs');
require('../../../store/state/tokenBalances.cjs');
require('../../../store/state/multichainBalances.cjs');
require('../../../shared/utils/functions/getInitialUrl/getInitialUrl.cjs');
var useInternalDynamicContext = require('../../../context/DynamicContext/useDynamicContext/useInternalDynamicContext/useInternalDynamicContext.cjs');

const useMfaModals = () => {
    const { setShowAuthFlow, setShowDynamicUserProfile } = useInternalDynamicContext.useInternalDynamicContext();
    const { setDynamicWidgetView } = DynamicWidgetContext.useWidgetContext();
    const { clearStackAndPush } = ViewContext.useViewContext();
    const isMfaEnabled = useIsMfaEnabled.useIsMfaEnabled();
    const isTotpMfaEnabled = useIsTotpMfaEnabled.useIsTotpMfaEnabled();
    const setShowTotpMfaManage = React.useCallback((value) => {
        if (value) {
            if (!isTotpMfaEnabled) {
                return;
            }
            setDynamicWidgetView('manage-totp-mfa-no-footer');
        }
        setShowDynamicUserProfile(value);
    }, [isTotpMfaEnabled, setShowDynamicUserProfile, setDynamicWidgetView]);
    const setShowMfaChooseType = React.useCallback((value) => {
        if (value) {
            if (!isMfaEnabled) {
                return;
            }
            clearStackAndPush('mfa-choose-device');
        }
        setShowAuthFlow(value, { emitCancelAuth: true });
    }, [isMfaEnabled, setShowAuthFlow, clearStackAndPush]);
    const setShowMfaQRCode = React.useCallback((value) => _tslib.__awaiter(void 0, void 0, void 0, function* () {
        if (value) {
            if (!isTotpMfaEnabled) {
                return;
            }
            const user = getUserProfile.getUserProfile();
            // Already have MFA configured
            if (user === null || user === void 0 ? void 0 : user.mfaBackupCodeAcknowledgement) {
                setShowTotpMfaManage(true);
                return;
            }
            clearStackAndPush('mfa-secure-device', { isInitialSetup: true });
        }
        setShowAuthFlow(value, { emitCancelAuth: true });
    }), [
        isTotpMfaEnabled,
        setShowAuthFlow,
        clearStackAndPush,
        setShowTotpMfaManage,
    ]);
    const setShowOTPVerification = React.useCallback((value) => {
        if (value) {
            if (!isTotpMfaEnabled) {
                return;
            }
            // creating the mfa token in case the customer is using
            // otp verification to delete the device
            // this is mainly for backwards compatibility with the
            // suggested flow before passkeys were introduced
            clearStackAndPush('mfa-verification', {
                createMfaToken: true,
            });
        }
        setShowAuthFlow(value, { emitCancelAuth: true });
    }, [isTotpMfaEnabled, setShowAuthFlow, clearStackAndPush]);
    const setShowMfaViewBackupCodes = React.useCallback((value) => {
        if (value) {
            if (!isMfaEnabled) {
                return;
            }
            clearStackAndPush('mfa-display-backup-codes');
        }
        setShowAuthFlow(value, { emitCancelAuth: true });
    }, [isMfaEnabled, setShowAuthFlow, clearStackAndPush]);
    const setShowMfaEnterBackupCodes = React.useCallback((value) => {
        if (value) {
            if (!isMfaEnabled) {
                return;
            }
            clearStackAndPush('mfa-recovery');
        }
        setShowAuthFlow(value, { emitCancelAuth: true });
    }, [isMfaEnabled, setShowAuthFlow, clearStackAndPush]);
    return {
        /**
         * @deprecated use setShowTotpMfaManage instead
         */
        setShowMFAManage: setShowTotpMfaManage,
        setShowMfaChooseType,
        setShowMfaEnterBackupCodes,
        setShowMfaQRCode,
        setShowMfaViewBackupCodes,
        setShowOTPVerification,
        setShowTotpMfaManage,
    };
};

exports.useMfaModals = useMfaModals;
