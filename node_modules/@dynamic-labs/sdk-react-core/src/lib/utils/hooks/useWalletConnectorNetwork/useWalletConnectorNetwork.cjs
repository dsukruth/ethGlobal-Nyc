'use client'
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _tslib = require('../../../../../_virtual/_tslib.cjs');
var React = require('react');
var usePromise = require('../usePromise/usePromise.cjs');
require('../../../events/dynamicEvents.cjs');
var useWalletConnectorEvent = require('../events/useWalletConnectorEvent/useWalletConnectorEvent.cjs');
var connectorsInitializing = require('../../../store/state/connectorsInitializing/connectorsInitializing.cjs');

/**
 * Sync wallet connector network.
 *
 * @param walletConnector - The WalletConnector instance to be used.
 *
 * @returns {{ network: string | number | undefined }} An object containing the current network state.
 *
 * @example
 * // Example of using the useWalletConnectorNetwork hook
 * const { network } = useWalletConnectorNetwork(walletConnector);
 *
 * // You can then use the 'network' state in your component
 * return <div>Current Network: {network}</div>;
 */
const useWalletConnectorNetwork = (walletConnector, { onChange } = { onChange: () => { } }) => {
    const [network, setNetwork] = React.useState();
    const connectorsInitializing$1 = connectorsInitializing.useConnectorsInitializing();
    const isConnectorInitialized = React.useMemo(() => {
        if (!walletConnector) {
            return false;
        }
        // this is a special case for WalletConnect because we have
        // multiple WC connectors with different keys
        if (walletConnector.isWalletConnect) {
            return Boolean(connectorsInitializing$1['walletconnect']);
        }
        return Boolean(connectorsInitializing$1[walletConnector.key]);
    }, [connectorsInitializing$1, walletConnector]);
    const { isLoading } = usePromise.usePromise(() => walletConnector === null || walletConnector === void 0 ? void 0 : walletConnector.getNetwork(true), {
        deps: [walletConnector, isConnectorInitialized],
        onResolve: (network) => {
            setNetwork(network);
        },
    });
    useWalletConnectorEvent.useWalletConnectorEvent(walletConnector || undefined, 'chainChange', ({ chain }) => {
        const parsedChain = (walletConnector === null || walletConnector === void 0 ? void 0 : walletConnector.connectedChain) === 'STARK' ? chain : parseInt(chain);
        setNetwork(parsedChain);
        onChange === null || onChange === void 0 ? void 0 : onChange(parsedChain);
    });
    /**
     * Listen to disconnect event and update the network because ArgentX
     * emits a disconnect event when the user switches network.
     */
    useWalletConnectorEvent.useWalletConnectorEvent(walletConnector || undefined, 'disconnect', () => _tslib.__awaiter(void 0, void 0, void 0, function* () {
        if ((walletConnector === null || walletConnector === void 0 ? void 0 : walletConnector.key) !== 'argentx')
            return;
        const chain = yield walletConnector.getNetwork(true);
        setNetwork(chain);
        onChange === null || onChange === void 0 ? void 0 : onChange(chain);
    }));
    return { isLoading, network };
};

exports.useWalletConnectorNetwork = useWalletConnectorNetwork;
