'use client'
import { __awaiter } from '../../../../../_virtual/_tslib.js';
import { ExternalAuthError, SandboxMaximumThresholdReachedError, DynamicError } from '@dynamic-labs/utils';
import '@dynamic-labs-sdk/client/core';
import '@dynamic-labs/sdk-api-core';
import '../../../client/client.js';
import 'react';
import '@dynamic-labs-sdk/client';
import '../../../utils/constants/values.js';
import '@dynamic-labs/multi-wallet';
import '../../../shared/logger.js';
import '../../../utils/constants/colors.js';
import 'react-international-phone';
import '@dynamic-labs/iconic';
import '@dynamic-labs/wallet-connector-core';
import 'react/jsx-runtime';
import '../../../context/ViewContext/ViewContext.js';
import '@dynamic-labs/wallet-book';
import '../../../shared/consts/index.js';
import '../../../store/state/nonce/nonce.js';
import { sdkApi } from '../api.js';
import { logResponseError } from '../utils.js';
import '../../../locale/locale.js';
import '../../../store/state/dynamicContextProps/dynamicContextProps.js';
import '../../../store/state/primaryWalletId/primaryWalletId.js';
import '../../../store/state/connectedWalletsInfo/connectedWalletsInfo.js';
import '../../../events/dynamicEvents.js';
import '../../../store/state/projectSettings/projectSettings.js';
import { storeTokenAndUser } from '../../../client/extension/storeTokenAndUser/storeTokenAndUser.js';

const externalAuthSignin = (_a) => __awaiter(void 0, [_a], void 0, function* ({ environmentId, externalJwt, sessionPublicKey, }) {
    try {
        const response = yield sdkApi().externalAuthSignin({
            environmentId,
            externalAuthSigninRequest: {
                jwt: externalJwt,
                sessionPublicKey,
            },
        });
        return storeTokenAndUser(response);
    }
    catch (e) {
        const data = yield logResponseError(e, 'Error signing in with external JWT');
        if (data.code === 'invalid_external_auth') {
            throw new ExternalAuthError(data.code);
        }
        if (data.error.code === 'sandbox_maximum_threshold_reached') {
            throw new SandboxMaximumThresholdReachedError(data.error.message);
        }
        throw new DynamicError(data.error);
    }
});
/**
 * @deprecated Use `externalAuthSignin` instead.
 * This currently does not work.
 */
const externalAuthVerify = (_b) => __awaiter(void 0, [_b], void 0, function* ({ environmentId, externalJwt, }) {
    try {
        /* istanbul ignore next */
        const response = (yield sdkApi().externalAuthVerify({
            environmentId,
            externalAuthSigninRequest: {
                jwt: externalJwt,
            },
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
        }));
        return storeTokenAndUser(response);
    }
    catch (e) {
        const data = yield logResponseError(e, 'Error verifying external JWT');
        if (data.code === 'invalid_external_auth') {
            throw new ExternalAuthError(data.code);
        }
        if (data.error.code === 'sandbox_maximum_threshold_reached') {
            throw new SandboxMaximumThresholdReachedError(data.error.message);
        }
        throw new DynamicError(data.error);
    }
});

export { externalAuthSignin, externalAuthVerify };
