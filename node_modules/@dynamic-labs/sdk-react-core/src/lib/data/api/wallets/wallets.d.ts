import { VerifyResponse } from '@dynamic-labs/sdk-api-core';
import { UserProfile } from '../../../..';
import { VerifyWallet } from '../../../shared/types';
export declare const storeSelectedWallet: ({ environmentId, walletId, }: {
    environmentId: string;
    walletId: string;
}) => Promise<UserProfile | undefined>;
export declare const linkWallet: (environmentId: string, { messageToSign, network, signedMessage, publicWalletAddress, chain, walletName, walletProvider, additionalWalletAddresses, backup, }: VerifyWallet) => Promise<VerifyResponse | undefined>;
export declare const unlinkWallet: ({ environmentId, primaryWalletId, walletId, onSuccess, }: {
    environmentId: string;
    primaryWalletId: string | undefined;
    walletId: string;
    onSuccess?: () => void;
}) => Promise<UserProfile | undefined>;
export declare const transferWallet: (environmentId: string, { network, messageToSign, signedMessage, publicWalletAddress, chain, walletName, walletProvider, skipEmptyAccountCheck, }: VerifyWallet) => Promise<UserProfile | undefined>;
export declare const verifyWallet: (environmentId: string, { messageToSign, signedMessage, publicWalletAddress, chain, walletName, walletProvider, captchaToken, network, oauth, additionalWalletAddresses, sessionPublicKey, }: VerifyWallet) => Promise<VerifyResponse | undefined>;
export declare const upgradeEmbeddedWalletToV2: ({ environmentId, sessionPublicKey, }: {
    environmentId: string;
    sessionPublicKey?: string;
}) => Promise<VerifyResponse>;
export declare const softDeleteEmbeddedWallet: ({ environmentId, walletId, }: {
    environmentId: string;
    walletId: string;
}) => Promise<void>;
export declare const restoreEmbeddedWallet: ({ environmentId, walletId, }: {
    environmentId: string;
    walletId: string;
}) => Promise<void>;
