import { MFAAction, SignMessageContext } from '@dynamic-labs/sdk-api-core';
import { WalletConnectorBase } from '..';
interface GetMfaTokenFunction {
    (props?: {
        mfaAction?: MFAAction;
    }): Promise<string | undefined>;
}
export interface IDynamicWaasConnector extends WalletConnectorBase {
    createWalletAccount(options?: {
        thresholdSignatureScheme: string;
    }): Promise<{
        accountAddress: string;
        publicKeyHex: string;
        rawPublicKey: string | Uint8Array | undefined;
    }>;
    importPrivateKey({ privateKey, chainName, thresholdSignatureScheme, }: {
        privateKey: string;
        chainName: string;
        thresholdSignatureScheme?: string;
    }): Promise<void>;
    exportPrivateKey({ accountAddress, displayContainer, }: {
        accountAddress: string;
        displayContainer?: HTMLIFrameElement;
    }): Promise<void>;
    setEnvironmentId(environmentId: string): void;
    setBaseApiUrl(baseApiUrl: string): void;
    setGetAuthTokenFunction(getAuthToken: () => string): void;
    setGetSignedSessionIdFunction(getSignedSessionId: () => Promise<string>): void;
    setGetMfaTokenFunction(getMfaToken: GetMfaTokenFunction): void;
    setRelayUrl(relayUrl: string): void;
    getWalletClientByAddress({ accountAddress }: {
        accountAddress: string;
    }): any;
    backupKeySharesToGoogleDrive({ accountAddress, password, }: {
        accountAddress: string;
        password?: string;
    }): Promise<void>;
    delegateKeyShares({ accountAddress, password, }: {
        accountAddress: string;
        password?: string;
    }): Promise<void>;
    refreshWalletAccountShares({ accountAddress, password, }: {
        accountAddress: string;
        password?: string;
    }): Promise<void>;
    updatePassword({ accountAddress, existingPassword, newPassword, }: {
        accountAddress: string;
        existingPassword: string;
        newPassword: string;
    }): Promise<void>;
    signRawMessage({ accountAddress, message, password, }: {
        accountAddress: string;
        message: string;
        password?: string;
    }): Promise<string>;
    exportClientKeyshares({ accountAddress, password, }: {
        accountAddress: string;
        password?: string;
    }): Promise<void>;
    signMessageWithContext({ message, context, }: {
        message: string | {
            raw: string;
        };
        context: SignMessageContext;
    }): Promise<string>;
}
export {};
