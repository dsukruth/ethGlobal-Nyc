'use client'
import { __awaiter } from '../_virtual/_tslib.js';
import { DynamicWalletClient } from '@dynamic-labs-wallet/browser-wallet-client';
import { DynamicError } from '@dynamic-labs/utils';
import { MFAAction } from '@dynamic-labs/sdk-api-core';
import { version } from '../package.js';
import { DEFAULT_BASE_API_URL, DEFAULT_BASE_MPC_RELAY_API_URL } from '../utils/constants.js';

// This class is common across all waas connectors
class WaasExportHandler {
    constructor() {
        this.iframeStamper = null;
    }
    setIframeStamper(iframe) {
        this.iframeStamper = iframe;
    }
    clear() {
        if (this.iframeStamper) {
            this.iframeStamper.remove();
            this.iframeStamper = null;
        }
    }
}
const withDynamicWaas = (BaseClass) => {
    class DynamicWaasMixin extends BaseClass {
        setGetAuthTokenFunction(getAuthToken) {
            this.getAuthToken = getAuthToken;
        }
        setGetMfaTokenFunction(getMfaToken) {
            this.getMfaToken = getMfaToken;
        }
        setEnvironmentId(environmentId) {
            this.environmentId = environmentId;
        }
        setBaseApiUrl(baseApiUrl) {
            this.baseApiUrl = baseApiUrl;
        }
        setRelayUrl(relayUrl) {
            this.relayUrl = relayUrl;
        }
        setGetSignedSessionIdFunction(getSignedSessionId) {
            this.getSignedSessionId = getSignedSessionId;
        }
        delegateKeyShares(_a) {
            return __awaiter(this, arguments, void 0, function* ({ accountAddress, password, }) {
                var _b, _c;
                if (!accountAddress) {
                    throw new Error('Account address is required');
                }
                const walletClient = yield this.getWaasWalletClient();
                const signedSessionId = yield ((_b = this.getSignedSessionId) === null || _b === void 0 ? void 0 : _b.call(this));
                if (!signedSessionId) {
                    throw new Error('Signed session ID is required');
                }
                const authToken = (_c = this.getAuthToken) === null || _c === void 0 ? void 0 : _c.call(this);
                if (!authToken) {
                    throw new Error('Auth token is required');
                }
                return walletClient.delegateKeyShares({
                    accountAddress,
                    authToken,
                    password,
                    signedSessionId,
                });
            });
        }
        constructor(...args) {
            super(...args);
            this.name = 'Dynamic Waas';
            this.overrideKey = 'dynamicwaas';
            this.isEmbeddedWallet = true;
            // Initialize export handler
            this.__exportHandler = new WaasExportHandler();
            // Get the class name from the constructor
            const { connectedChain } = this;
            // Map class names to chain names
            const chainNameMap = {
                EVM: 'EVM',
                SOL: 'SVM',
                SUI: 'SUI',
            };
            const chainName = chainNameMap[connectedChain];
            if (!chainName) {
                throw new DynamicError(`Unsupported chain: ${connectedChain}`);
            }
            this.chainName = chainName;
        }
        createDynamicWaasClient() {
            return __awaiter(this, void 0, void 0, function* () {
                var _a;
                const authToken = (_a = this.getAuthToken) === null || _a === void 0 ? void 0 : _a.call(this);
                if (!authToken) {
                    throw new DynamicError('Auth token is required');
                }
                if (!this.environmentId) {
                    throw new DynamicError('Environment ID is required');
                }
                const client = new DynamicWalletClient({
                    authToken,
                    baseApiUrl: this.baseApiUrl || DEFAULT_BASE_API_URL,
                    baseMPCRelayApiUrl: this.relayUrl || DEFAULT_BASE_MPC_RELAY_API_URL,
                    chainName: this.chainName,
                    environmentId: this.environmentId,
                    sdkVersion: version,
                });
                yield client.initialize();
                return client;
            });
        }
        getWaasWalletClient() {
            return __awaiter(this, void 0, void 0, function* () {
                if (!this.dynamicWaasClient) {
                    this.dynamicWaasClient = yield this.createDynamicWaasClient();
                }
                return this.dynamicWaasClient;
            });
        }
        // Common methods that are identical across all connectors
        createWalletAccount() {
            return __awaiter(this, arguments, void 0, function* ({ thresholdSignatureScheme = 'TWO_OF_TWO', } = {}) {
                var _a, _b;
                const walletClient = yield this.getWaasWalletClient();
                const signedSessionId = yield ((_a = this.getSignedSessionId) === null || _a === void 0 ? void 0 : _a.call(this));
                if (!signedSessionId) {
                    throw new DynamicError('Signed session ID is required');
                }
                const createdWallet = yield walletClient.createWalletAccount({
                    authToken: (_b = this.getAuthToken) === null || _b === void 0 ? void 0 : _b.call(this),
                    signedSessionId,
                    thresholdSignatureScheme: thresholdSignatureScheme,
                });
                return createdWallet;
            });
        }
        importPrivateKey(_a) {
            return __awaiter(this, arguments, void 0, function* ({ privateKey, thresholdSignatureScheme = 'TWO_OF_TWO', }) {
                var _b, _c;
                const walletClient = yield this.getWaasWalletClient();
                const signedSessionId = yield ((_b = this.getSignedSessionId) === null || _b === void 0 ? void 0 : _b.call(this));
                if (!signedSessionId) {
                    throw new DynamicError('Signed session ID is required');
                }
                yield walletClient.importPrivateKey({
                    authToken: (_c = this.getAuthToken) === null || _c === void 0 ? void 0 : _c.call(this),
                    privateKey,
                    signedSessionId,
                    thresholdSignatureScheme: thresholdSignatureScheme,
                });
            });
        }
        exportPrivateKey() {
            return __awaiter(this, arguments, void 0, function* ({ accountAddress, displayContainer, password, } = {}) {
                var _a, _b, _c;
                const walletClient = yield this.getWaasWalletClient();
                const targetAccountAddress = accountAddress || (yield this.getActiveAccountAddress());
                if (!targetAccountAddress) {
                    throw new DynamicError('Account address is required');
                }
                if (!displayContainer) {
                    throw new DynamicError('Missing display container for export private key');
                }
                const signedSessionId = yield ((_a = this.getSignedSessionId) === null || _a === void 0 ? void 0 : _a.call(this));
                if (!signedSessionId) {
                    throw new DynamicError('Signed session ID is required');
                }
                this.__exportHandler.setIframeStamper(displayContainer);
                const mfaToken = yield ((_b = this.getMfaToken) === null || _b === void 0 ? void 0 : _b.call(this, {
                    mfaAction: MFAAction.WalletWaasExport,
                }));
                yield walletClient.exportPrivateKey({
                    accountAddress: targetAccountAddress,
                    authToken: (_c = this.getAuthToken) === null || _c === void 0 ? void 0 : _c.call(this),
                    displayContainer,
                    mfaToken,
                    password,
                    signedSessionId,
                });
            });
        }
        getExportHandler() {
            return this.__exportHandler;
        }
        exportClientKeyshares(_a) {
            return __awaiter(this, arguments, void 0, function* ({ accountAddress, password, }) {
                var _b, _c;
                if (!accountAddress) {
                    throw new DynamicError('Account address is required');
                }
                const signedSessionId = yield ((_b = this.getSignedSessionId) === null || _b === void 0 ? void 0 : _b.call(this));
                if (!signedSessionId) {
                    throw new DynamicError('Signed session ID is required');
                }
                const walletClient = yield this.getWaasWalletClient();
                yield walletClient.exportClientKeyshares({
                    accountAddress,
                    authToken: (_c = this.getAuthToken) === null || _c === void 0 ? void 0 : _c.call(this),
                    password,
                    signedSessionId,
                });
            });
        }
        backupKeySharesToGoogleDrive(_a) {
            return __awaiter(this, arguments, void 0, function* ({ accountAddress, password, }) {
                var _b, _c;
                if (!accountAddress) {
                    throw new DynamicError('Account address is required');
                }
                const walletClient = yield this.getWaasWalletClient();
                const signedSessionId = yield ((_b = this.getSignedSessionId) === null || _b === void 0 ? void 0 : _b.call(this));
                if (!signedSessionId) {
                    throw new DynamicError('Signed session ID is required');
                }
                return walletClient.backupKeySharesToGoogleDrive({
                    accountAddress,
                    authToken: (_c = this.getAuthToken) === null || _c === void 0 ? void 0 : _c.call(this),
                    password,
                    signedSessionId,
                });
            });
        }
        refreshWalletAccountShares(_a) {
            return __awaiter(this, arguments, void 0, function* ({ accountAddress, password, }) {
                var _b, _c, _d;
                if (!accountAddress) {
                    throw new DynamicError('Account address is required');
                }
                const walletClient = yield this.getWaasWalletClient();
                const signedSessionId = yield ((_b = this.getSignedSessionId) === null || _b === void 0 ? void 0 : _b.call(this));
                if (!signedSessionId) {
                    throw new DynamicError('Signed session ID is required');
                }
                const mfaToken = yield ((_c = this.getMfaToken) === null || _c === void 0 ? void 0 : _c.call(this, {
                    mfaAction: MFAAction.WalletWaasRefresh,
                }));
                return walletClient.refreshWalletAccountShares({
                    accountAddress,
                    authToken: (_d = this.getAuthToken) === null || _d === void 0 ? void 0 : _d.call(this),
                    mfaToken,
                    password,
                    signedSessionId,
                });
            });
        }
        updatePassword(_a) {
            return __awaiter(this, arguments, void 0, function* ({ accountAddress, existingPassword, newPassword, }) {
                var _b, _c;
                if (!accountAddress) {
                    throw new DynamicError('Account address is required');
                }
                const walletClient = yield this.getWaasWalletClient();
                const signedSessionId = yield ((_b = this.getSignedSessionId) === null || _b === void 0 ? void 0 : _b.call(this));
                if (!signedSessionId) {
                    throw new DynamicError('Signed session ID is required');
                }
                return walletClient.updatePassword({
                    accountAddress,
                    authToken: (_c = this.getAuthToken) === null || _c === void 0 ? void 0 : _c.call(this),
                    existingPassword,
                    newPassword,
                    signedSessionId,
                });
            });
        }
        signRawMessage(_a) {
            return __awaiter(this, arguments, void 0, function* ({ accountAddress, message, password, }) {
                var _b, _c, _d;
                if (!accountAddress) {
                    throw new DynamicError('Account address is required');
                }
                if (message.length !== 64) {
                    throw new DynamicError('Message must be 64 characters long');
                }
                const walletClient = yield this.getWaasWalletClient();
                const signedSessionId = yield ((_b = this.getSignedSessionId) === null || _b === void 0 ? void 0 : _b.call(this));
                if (!signedSessionId) {
                    throw new DynamicError('Signed session ID is required');
                }
                const mfaToken = yield ((_c = this.getMfaToken) === null || _c === void 0 ? void 0 : _c.call(this, {
                    mfaAction: MFAAction.WalletWaasSign,
                }));
                return walletClient.signRawMessage({
                    accountAddress,
                    authToken: (_d = this.getAuthToken) === null || _d === void 0 ? void 0 : _d.call(this),
                    message,
                    mfaToken,
                    password,
                    signedSessionId,
                });
            });
        }
        endSession() {
            return __awaiter(this, void 0, void 0, function* () {
                const waasClient = yield this.getWaasWalletClient();
                if (!waasClient) {
                    return;
                }
                yield waasClient.cleanup();
                this.dynamicWaasClient = undefined;
            });
        }
    }
    return DynamicWaasMixin;
};

export { WaasExportHandler, withDynamicWaas };
