import { DynamicWalletClient } from '@dynamic-labs-wallet/browser-wallet-client';
import { MFAAction } from '@dynamic-labs/sdk-api-core';
export declare class WaasExportHandler {
    private iframeStamper;
    setIframeStamper(iframe: HTMLIFrameElement): void;
    clear(): void;
}
export declare const withDynamicWaas: <T extends abstract new (...args: any[]) => any>(BaseClass: T) => (abstract new (...args: any[]) => {
    [x: string]: any;
    name: string;
    overrideKey: string;
    isEmbeddedWallet: boolean;
    getSignedSessionId?: (() => Promise<string>) | undefined;
    getMfaToken?: ((props?: {
        mfaAction?: MFAAction;
    }) => Promise<string | undefined>) | undefined;
    getAuthToken?: (() => string) | undefined;
    environmentId?: string | undefined;
    baseApiUrl?: string | undefined;
    relayUrl?: string | undefined;
    dynamicWaasClient: DynamicWalletClient | undefined;
    chainName: string;
    __exportHandler: WaasExportHandler;
    validateActiveWallet(expectedAddress: string): Promise<void>;
    setGetAuthTokenFunction(getAuthToken: () => string): void;
    setGetMfaTokenFunction(getMfaToken: (props?: {
        mfaAction?: MFAAction;
    }) => Promise<string | undefined>): void;
    setEnvironmentId(environmentId: string): void;
    setBaseApiUrl(baseApiUrl: string): void;
    setRelayUrl(relayUrl: string): void;
    setGetSignedSessionIdFunction(getSignedSessionId: () => Promise<string>): void;
    delegateKeyShares({ accountAddress, password, }: {
        accountAddress: string;
        password?: string;
    }): Promise<void>;
    createDynamicWaasClient(): Promise<DynamicWalletClient>;
    getWaasWalletClient(): Promise<DynamicWalletClient>;
    createWalletAccount({ thresholdSignatureScheme, }?: {
        thresholdSignatureScheme?: string;
    }): Promise<{
        chainName: string;
        accountAddress: string;
        publicKeyHex: string;
        rawPublicKey: string | Uint8Array | undefined;
    }>;
    importPrivateKey({ privateKey, thresholdSignatureScheme, }: {
        privateKey: string;
        thresholdSignatureScheme?: string;
    }): Promise<void>;
    exportPrivateKey({ accountAddress, displayContainer, password, }?: {
        accountAddress?: string;
        displayContainer?: HTMLIFrameElement;
        password?: string;
    }): Promise<void>;
    getExportHandler(): {
        clear: () => void;
    };
    exportClientKeyshares({ accountAddress, password, }: {
        accountAddress: string;
        password?: string;
    }): Promise<void>;
    backupKeySharesToGoogleDrive({ accountAddress, password, }: {
        accountAddress: string;
        password?: string;
    }): Promise<void>;
    refreshWalletAccountShares({ accountAddress, password, }: {
        accountAddress: string;
        password?: string;
    }): Promise<void>;
    updatePassword({ accountAddress, existingPassword, newPassword, }: {
        accountAddress: string;
        existingPassword: string;
        newPassword: string;
    }): Promise<void>;
    signRawMessage({ accountAddress, message, password, }: {
        accountAddress: string;
        message: string;
        password?: string;
    }): Promise<string>;
    endSession(): Promise<void>;
    getActiveAccountAddress(): Promise<string | undefined>;
}) & T;
