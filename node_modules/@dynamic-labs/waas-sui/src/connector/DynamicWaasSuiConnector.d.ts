import { DynamicWalletClient } from '@dynamic-labs-wallet/browser-wallet-client';
import { SuiClient, SuiTransactionBlockResponse } from '@mysten/sui/client';
import { Transaction } from '@mysten/sui/transactions';
import { SignedTransaction } from '@mysten/wallet-standard';
import { MFAAction } from '@dynamic-labs/sdk-api-core';
import { SuiWalletConnector, SuiWalletConnectorProps } from '@dynamic-labs/sui-core';
import { IUITransaction } from '@dynamic-labs/types';
import { IDynamicWaasConnector } from '@dynamic-labs/wallet-connector-core';
import { WaasSuiWallet } from '../wallet/WaasSuiWallet';
declare const DynamicWaasSuiConnector_base: (abstract new (...args: any[]) => {
    [x: string]: any;
    name: string;
    overrideKey: string;
    isEmbeddedWallet: boolean;
    getSignedSessionId?: (() => Promise<string>) | undefined;
    getMfaToken?: ((props?: {
        mfaAction?: MFAAction | undefined;
    } | undefined) => Promise<string | undefined>) | undefined;
    getAuthToken?: (() => string) | undefined;
    environmentId?: string | undefined;
    baseApiUrl?: string | undefined;
    relayUrl?: string | undefined;
    dynamicWaasClient: DynamicWalletClient | undefined;
    chainName: string;
    __exportHandler: import("@dynamic-labs/waas").WaasExportHandler;
    validateActiveWallet(expectedAddress: string): Promise<void>;
    setGetAuthTokenFunction(getAuthToken: () => string): void;
    setGetMfaTokenFunction(getMfaToken: (props?: {
        mfaAction?: MFAAction | undefined;
    } | undefined) => Promise<string | undefined>): void;
    setEnvironmentId(environmentId: string): void;
    setBaseApiUrl(baseApiUrl: string): void;
    setRelayUrl(relayUrl: string): void;
    setGetSignedSessionIdFunction(getSignedSessionId: () => Promise<string>): void;
    delegateKeyShares({ accountAddress, password, }: {
        accountAddress: string;
        password?: string | undefined;
    }): Promise<void>;
    createDynamicWaasClient(): Promise<DynamicWalletClient>;
    getWaasWalletClient(): Promise<DynamicWalletClient>;
    createWalletAccount({ thresholdSignatureScheme, }?: {
        thresholdSignatureScheme?: string | undefined;
    } | undefined): Promise<{
        chainName: string;
        accountAddress: string;
        publicKeyHex: string;
        rawPublicKey: string | Uint8Array | undefined;
    }>;
    importPrivateKey({ privateKey, thresholdSignatureScheme, }: {
        privateKey: string;
        thresholdSignatureScheme?: string | undefined;
    }): Promise<void>;
    exportPrivateKey({ accountAddress, displayContainer, password, }?: {
        accountAddress?: string | undefined;
        displayContainer?: HTMLIFrameElement | undefined;
        password?: string | undefined;
    } | undefined): Promise<void>;
    getExportHandler(): {
        clear: () => void;
    };
    exportClientKeyshares({ accountAddress, password, }: {
        accountAddress: string;
        password?: string | undefined;
    }): Promise<void>;
    backupKeySharesToGoogleDrive({ accountAddress, password, }: {
        accountAddress: string;
        password?: string | undefined;
    }): Promise<void>;
    refreshWalletAccountShares({ accountAddress, password, }: {
        accountAddress: string;
        password?: string | undefined;
    }): Promise<void>;
    updatePassword({ accountAddress, existingPassword, newPassword, }: {
        accountAddress: string;
        existingPassword: string;
        newPassword: string;
    }): Promise<void>;
    signRawMessage({ accountAddress, message, password, }: {
        accountAddress: string;
        message: string;
        password?: string | undefined;
    }): Promise<string>;
    endSession(): Promise<void>;
    getActiveAccountAddress(): Promise<string | undefined>;
}) & typeof SuiWalletConnector;
export declare class DynamicWaasSuiConnector extends DynamicWaasSuiConnector_base implements IDynamicWaasConnector {
    ChainWallet: typeof WaasSuiWallet;
    switchNetworkOnlyFromWallet: boolean;
    constructor(props: SuiWalletConnectorProps);
    connect(): Promise<void>;
    getNetwork(): Promise<string | undefined>;
    getNetworkName(): Promise<'mainnet' | 'testnet' | 'devnet'>;
    switchNetwork({ networkChainId, }: {
        networkChainId: string | number;
    }): Promise<void>;
    supportsNetworkSwitching(): boolean;
    name: string;
    overrideKey: string;
    isEmbeddedWallet: boolean;
    activeAccountAddress: string | undefined;
    private setActiveAccountAddress;
    getActiveAccountAddress(): Promise<string | undefined>;
    validateActiveWallet(expectedAddress: string): Promise<void>;
    importPrivateKey({ privateKey, thresholdSignatureScheme, }: {
        privateKey: string;
        thresholdSignatureScheme?: string;
    }): Promise<void>;
    signMessage(message: string): Promise<string>;
    private createAndSignTransaction;
    signTransaction(transaction: Transaction): Promise<SignedTransaction>;
    signAndExecuteTransaction(transaction: Transaction): Promise<SuiTransactionBlockResponse>;
    getSuiClient(): Promise<SuiClient>;
    getWalletClientByAddress({ accountAddress, }: {
        accountAddress: string;
    }): Promise<DynamicWalletClient>;
    getWalletClient(): Promise<DynamicWalletClient | undefined>;
    exportClientKeyshares({ accountAddress, password, }: {
        accountAddress: string;
        password?: string;
    }): Promise<void>;
    /** Function used to create transactions in the SDK interface */
    createUiTransaction(from: string): Promise<IUITransaction>;
    endSession(): Promise<void>;
    signMessageWithContext(): Promise<string>;
}
export {};
