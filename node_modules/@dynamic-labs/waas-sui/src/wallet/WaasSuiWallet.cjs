'use client'
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _tslib = require('../../_virtual/_tslib.cjs');
var transactions = require('@mysten/sui/transactions');
var suiCore = require('@dynamic-labs/sui-core');
var utils = require('@dynamic-labs/utils');

class WaasSuiWallet extends suiCore.SuiWallet {
    constructor(_a) {
        var { connector } = _a, props = _tslib.__rest(_a, ["connector"]);
        super(Object.assign({ connector }, props));
    }
    /**
     * Sends the native balance of the wallet to the given address.
     * @param amount - The amount of balance
     * @param toAddress - The address to send the balance to.
     * @returns The transaction as base64 encoded bcs.
     */
    sendBalance(_a) {
        return _tslib.__awaiter(this, arguments, void 0, function* ({ amount, toAddress }) {
            const suiWalletConnector = this
                ._connector;
            if (!suiWalletConnector) {
                throw new Error('SUI wallet connector not found');
            }
            yield suiWalletConnector.connect();
            // Build transaction
            const value = amount.toString();
            const transactionRequest = new transactions.Transaction();
            const sender = this.address;
            transactionRequest.setSender(sender);
            // Let the transaction calculate gas automatically
            // https://sdk.mystenlabs.com/typescript/transaction-building/gas#gas-price
            const [coin] = transactionRequest.splitCoins(transactionRequest.gas, [
                Number(value) * suiCore.MIST_PER_SUI,
            ]);
            transactionRequest.transferObjects([coin], toAddress);
            // Execute transaction
            suiWalletConnector.getWalletClientByAddress({
                accountAddress: this.address,
            });
            const { digest } = yield suiWalletConnector.signAndExecuteTransaction(transactionRequest);
            return digest;
        });
    }
    /**
     * Signs a Sui [Transaction].
     * @param transaction - The [Transaction] to sign.
     * @returns The signature of the signed transaction.
     */
    signTransaction(transaction) {
        return _tslib.__awaiter(this, void 0, void 0, function* () {
            const suiWalletConnector = this
                ._connector;
            if (!suiWalletConnector) {
                throw new Error('SUI wallet connector not found');
            }
            yield suiWalletConnector.connect();
            transaction.setSender(this.address);
            suiWalletConnector.getWalletClientByAddress({
                accountAddress: this.address,
            });
            const signedTransaction = yield suiWalletConnector.signTransaction(transaction);
            return signedTransaction;
        });
    }
    getActiveNetwork() {
        return _tslib.__awaiter(this, void 0, void 0, function* () {
            const suiWalletConnector = this
                ._connector;
            if (!suiWalletConnector) {
                throw new Error('SUI wallet connector not found');
            }
            const activeNetworkName = yield suiWalletConnector.getNetworkName();
            if (!activeNetworkName) {
                throw new utils.DynamicError('Unable to retrieve Sui active network');
            }
            return activeNetworkName;
        });
    }
}

exports.WaasSuiWallet = WaasSuiWallet;
