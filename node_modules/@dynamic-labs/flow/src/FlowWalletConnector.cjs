'use client'
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _tslib = require('../_virtual/_tslib.cjs');
var fcl = require('@onflow/fcl');
var walletConnectorCore = require('@dynamic-labs/wallet-connector-core');
var utils = require('@dynamic-labs/utils');
var FlowWallet = require('./wallet/FlowWallet.cjs');

class FlowWalletConnector extends walletConnectorCore.WalletConnectorBase {
    constructor(opts) {
        var _a;
        super(opts);
        this.ChainWallet = FlowWallet.FlowWallet;
        this.connectedChain = 'FLOW';
        this.supportedChains = ['FLOW'];
        this.appName = opts.appName;
        this.appLogoUrl = opts.appLogoUrl;
        this.network = (_a = opts.flowNetwork) !== null && _a !== void 0 ? _a : 'mainnet';
    }
    connect() {
        return _tslib.__awaiter(this, void 0, void 0, function* () {
            yield this.setupConfig();
            const { addr } = yield fcl.currentUser().authenticate();
            if (addr && addr !== this.currentAccount) {
                this.currentAccount = addr;
                this.emit('accountChange', { accounts: [addr] });
            }
        });
    }
    getNetwork() {
        return _tslib.__awaiter(this, void 0, void 0, function* () {
            return this.network;
        });
    }
    setupConfig() {
        return _tslib.__awaiter(this, void 0, void 0, function* () {
            yield fcl.config()
                .put('app.detail.title', this.appName)
                .put('app.detail.icon', this.appLogoUrl)
                .put('accessNode.api', this.network === 'testnet'
                ? 'https://rest-testnet.onflow.org'
                : 'https://rest-mainnet.onflow.org')
                .put('flow.network', this.network);
        });
    }
    getAddress() {
        return _tslib.__awaiter(this, void 0, void 0, function* () {
            try {
                yield this.connect();
                const user = yield fcl.currentUser().snapshot();
                return user.addr;
            }
            catch (error) {
                walletConnectorCore.logger.error(error);
                return undefined;
            }
        });
    }
    proveOwnership(address, messageToSign) {
        return _tslib.__awaiter(this, void 0, void 0, function* () {
            yield this.validateActiveWallet(address);
            try {
                yield this.connect();
                yield this.signDelay();
                const signedMessage = yield this.signMessage(messageToSign);
                if (!signedMessage) {
                    return undefined;
                }
                const data = {
                    appName: this.appName,
                    signedMessage: JSON.parse(signedMessage),
                };
                return JSON.stringify(data);
            }
            catch (error) {
                walletConnectorCore.logger.error(error);
                return undefined;
            }
        });
    }
    signMessage(messageToSign) {
        return _tslib.__awaiter(this, void 0, void 0, function* () {
            const message = Buffer.from(messageToSign).toString('hex');
            const signedMessage = yield fcl.currentUser().signUserMessage(message);
            if (signedMessage.includes('Declined')) {
                throw new utils.DynamicError('User declined the signature');
            }
            return JSON.stringify(signedMessage);
        });
    }
    getBalance(address) {
        return _tslib.__awaiter(this, void 0, void 0, function* () {
            yield this.setupConfig();
            if (address) {
                const code = `
      pub fun main(): UFix64 {
        let account = getAccount(${address});
        return account.balance;
      }
      `;
                try {
                    return yield fcl.send([fcl.script(code)]).then(fcl.decode);
                }
                catch (error) {
                    walletConnectorCore.logger.error(error);
                    return undefined;
                }
            }
            else {
                return undefined;
            }
        });
    }
    endSession() {
        return _tslib.__awaiter(this, void 0, void 0, function* () {
            fcl.currentUser().unauthenticate();
        });
    }
    switchNetwork() {
        return _tslib.__awaiter(this, void 0, void 0, function* () {
            throw new utils.DynamicError('Not supported');
        });
    }
    getConnectedAccounts() {
        return _tslib.__awaiter(this, void 0, void 0, function* () {
            const user = yield fcl.currentUser().snapshot();
            if (user.addr) {
                return [user.addr];
            }
            return [];
        });
    }
    signDelay() {
        return _tslib.__awaiter(this, void 0, void 0, function* () {
            return Promise.resolve();
        });
    }
    getBlockExplorerUrlsForCurrentNetwork() {
        return _tslib.__awaiter(this, void 0, void 0, function* () {
            return ['https://flowscan.io/'];
        });
    }
}

exports.FlowWalletConnector = FlowWalletConnector;
