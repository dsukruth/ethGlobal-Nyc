import { Chain, WalletConnectorBase, WalletMetadata } from '@dynamic-labs/wallet-connector-core';
import { WalletBookSchema } from '@dynamic-labs/wallet-book';
import { FlowWallet } from './wallet';
export declare abstract class FlowWalletConnector extends WalletConnectorBase<typeof FlowWallet> {
    protected appName?: string;
    protected appLogoUrl?: string;
    ChainWallet: typeof FlowWallet;
    connectedChain: Chain;
    supportedChains: Chain[];
    protected network: 'mainnet' | 'testnet';
    /** Used to identify whether to raise accountChange event after connect */
    private currentAccount;
    constructor(opts: {
        appLogoUrl?: string;
        appName?: string;
        flowNetwork?: 'mainnet' | 'testnet';
        walletBook: WalletBookSchema;
        metadata?: WalletMetadata;
    });
    connect(): Promise<void>;
    getNetwork(): Promise<string>;
    setupConfig(): Promise<void>;
    getAddress(): Promise<string | undefined>;
    proveOwnership(address: string, messageToSign: string): Promise<string | undefined>;
    signMessage(messageToSign: string): Promise<string | undefined>;
    getBalance(address: string): Promise<string | undefined>;
    endSession(): Promise<void>;
    switchNetwork(): Promise<void>;
    getConnectedAccounts(): Promise<string[]>;
    signDelay(): Promise<void>;
    getBlockExplorerUrlsForCurrentNetwork(): Promise<string[]>;
}
