'use client'
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var walletConnectorCore = require('@dynamic-labs/wallet-connector-core');
var getEnabledProviders = require('../getEnabledProviders/getEnabledProviders.cjs');
var getApiProviders = require('../getApiProviders/getApiProviders.cjs');
var _const = require('../../const.cjs');

const getWalletConnectorConstructorOptions = ({ appLogoUrl, appName, authMode, coinbaseWalletPreference, chainRpcProviders, deepLinkPreference, flowNetwork, mobileExperience, networkConfigurations, settings, walletConnectProjectId, walletUiUtils, walletBook, walletConnectPreferredChains, useMetamaskSdk = true, }) => {
    const eclipseNetworkConfigs = (networkConfigurations === null || networkConfigurations === void 0 ? void 0 : networkConfigurations.eclipse) || [];
    const evmNetworkConfigs = (networkConfigurations === null || networkConfigurations === void 0 ? void 0 : networkConfigurations.evm) || [];
    const solanaNetworkConfigs = (networkConfigurations === null || networkConfigurations === void 0 ? void 0 : networkConfigurations.solana) || [];
    const cosmosNetworkConfigs = (networkConfigurations === null || networkConfigurations === void 0 ? void 0 : networkConfigurations.cosmos) || [];
    const starknetNetworkConfigs = (networkConfigurations === null || networkConfigurations === void 0 ? void 0 : networkConfigurations.starknet) || [];
    const suiNetworkConfigs = (networkConfigurations === null || networkConfigurations === void 0 ? void 0 : networkConfigurations.sui) || [];
    const apiProviders = getApiProviders.getApiProviders(getEnabledProviders.getEnabledProviders(settings.providers));
    const opts = {
        apiProviders,
        appLogoUrl,
        appName,
        authMode,
        chainRpcProviders,
        coinbaseWalletPreference,
        cosmosNetworks: cosmosNetworkConfigs,
        deepLinkPreference,
        eclipseNetworks: eclipseNetworkConfigs,
        evmNetworks: evmNetworkConfigs,
        flowNetwork,
        mobileExperience,
        projectId: walletConnectProjectId,
        settings,
        solNetworks: solanaNetworkConfigs,
        starknetNetworks: starknetNetworkConfigs,
        suiNetworks: suiNetworkConfigs,
        useMetamaskSdk,
        walletBook,
        walletConnectPreferredChains,
        walletConnectorEventsEmitter: walletConnectorCore.walletConnectorEvents,
        walletUiUtils: walletUiUtils || _const.defaultWalletUiUtils,
    };
    return opts;
};

exports.getWalletConnectorConstructorOptions = getWalletConnectorConstructorOptions;
