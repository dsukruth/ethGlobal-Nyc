'use client'
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var walletConnectorCore = require('@dynamic-labs/wallet-connector-core');
var getWalletConnectorConstructorOptions = require('../getWalletConnectorConstructorOptions/getWalletConnectorConstructorOptions.cjs');
var filterWalletsForPlatform = require('./filterWalletsForPlatform/filterWalletsForPlatform.cjs');
var applyLinksOverrides = require('./applyLinksOverrides/applyLinksOverrides.cjs');

// needs to be a global variable, otherwise it breaks the list of wallets in the dashboard
// https://linear.app/dynamic-labs/issue/QNTM-2642/update-to-getsupportedwallets-broke-the-list-of-wallets-on-the
let walletConnectors = [];
const getSupportedWallets = (args) => {
    var _a;
    const { settings, skipMemo = false, walletConnectorsProp, walletBook } = args;
    if (!skipMemo && walletConnectors.length > 0) {
        return walletConnectors;
    }
    const disabledConnectors = (_a = settings.sdk.disabledWalletConnectors) !== null && _a !== void 0 ? _a : [];
    const opts = getWalletConnectorConstructorOptions.getWalletConnectorConstructorOptions(args);
    const allWalletConnectors = walletConnectorsProp
        .map((getWalletConnectorConstructors) => getWalletConnectorConstructors(opts))
        .flat()
        .map((walletConnectorConstructor) => {
        try {
            // This may contain third party code so we must be ready for anything
            return new walletConnectorConstructor(opts);
        }
        catch (error) {
            walletConnectorCore.logger.error(`Failed to construct wallet ${walletConnectorConstructor.name}`, error);
            return undefined;
        }
    })
        // filter out undefined and disabled connectors
        .filter((walletConnector) => {
        var _a;
        return walletConnector &&
            (!((_a = walletConnector.metadata) === null || _a === void 0 ? void 0 : _a.id) ||
                !disabledConnectors.includes(walletConnector.metadata.id));
    })
        // initialize the wallet connector if it's not a WalletConnect connector
        // or just the generic 'walletconnect' connector, not other WC connectors
        .map((walletConnector) => {
        if (!(walletConnector === null || walletConnector === void 0 ? void 0 : walletConnector.isWalletConnect) ||
            walletConnector.key === 'walletconnect') {
            walletConnector === null || walletConnector === void 0 ? void 0 : walletConnector.init();
        }
        return walletConnector;
    })
        // applies custom filter defined in the wallet connector
        .filter((walletConnector) => walletConnector === null || walletConnector === void 0 ? void 0 : walletConnector.filter())
        .map((walletConnector) => walletConnector.getMobileOrInstalledWallet());
    // Filter out duplicated wallets (WC vs. non-WC)
    const nonDuplicatedWalletConnectors = allWalletConnectors.filter((walletConnector) => {
        if (!walletConnector.isWalletConnect)
            return true;
        // if current wallet is WalletConnect, check if there is another wallet with the same key that is
        // not WalletConnect
        // if there is, return false (filter out WC wallet)
        // if there is no other wallet with the same key that is not WalletConnect, return true (keep WC wallet)
        return !allWalletConnectors.some((wc) => wc.key === walletConnector.key &&
            !wc.isWalletConnect &&
            wc.isInstalledOnBrowser());
    });
    const filteredWalletConnectors = filterWalletsForPlatform.filterWalletsForPlatform(walletBook, nonDuplicatedWalletConnectors);
    walletConnectors = applyLinksOverrides.applyLinksOverrides(walletBook, filteredWalletConnectors);
    return walletConnectors;
};

exports.getSupportedWallets = getSupportedWallets;
