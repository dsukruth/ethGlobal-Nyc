'use client'
import { __awaiter } from '../../_virtual/_tslib.js';
import { PeraWalletConnect } from '@perawallet/connect';
import { DynamicError } from '@dynamic-labs/utils';
import { AlgorandWalletConnector } from '../AlgorandWalletConnector.js';
import { PeraSigner } from './PeraSigner.js';

class PeraWalletConnector extends AlgorandWalletConnector {
    constructor(opts) {
        super(Object.assign(Object.assign({}, opts), { cacheKey: 'pera' }));
        this.canConnectViaCustodialService = true;
        this.name = 'Pera Wallet';
        this.overrideKey = 'perawallet';
    }
    getClient() {
        if (!this.client) {
            this.client = new PeraWalletConnect();
        }
        return this.client;
    }
    getNetwork() {
        return __awaiter(this, void 0, void 0, function* () {
            var _a;
            return (_a = this.getClient().chainId) === null || _a === void 0 ? void 0 : _a.valueOf();
        });
    }
    getAddress() {
        return __awaiter(this, void 0, void 0, function* () {
            const currentAddress = yield this.cache.getCurrentAddress();
            if (currentAddress) {
                return currentAddress;
            }
            const accounts = yield this.getClient().connect();
            if (!accounts.length) {
                return undefined;
            }
            const [address] = accounts;
            yield this.cache.setCurrentAddress(address);
            return address;
        });
    }
    getSigner() {
        return __awaiter(this, void 0, void 0, function* () {
            const address = yield this.getAddress();
            if (!address) {
                throw new DynamicError('Pera Wallet Connector - Not connected!');
            }
            return new PeraSigner(address, this.getClient());
        });
    }
    signMessage(messageToSign) {
        return __awaiter(this, void 0, void 0, function* () {
            const signer = yield this.getSigner();
            const signature = yield signer.signData([
                {
                    data: Buffer.from(messageToSign),
                    message: messageToSign,
                },
            ]);
            return Buffer.from(signature[0]).toString('hex');
        });
    }
}

export { PeraWalletConnector };
