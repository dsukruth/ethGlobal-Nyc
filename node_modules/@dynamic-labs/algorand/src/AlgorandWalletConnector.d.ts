import { Chain, WalletConnectorBase, WalletMetadata } from '@dynamic-labs/wallet-connector-core';
import { WalletBookSchema } from '@dynamic-labs/wallet-book';
import { AlgorandWallet } from './wallet';
interface IAlgorandSessionCache {
    clearCurrentAddress(): Promise<void>;
    getCurrentAddress(): Promise<string | undefined>;
    setCurrentAddress(addr: string): Promise<void>;
}
export type AlgorandWalletConnectorOpts = {
    walletBook: WalletBookSchema;
    metadata?: WalletMetadata;
    cacheKey: string;
};
export declare abstract class AlgorandWalletConnector extends WalletConnectorBase<typeof AlgorandWallet> {
    cache: IAlgorandSessionCache;
    ChainWallet: typeof AlgorandWallet;
    connectedChain: Chain;
    supportedChains: Chain[];
    constructor(opts: AlgorandWalletConnectorOpts);
    getDeepLink(): string | undefined;
    getBalance(address: string): Promise<string | undefined>;
    endSession(): Promise<void>;
    getConnectedAccounts(): Promise<string[]>;
    getBlockExplorerUrlsForCurrentNetwork(): Promise<string[]>;
}
export {};
