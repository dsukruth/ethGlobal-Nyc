'use client'
import { __awaiter } from '../_virtual/_tslib.js';
import { WalletConnectorBase } from '@dynamic-labs/wallet-connector-core';
import { getItemAsync, setItemAsync, removeItemAsync } from '@dynamic-labs/utils';
import { AlgorandWallet } from './wallet/AlgorandWallet.js';

const HTTP_STATUS_TOO_MANY_REQUESTS = 429;
const HTTP_STATUS_NOT_FOUND = 404;
class AlgorandLocalStorageCache {
    constructor(key) {
        this.SESSION_STORAGE_KEY = `algorand_${key}_currentAddress`;
    }
    getCurrentAddress() {
        return __awaiter(this, void 0, void 0, function* () {
            const addr = yield getItemAsync(this.SESSION_STORAGE_KEY);
            if (!addr) {
                return undefined;
            }
            return addr;
        });
    }
    setCurrentAddress(addr) {
        return __awaiter(this, void 0, void 0, function* () {
            return setItemAsync(this.SESSION_STORAGE_KEY, addr);
        });
    }
    clearCurrentAddress() {
        return __awaiter(this, void 0, void 0, function* () {
            return removeItemAsync(this.SESSION_STORAGE_KEY);
        });
    }
}
class AlgorandWalletConnector extends WalletConnectorBase {
    constructor(opts) {
        super(opts);
        this.ChainWallet = AlgorandWallet;
        this.connectedChain = 'ALGO';
        this.supportedChains = ['ALGO'];
        this.cache = new AlgorandLocalStorageCache(opts.cacheKey);
    }
    getDeepLink() {
        return undefined;
    }
    getBalance(address) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield fetch(`https://indexer.algoexplorerapi.io/v2/accounts/${address}`);
            if (!response.ok) {
                // if the request fails due to rate limits, return cached value
                if (response.status === HTTP_STATUS_TOO_MANY_REQUESTS) {
                    return '0';
                }
                // new accounts not yet indexed will return a 404
                if (response.status === HTTP_STATUS_NOT_FOUND) {
                    return '0';
                }
                return undefined;
            }
            const accountInfo = yield response.json();
            if (!accountInfo.account) {
                return undefined;
            }
            const balance = accountInfo.account.amount.toString();
            return balance.toString();
        });
    }
    endSession() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.cache.clearCurrentAddress();
        });
    }
    getConnectedAccounts() {
        return __awaiter(this, void 0, void 0, function* () {
            const currentAddress = yield this.cache.getCurrentAddress();
            return currentAddress ? [currentAddress] : [];
        });
    }
    getBlockExplorerUrlsForCurrentNetwork() {
        return __awaiter(this, void 0, void 0, function* () {
            return ['https://explorer.bitquery.io/algorand'];
        });
    }
}

export { AlgorandWalletConnector };
