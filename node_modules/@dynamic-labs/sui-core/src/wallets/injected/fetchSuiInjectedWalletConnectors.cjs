'use client'
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var walletStandard = require('@mysten/wallet-standard');
var utils = require('@dynamic-labs/utils');
var walletConnectorCore = require('@dynamic-labs/wallet-connector-core');
var injected = require('./injected.cjs');

const fetchSuiInjectedWalletConnectors = ({ walletBook, }) => {
    var _a;
    const walletStandardWallets = walletStandard.getWallets().get();
    const suiWalletStandardWallets = walletStandardWallets.filter((wallet) => walletStandard.isWalletWithRequiredFeatureSet(wallet, ['sui:signPersonalMessage']));
    const suiWalletsByKey = Object.fromEntries(suiWalletStandardWallets.map((wallet) => [wallet.name, wallet]));
    const walletBookConnectors = Object.entries((_a = walletBook === null || walletBook === void 0 ? void 0 : walletBook.wallets) !== null && _a !== void 0 ? _a : {})
        .filter(([, wallet]) => {
        var _a, _b;
        const injectedConfig = (_a = wallet.injectedConfig) === null || _a === void 0 ? void 0 : _a.find((config) => config.chain === 'sui');
        const isSuiWallet = Boolean(injectedConfig);
        const walletStandardName = (_b = injectedConfig === null || injectedConfig === void 0 ? void 0 : injectedConfig.walletStandard) === null || _b === void 0 ? void 0 : _b.name;
        // If the wallet is injected via wallet standard, use that over the wallet book entry
        const shouldBeFiltered = walletStandardName && suiWalletsByKey[walletStandardName];
        return isSuiWallet && !shouldBeFiltered;
    })
        .map(([key, wallet]) => {
        // Currently we only support wallet standard wallets
        const isInstalled = false;
        const metadata = walletConnectorCore.getWalletMetadataFromWalletBook({
            walletBook,
            walletBookWallet: wallet,
            walletKey: key,
        });
        return class extends injected.Injected {
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            constructor(props) {
                super(wallet.name, isInstalled, Object.assign({ metadata, overrideKey: key, wallet: wallet, walletBookEntry: wallet }, props));
            }
        };
    });
    // Wallet standard wallets don't always have injectedConfig from wallet book,
    // so we filter them by checking if they support critical sui features.
    const walletStandardConnectors = walletStandardWallets
        .filter((wallet) => { var _a; return (_a = wallet.features) === null || _a === void 0 ? void 0 : _a['sui:signPersonalMessage']; })
        .map((wallet) => {
        const sanitizedName = utils.sanitizeName(wallet.name);
        const isInstalled = true;
        return class extends injected.Injected {
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            constructor(props) {
                super(wallet.name, isInstalled, Object.assign({ metadata: {
                        groupKey: sanitizedName,
                        icon: wallet.icon,
                        id: wallet.name,
                        name: wallet.name,
                    }, name: wallet.name, overrideKey: `${sanitizedName}sui`, wallet: wallet }, props));
            }
        };
    });
    return [...walletBookConnectors, ...walletStandardConnectors];
};

exports.fetchSuiInjectedWalletConnectors = fetchSuiInjectedWalletConnectors;
