'use client'
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _tslib = require('../../_virtual/_tslib.cjs');
var transactions = require('@mysten/sui/transactions');
var walletConnectorCore = require('@dynamic-labs/wallet-connector-core');
var utils = require('@dynamic-labs/utils');
var constants = require('../utils/constants/constants.cjs');

class SuiWallet extends walletConnectorCore.Wallet {
    /**
     * Sends the native balance of the wallet to the given address.
     * @param amount - The amount of balance
     * @param toAddress - The address to send the balance to.
     * @returns The transaction as base64 encoded bcs.
     */
    sendBalance(_a) {
        return _tslib.__awaiter(this, arguments, void 0, function* ({ amount, toAddress, }) {
            var _b;
            yield this._connector.connect();
            const account = yield this._connector.getWalletAccount();
            const chain = account === null || account === void 0 ? void 0 : account.chains[0];
            if (!account) {
                throw new utils.DynamicError('Unable to retrieve Sui wallet account');
            }
            if (!chain) {
                throw new utils.DynamicError('Unable to retrieve Sui active network');
            }
            const transactionFeature = (_b = this._connector.getFeatures()) === null || _b === void 0 ? void 0 : _b['sui:signAndExecuteTransaction'];
            if (!transactionFeature) {
                throw new utils.DynamicError('Wallet does not support sui:signAndExecuteTransaction');
            }
            const transaction = new transactions.Transaction();
            const mistAmount = Number(amount) * constants.MIST_PER_SUI;
            // Let the transaction calculate gas automatically
            // https://sdk.mystenlabs.com/typescript/transaction-building/gas#gas-price
            const [coin] = transaction.splitCoins(transaction.gas, [mistAmount]);
            transaction.transferObjects([coin], toAddress);
            const { bytes } = yield transactionFeature.signAndExecuteTransaction({
                account,
                chain,
                transaction,
            });
            return bytes;
        });
    }
    /**
     * Returns the Sui Client object initialized for the wallet's current network.
     * @returns The [SuiClient] object.
     */
    getSuiClient() {
        return _tslib.__awaiter(this, void 0, void 0, function* () {
            return this._connector.getSuiClient();
        });
    }
    /**
     * @deprecated Use `getSuiClient` instead
     */
    getWalletClient() {
        return _tslib.__awaiter(this, void 0, void 0, function* () {
            return this._connector.getSuiClient();
        });
    }
    /**
     * Returns the wallet's current active account.
     * @returns a readonly [WalletAccount] object.
     */
    getWalletAccount() {
        return _tslib.__awaiter(this, void 0, void 0, function* () {
            return this._connector.getWalletAccount();
        });
    }
    /**
     * Returns the wallet's current active network.
     * @returns a string representing the active network, i.e. 'sui:devnet'.
     */
    getActiveNetwork() {
        return _tslib.__awaiter(this, void 0, void 0, function* () {
            const account = yield this._connector.getWalletAccount();
            return account === null || account === void 0 ? void 0 : account.chains[0];
        });
    }
    /**
     * Signs a Sui [Transaction].
     * @param tx - The [Transaction] to sign.
     * @returns The signature of the signed transaction.
     */
    signTransaction(transaction) {
        return _tslib.__awaiter(this, void 0, void 0, function* () {
            var _a;
            yield this._connector.connect();
            const account = yield this._connector.getWalletAccount();
            const chain = account === null || account === void 0 ? void 0 : account.chains[0];
            if (!account) {
                throw new utils.DynamicError('Unable to retrieve Sui wallet account');
            }
            if (!chain) {
                throw new utils.DynamicError('Unable to retrieve Sui active network');
            }
            const transactionFeature = (_a = this._connector.getFeatures()) === null || _a === void 0 ? void 0 : _a['sui:signTransaction'];
            if (!transactionFeature) {
                throw new utils.DynamicError('Wallet does not support sui:signTransaction');
            }
            const signedTransaction = yield transactionFeature.signTransaction({
                account,
                chain,
                transaction,
            });
            return signedTransaction;
        });
    }
}

exports.SuiWallet = SuiWallet;
