'use client'
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var assertPackageVersion = require('@dynamic-labs/assert-package-version');
var _package = require('../package.cjs');
var solanaCore = require('@dynamic-labs/solana-core');
var BackpackSol = require('./injected/BackpackSol/BackpackSol.cjs');
var InjectedWalletBase = require('./injected/InjectedWalletBase/InjectedWalletBase.cjs');
var SolanaWalletConnectors = require('./SolanaWalletConnectors.cjs');
var SolanaWalletConnectorsWithConfig = require('./SolanaWalletConnectorsWithConfig/SolanaWalletConnectorsWithConfig.cjs');
var isBackpackSolanaSigner = require('./utils/isBackpackSolanaSigner.cjs');
var isSignedMessage = require('./utils/isSignedMessage.cjs');
require('@dynamic-labs/wallet-book');
require('@dynamic-labs/wallet-connector-core');
require('@dynamic-labs/utils');
require('../_virtual/_tslib.cjs');
require('./utils/logger.cjs');
var createSolanaSignerFromWalletStandard = require('./injected/walletStandard/createSolanaSignerFromWalletStandard/createSolanaSignerFromWalletStandard.cjs');
var getWalletStandardWallets = require('./injected/walletStandard/getWalletStandardWallets/getWalletStandardWallets.cjs');
var hasAllWalletStandardRequiredFeatures = require('./injected/walletStandard/hasAllWalletStandardRequiredFeatures/hasAllWalletStandardRequiredFeatures.cjs');

/* eslint-disable @typescript-eslint/no-unused-vars */
assertPackageVersion.assertPackageVersion('@dynamic-labs/solana', _package.version);

Object.defineProperty(exports, 'SolanaWalletConnector', {
  enumerable: true,
  get: function () { return solanaCore.SolanaWalletConnector; }
});
Object.defineProperty(exports, 'isSolanaWallet', {
  enumerable: true,
  get: function () { return solanaCore.isSolanaWallet; }
});
exports.BackpackConnector = BackpackSol.BackpackSol;
exports.SolanaInjectedConnector = InjectedWalletBase.InjectedWalletBase;
exports.SolanaWalletConnectors = SolanaWalletConnectors.SolanaWalletConnectors;
exports.SolanaWalletConnectorsWithConfig = SolanaWalletConnectorsWithConfig.SolanaWalletConnectorsWithConfig;
exports.isBackpackSolanaSigner = isBackpackSolanaSigner.isBackpackSolanaSigner;
exports.isSignedMessage = isSignedMessage.isSignedMessage;
exports.createSolanaSignerFromWalletStandard = createSolanaSignerFromWalletStandard.createSolanaSignerFromWalletStandard;
exports.getWalletStandardWallets = getWalletStandardWallets.getWalletStandardWallets;
exports.hasAllWalletStandardRequiredFeatures = hasAllWalletStandardRequiredFeatures.hasAllWalletStandardRequiredFeatures;
