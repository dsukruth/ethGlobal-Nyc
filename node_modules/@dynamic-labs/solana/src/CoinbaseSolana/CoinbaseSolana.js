'use client'
import { __awaiter } from '../../_virtual/_tslib.js';
import { bufferToBase64 } from '@dynamic-labs/utils';
import { InjectedWalletBase } from '../injected/InjectedWalletBase/InjectedWalletBase.js';
import { isSignedMessage } from '../utils/isSignedMessage.js';

class CoinbaseSolana extends InjectedWalletBase {
    constructor() {
        super(...arguments);
        this.name = 'CoinbaseSolana';
        this.overrideKey = 'coinbasesolana';
    }
    getSigner() {
        return __awaiter(this, void 0, void 0, function* () {
            var _a;
            return (_a = this.solProviderHelper) === null || _a === void 0 ? void 0 : _a.connect();
        });
    }
    signMessage(messageToSign) {
        return __awaiter(this, void 0, void 0, function* () {
            const walletAddress = yield this.getAddress();
            if (!walletAddress) {
                return undefined;
            }
            const provider = yield this.getSigner();
            if (!provider) {
                return undefined;
            }
            const encodedMessage = new TextEncoder().encode(messageToSign);
            const signedMessage = yield provider.signMessage(encodedMessage, walletAddress);
            if (!signedMessage) {
                return undefined;
            }
            return bufferToBase64(isSignedMessage(signedMessage) ? signedMessage.signature : signedMessage);
        });
    }
}

export { CoinbaseSolana };
