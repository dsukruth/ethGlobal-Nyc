'use client'
import { jsx } from 'react/jsx-runtime';
import { useMemo, useEffect } from 'react';
import { useConfig } from 'wagmi';
import { ErrorBoundaryInclude, useDynamicContext, ErrorBoundaryExclude } from '@dynamic-labs/sdk-react-core';
import { isEthereumWallet } from '@dynamic-labs/ethereum-core';
import { logger } from '@dynamic-labs/wallet-connector-core';
import { getCreateConnectorFn } from './Connector.js';
import { SyncDynamicWagmi } from './SyncDynamicWagmi.js';
import { useChainMismatchLogger } from './useChainMismatchLogger.js';
import { useConnectorId } from './hooks/useConnectorId/useConnectorId.js';

const DynamicWagmiConnector = ({ suppressChainMismatchError = false, children, }) => (jsx(ErrorBoundaryInclude, { children: jsx(DynamicWagmiConnectorInner, { suppressChainMismatchError: suppressChainMismatchError, children: children }) }));
const getEvmWallet = (wallet) => {
    if (!wallet || !isEthereumWallet(wallet)) {
        return null;
    }
    return wallet;
};
const DynamicWagmiConnectorInner = ({ suppressChainMismatchError = false, children }) => {
    const config = useConfig();
    const { primaryWallet } = useDynamicContext();
    useChainMismatchLogger({ suppress: suppressChainMismatchError });
    const evmWallet = getEvmWallet(primaryWallet);
    const getConnectorId = useConnectorId();
    const connector = useMemo(() => {
        if (!evmWallet) {
            return;
        }
        const connectorId = getConnectorId(evmWallet.connector);
        return config._internal.connectors.setup(getCreateConnectorFn({
            connectorId,
            wallet: evmWallet,
        }));
    }, [config._internal.connectors, getConnectorId, evmWallet]);
    logger.logVerboseTroubleshootingMessage('[DynamicWagmiConnector] DynamicWagmiConnectorInner', {
        connector,
        evmWallet,
        primaryWallet: primaryWallet,
    });
    /**
     * Updating the wagmi config must be done in a useEffect because
     * when setting the public client and connectors, wagmi will fire
     * an rerender.
     * Keeping the update in a useEffect will prevent an state update
     * while react is in the middle of rendering.
     */
    useEffect(() => {
        config._internal.connectors.setState(connector ? [connector] : []);
    }, [config._internal.connectors, connector]);
    return (jsx(SyncDynamicWagmi, { connector: connector, wallet: evmWallet, children: jsx(ErrorBoundaryExclude, { children: children }) }));
};

export { DynamicWagmiConnector, DynamicWagmiConnectorInner };
