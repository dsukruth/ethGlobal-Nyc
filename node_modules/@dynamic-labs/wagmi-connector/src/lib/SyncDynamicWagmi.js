'use client'
import { __awaiter } from '../../_virtual/_tslib.js';
import { jsx, Fragment } from 'react/jsx-runtime';
import { useRef, useCallback, useEffect } from 'react';
import { useConfig, useConnect, useDisconnect } from 'wagmi';
import { useWalletConnectorEvent } from '@dynamic-labs/sdk-react-core';
import { logger } from '@dynamic-labs/wallet-connector-core';

const SyncDynamicWagmi = ({ children, connector, wallet, }) => {
    const { state: { status: clientStatus }, } = useConfig();
    const { connect } = useConnect();
    const { disconnect } = useDisconnect();
    const lastConnectedWalletId = useRef(undefined);
    const hasPreviousConnection = Boolean(lastConnectedWalletId.current);
    const disconnectWagmi = useCallback(() => {
        logger.logVerboseTroubleshootingMessage('[SyncDynamicWagmi] disconnecting wagmi - previous status: ', {
            clientStatus,
            lastConnectedWalletId: lastConnectedWalletId.current,
        });
        if (clientStatus === 'disconnected') {
            return;
        }
        disconnect();
        lastConnectedWalletId.current = undefined;
    }, [disconnect, clientStatus]);
    const connectWagmi = useCallback((connector, newId, forceConnect) => {
        logger.logVerboseTroubleshootingMessage('[SyncDynamicWagmi] connecting wagmi - previous status: ', {
            clientStatus,
            connectorKey: connector.key,
            forceConnect,
            lastConnectedWalletId: lastConnectedWalletId.current,
            newId,
        });
        if (clientStatus !== 'disconnected' && !forceConnect) {
            return;
        }
        lastConnectedWalletId.current = newId;
        connect({ connector });
    }, [connect, clientStatus]);
    const sync = useCallback(() => __awaiter(void 0, void 0, void 0, function* () {
        logger.logVerboseTroubleshootingMessage('[SyncDynamicWagmi] sync', {
            connectorKey: connector === null || connector === void 0 ? void 0 : connector.key,
            hasPreviousConnection,
            lastConnectedWalletId: lastConnectedWalletId.current,
            wallet: wallet === null || wallet === void 0 ? void 0 : wallet.address,
        });
        // if there's no connector, disconnect wagmi
        if (!connector || !(wallet === null || wallet === void 0 ? void 0 : wallet.address)) {
            disconnectWagmi();
            return;
        }
        const newId = `${connector.id}-${wallet.address}`;
        // if the connector hasn't changed since the last connection, do nothing
        if (newId === lastConnectedWalletId.current) {
            return;
        }
        // if has a previous connection, disconnect wagmi
        if (hasPreviousConnection) {
            disconnectWagmi();
        }
        // and then (re)connect wagmi
        // force reconnect if has disconnected in the preivous step
        // in case the clientStatus takes a while to update
        connectWagmi(connector, newId, hasPreviousConnection);
    }), [
        connectWagmi,
        connector,
        disconnectWagmi,
        hasPreviousConnection,
        wallet === null || wallet === void 0 ? void 0 : wallet.address,
    ]);
    // this is for handling the scenario where the user unlocks the wallet,
    // as well as changes to a linked wallet
    useWalletConnectorEvent(wallet === null || wallet === void 0 ? void 0 : wallet.connector, 'accountChange', () => {
        var _a;
        logger.logVerboseTroubleshootingMessage('[SyncDynamicWagmi] accountChange', {
            clientStatus,
            connectorKey: (_a = wallet === null || wallet === void 0 ? void 0 : wallet.connector) === null || _a === void 0 ? void 0 : _a.key,
            lastConnectedWalletId: lastConnectedWalletId.current,
        });
        sync();
    });
    useEffect(() => {
        logger.logVerboseTroubleshootingMessage('[SyncDynamicWagmi] useEffect', {
            clientStatus,
        });
        sync();
    }, [sync, clientStatus]);
    // eslint-disable-next-line react/jsx-no-useless-fragment
    return jsx(Fragment, { children: children });
};

export { SyncDynamicWagmi };
