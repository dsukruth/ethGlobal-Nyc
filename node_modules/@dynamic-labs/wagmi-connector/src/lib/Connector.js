'use client'
import { __awaiter } from '../../_virtual/_tslib.js';
import { createConnector } from '@wagmi/core';
import { getAddress, createWalletClient, custom } from 'viem';

/* eslint-disable prefer-arrow/prefer-arrow-functions */
const getCreateConnectorFn = ({ connectorId, wallet, }) => createConnector((config) => ({
    connect() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!wallet.connector) {
                throw new Error('WalletConnector is not defined');
            }
            wallet.connector.on('accountChange', this.handleAccountsChange.bind(this));
            wallet.connector.on('chainChange', this.handleChainChange.bind(this));
            wallet.connector.on('disconnect', this.onDisconnect.bind(this));
            const accounts = yield this.getAccounts();
            return {
                accounts,
                chainId: yield this.getChainId(),
            };
        });
    },
    disconnect() {
        return __awaiter(this, void 0, void 0, function* () {
            wallet.connector.off('accountChange', this.handleAccountsChange.bind(this));
            wallet.connector.off('chainChange', this.handleChainChange.bind(this));
            wallet.connector.off('disconnect', this.onDisconnect.bind(this));
        });
    },
    getAccounts() {
        return __awaiter(this, void 0, void 0, function* () {
            return [getAddress(wallet.address)];
        });
    },
    getChainId() {
        return __awaiter(this, void 0, void 0, function* () {
            const network = yield wallet.connector.getNetwork();
            if (!network) {
                throw new Error('Network is not defined');
            }
            return Number(network);
        });
    },
    getClient(args) {
        return __awaiter(this, void 0, void 0, function* () {
            var _a, _b;
            const walletClient = yield wallet.getWalletClient();
            const transportConfig = wallet.getTransportConfig();
            const client = createWalletClient({
                account: walletClient.account || ((_a = (yield this.getAccounts())) === null || _a === void 0 ? void 0 : _a[0]),
                chain: (_b = (walletClient.chain ||
                    config.chains.find((chain) => chain.id === (args === null || args === void 0 ? void 0 : args.chainId)))) !== null && _b !== void 0 ? _b : config.chains[0],
                transport: custom(walletClient, transportConfig),
            });
            return client;
        });
    },
    getProvider() {
        return __awaiter(this, void 0, void 0, function* () {
            return wallet.getWalletClient();
        });
    },
    handleAccountsChange({ accounts }) {
        this.onAccountsChanged(accounts);
    },
    handleChainChange({ chain }) {
        this.onChainChanged(chain);
    },
    id: connectorId,
    isAuthorized() {
        return __awaiter(this, void 0, void 0, function* () {
            var _a, _b;
            const accounts = (_b = (yield ((_a = wallet.connector) === null || _a === void 0 ? void 0 : _a.getConnectedAccounts()))) !== null && _b !== void 0 ? _b : [];
            return accounts.includes(wallet.address);
        });
    },
    name: 'Dynamic',
    onAccountsChanged(_) {
        // this changes the active account on wagmi, but we don't want to do that
        // we want the active account to always match the primary wallet
        // so we should not emit this event on the wagmi config
    },
    onChainChanged(chainId) {
        config.emitter.emit('change', {
            chainId: Number(chainId),
        });
    },
    onDisconnect() { },
    switchChain(_a) {
        return __awaiter(this, arguments, void 0, function* ({ chainId }) {
            const chain = config.chains.find((x) => x.id === chainId);
            if (!chain) {
                throw new Error(`Chain ${chainId} is not supported`);
            }
            yield wallet.switchNetwork(chainId);
            return chain;
        });
    },
    type: 'dynamic',
}));

export { getCreateConnectorFn };
