'use client'
import { useEffect } from 'react';
import { useConfig } from 'wagmi';
import { Logger } from '@dynamic-labs/logger';
import { useDynamicContext } from '@dynamic-labs/sdk-react-core';

const logger = new Logger('DynamicWagmiConnector');
const useChainMismatchLogger = ({ suppress, } = { suppress: false }) => {
    const config = useConfig();
    const { networkConfigurations } = useDynamicContext();
    useEffect(() => {
        if (!(networkConfigurations === null || networkConfigurations === void 0 ? void 0 : networkConfigurations.evm) || suppress)
            return;
        const wagmiChains = config.chains;
        const wagmiChainIds = wagmiChains.map((chain) => chain.id);
        const dynamicChains = networkConfigurations.evm;
        const dynamicChainIds = dynamicChains.map((chain) => chain.chainId);
        wagmiChains.forEach((chain) => {
            if (!dynamicChainIds.includes(chain.id)) {
                const message = `Chain (id: ${chain.id} name: ${chain.name}) is present in the Wagmi config, but is not present in the Dynamic configuration.` +
                    ' Please make sure to enable the chain in your Dynamic Dashboard, or add it to the evmNetworks prop on DynamicContextProvider.' +
                    ' For more information, see: https://docs.dynamic.xyz/guides/frameworks/wagmi-v2#chain-configuration';
                logger.warn(message);
            }
        });
        dynamicChains.forEach((chain) => {
            if (!wagmiChainIds.includes(Number(chain.chainId))) {
                const message = `Chain (id: ${chain.chainId} name: ${chain.name}) is present in the Dynamic config, but is not present in the Wagmi configuration.` +
                    ' Please make sure to add the chain to the chains prop on the Wagmi createConfig function.' +
                    ' For more information, see: https://docs.dynamic.xyz/guides/frameworks/wagmi-v2#chain-configuration';
                logger.warn(message);
            }
        });
    }, [config.chains, networkConfigurations, suppress]);
};

export { useChainMismatchLogger };
