import { type MessageTransportWithDefaultOrigin } from '@dynamic-labs/message-transport';
import { iframeMessageHandler } from '../../services/iframeMessageHandler';
export declare class IframeManager {
    protected chainName: string;
    protected logger: import("@dynamic-labs/logger").Logger;
    instanceId: string | null;
    iframeDomain: string | null;
    environmentId: string;
    private readonly authToken;
    baseApiUrl: string;
    baseMPCRelayApiUrl: string;
    protected messageTransport: MessageTransportWithDefaultOrigin | null;
    protected iframeMessageHandler: iframeMessageHandler | null;
    private static iframeLoadPromise;
    protected iframe: HTMLIFrameElement | null;
    private readonly debug;
    static iframeLoadTimeout: number;
    private static iframeLoadAttempts;
    private static readonly maxRetryAttempts;
    private static sharedIframe;
    private static iframeInstanceCount;
    sdkVersion: string | undefined;
    constructor({ environmentId, authToken, baseApiUrl, baseMPCRelayApiUrl, chainName, sdkVersion, debug, }: {
        environmentId: string;
        authToken: string;
        baseApiUrl: string;
        baseMPCRelayApiUrl: string;
        chainName: string;
        sdkVersion?: string;
        debug?: boolean;
    });
    initialize(): Promise<void>;
    /**
     * this is called on class construction time
     * @returns {Promise<void>} that resolves when the iframe is loaded and the message transport and iframe storage are initialized
     */
    initializeIframeCommunication(): Promise<void>;
    /**
     * initialize the iframe communication by awaiting the iframe load promise
     * and initializing the message transport and iframe storage after iframe is successfully loaded
     */
    private doInitializeIframeCommunication;
    /**
     * initialize the message transport after iframe is successfully loaded
     */
    protected initializeMessageTransport(): Promise<void>;
    /**
     * securely exchange the auth token with iframe securely
     */
    private initAuthToken;
    /**
     * Reset the shared iframe and iframe load promise, and iframe instance count
     */
    private resetSharedIframe;
    private loadIframe;
    private assignExistingIframe;
    private createIframeLoadPromise;
    private setupIframeEventHandlersWithRetry;
    private getIframeContext;
    private createMessageListener;
    private configureIframe;
    private setIframeSource;
    /**
     * Load an iframe for a specific container
     * @param {HTMLElement} container - The container to which the iframe will be attached
     * @returns {Promise<HTMLIFrameElement>} that resolves when the iframe is loaded
     */
    private loadIframeForContainer;
    /**
     * Initializes the iframe display for a specific container.
     *
     * @param {HTMLElement} container - The container to which the iframe will be attached.
     * @returns:
     *   iframe: HTMLIFrameElement;
     *   iframeDisplay: IframeDisplayChannelAdapter;
     *   cleanup: () => void;
     */
    initializeIframeDisplayForContainer({ container, }: {
        container: HTMLElement;
    }): Promise<{
        iframe: HTMLIFrameElement;
        iframeDisplay: iframeMessageHandler;
        cleanup: () => void;
    }>;
    cleanup(): Promise<void>;
}
//# sourceMappingURL=IframeManager.d.ts.map