import { type AxiosInstance } from 'axios';
import { SuccessEventType } from '../types';
/**
 * Creates a promise that resolves when a specific event is received from an event stream.
 * Adds a timeout to prevent hanging and races the two promises.
 *
 * @template T The expected type of the response data
 * @param apiClient The axios instance to use for API calls
 * @param options The configuration options
 * @returns A promise that resolves with the event data or rejects on timeout
 */
export declare const createEventStreamPromise: <T>({ apiClient, dynamicRequestId, endpoint, body, successEventType, timeoutMs, timeoutMessage, onError, onCeremonyComplete, mfaToken, }: {
    apiClient: AxiosInstance;
    dynamicRequestId?: string;
    endpoint: string;
    body: Record<string, unknown> | undefined;
    successEventType: SuccessEventType;
    timeoutMs?: number;
    timeoutMessage: string;
    onError?: (error: Error) => void;
    onCeremonyComplete?: (accountAddress: string, walletId: string) => void;
    mfaToken?: string;
}) => Promise<T>;
/**
 * Creates a handler function for processing server-sent events (SSE) streams.
 * This utility manages asynchronous event-based communication with the server,
 * particularly for long-running operations like wallet creation or key generation.
 *
 * @template T - The expected type of the successful response data
 * @param {function} resolve - Promise resolution function to call when the success event is received
 * @param {function} reject - Promise rejection function to call when an error occurs
 * @param {string} successEventType - The event type string that indicates a successful operation
 * @param {function} [onError] - Optional callback for error handling, allowing custom error processing
 * @returns {function} A response handler function that processes the event stream
 */
export declare const createSuccessErrorEventStreamHandler: <T>({ resolve, reject, successEventType, onError, onCeremonyComplete, }: {
    resolve: (data: T) => void;
    reject: (error: Error) => void;
    successEventType: string;
    onError?: (error: Error) => void;
    onCeremonyComplete?: (accountAddress: string, walletId: string) => void;
}) => (response: {
    data: {
        getReader: () => {
            read: () => Promise<{
                value: Uint8Array;
                done: boolean;
            }>;
        };
    };
}) => void;
//# sourceMappingURL=utils.d.ts.map